{
  "address": "0x12e3C97d8435F60052aF647DB127266237f7216a",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "initialOwnerOfBlockyZero",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "currentTime",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "deadline",
          "type": "uint256"
        }
      ],
      "name": "DeadlineOver",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "invalid",
          "type": "address"
        }
      ],
      "name": "InvalidAddress",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "InvalidSignature",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenID",
          "type": "uint256"
        }
      ],
      "name": "NonExistentToken",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "NonceOverflow",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "NotAuthorized",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "provided",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "expected",
          "type": "address"
        }
      ],
      "name": "NotOwner",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "TransferRejected",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "approved",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "Approval",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "approved",
          "type": "bool"
        }
      ],
      "name": "ApprovalForAll",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "Transfer",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "DOMAIN_SEPARATOR",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "PERMIT_FOR_ALL_TYPEHASH",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "PERMIT_TYPEHASH",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "approve",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        }
      ],
      "name": "balanceOf",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "balance",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "eip712Domain",
      "outputs": [
        {
          "internalType": "bytes1",
          "name": "fields",
          "type": "bytes1"
        },
        {
          "internalType": "string",
          "name": "name",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "version",
          "type": "string"
        },
        {
          "internalType": "uint256",
          "name": "chainId",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "verifyingContract",
          "type": "address"
        },
        {
          "internalType": "bytes32",
          "name": "salt",
          "type": "bytes32"
        },
        {
          "internalType": "uint256[]",
          "name": "extensions",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        }
      ],
      "name": "emitSelfTransferEvent",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "getApproved",
      "outputs": [
        {
          "internalType": "address",
          "name": "operator",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "operator",
          "type": "address"
        }
      ],
      "name": "isApprovedForAll",
      "outputs": [
        {
          "internalType": "bool",
          "name": "isOperator",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "name",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        }
      ],
      "name": "nonces",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "nonce",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "nonces",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "nonce",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256[]",
          "name": "ids",
          "type": "uint256[]"
        }
      ],
      "name": "ownerAndLastTransferBlockNumberList",
      "outputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "owner",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "lastTransferBlockNumber",
              "type": "uint256"
            }
          ],
          "internalType": "struct IERC721WithBlocknumber.OwnerData[]",
          "name": "ownersData",
          "type": "tuple[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        }
      ],
      "name": "ownerAndLastTransferBlockNumberOf",
      "outputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "blockNumber",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "ownerOf",
      "outputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "spender",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "deadline",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "sig",
          "type": "bytes"
        }
      ],
      "name": "permit",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "spender",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "deadline",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "sig",
          "type": "bytes"
        }
      ],
      "name": "permitForAll",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "safeTransferFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "data",
          "type": "bytes"
        }
      ],
      "name": "safeTransferFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "approved",
          "type": "bool"
        }
      ],
      "name": "setApprovalForAll",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes4",
          "name": "id",
          "type": "bytes4"
        }
      ],
      "name": "supportsInterface",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "symbol",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "tokenNonces",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "nonce",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        }
      ],
      "name": "tokenURI",
      "outputs": [
        {
          "internalType": "string",
          "name": "str",
          "type": "string"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalSupply",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "transferFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0xfd3063ab49d9fb45a5eca95e01868b3061dca55ba143b5869c37907273068976",
  "receipt": {
    "to": "0x4e59b44847b379578588920cA78FbF26c0B4956C",
    "from": "0x61c461EcC993aaDEB7e4b47E96d1B8cC37314B20",
    "contractAddress": null,
    "transactionIndex": 89,
    "gasUsed": "2961397",
    "logsBloom": "0x
    "blockHash": "0xe2f64f88aa305f54546194c4b1f2007fee717a4fe66b6200a577881a67d64040",
    "transactionHash": "0xfd3063ab49d9fb45a5eca95e01868b3061dca55ba143b5869c37907273068976",
    "logs": [
      {
        "transactionIndex": 89,
        "blockNumber": 7873523,
        "transactionHash": "0xfd3063ab49d9fb45a5eca95e01868b3061dca55ba143b5869c37907273068976",
        "address": "0x12e3C97d8435F60052aF647DB127266237f7216a",
        "topics": [
          "0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x00000000000000000000000061c461ecc993aadeb7e4b47e96d1b8cc37314b20",
          "0x0000000000000000000000000000000000000000000000000000000000000000"
        ],
        "data": "0x",
        "logIndex": 189,
        "blockHash": "0xe2f64f88aa305f54546194c4b1f2007fee717a4fe66b6200a577881a67d64040"
      }
    ],
    "blockNumber": 7873523,
    "cumulativeGasUsed": "29178533",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x61c461EcC993aaDEB7e4b47E96d1B8cC37314B20"
  ],
  "numDeployments": 1,
  "solcInputHash": "79a61e03503c0e36fe54a7ce3aad9ee7",
  "metadata": "{\"compiler\":{\"version\":\"0.8.16+commit.07a7930e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"initialOwnerOfBlockyZero\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"currentTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"}],\"name\":\"DeadlineOver\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"invalid\",\"type\":\"address\"}],\"name\":\"InvalidAddress\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidSignature\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenID\",\"type\":\"uint256\"}],\"name\":\"NonExistentToken\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NonceOverflow\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NotAuthorized\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"provided\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"expected\",\"type\":\"address\"}],\"name\":\"NotOwner\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"TransferRejected\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"approved\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"ApprovalForAll\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"DOMAIN_SEPARATOR\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"PERMIT_FOR_ALL_TYPEHASH\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"PERMIT_TYPEHASH\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"balance\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"eip712Domain\",\"outputs\":[{\"internalType\":\"bytes1\",\"name\":\"fields\",\"type\":\"bytes1\"},{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"version\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"chainId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"verifyingContract\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"salt\",\"type\":\"bytes32\"},{\"internalType\":\"uint256[]\",\"name\":\"extensions\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"emitSelfTransferEvent\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getApproved\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"isApprovedForAll\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"isOperator\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"nonces\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"nonce\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"nonces\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"nonce\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"ids\",\"type\":\"uint256[]\"}],\"name\":\"ownerAndLastTransferBlockNumberList\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"lastTransferBlockNumber\",\"type\":\"uint256\"}],\"internalType\":\"struct IERC721WithBlocknumber.OwnerData[]\",\"name\":\"ownersData\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"ownerAndLastTransferBlockNumberOf\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"blockNumber\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"ownerOf\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"sig\",\"type\":\"bytes\"}],\"name\":\"permit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"sig\",\"type\":\"bytes\"}],\"name\":\"permitForAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"setApprovalForAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"id\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"tokenNonces\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"nonce\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"tokenURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"str\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"approve(address,uint256)\":{\"params\":{\"operator\":\"The address receiving the approval.\",\"tokenId\":\"The id of the token.\"}},\"balanceOf(address)\":{\"params\":{\"owner\":\"The address to look for.\"},\"returns\":{\"balance\":\"The number of tokens owned by the address.\"}},\"eip712Domain()\":{\"returns\":{\"chainId\":\"EIP-712 chainId\",\"extensions\":\"A list of EIP numbers that specify additional fields in the domain. The method to obtain the value for each of these additional fields and any conditions for inclusion are expected to be specified in the respective EIP. The value of fields does not affect their inclusion.\",\"fields\":\"A bit map where bit i is set to 1 if and only if domain field i is present (0 \\u2264 i \\u2264 4). Bits are read from least significant to most significant, and fields are indexed in the order that is specified by EIP-712, identical to the order in which they are listed in the function type.\",\"name\":\"EIP-712 name\",\"salt\":\"EIP-712 salt\",\"verifyingContract\":\"EIP-712 name verifyingContract\",\"version\":\"EIP-712 version\"}},\"emitSelfTransferEvent(uint256)\":{\"params\":{\"id\":\"tokenID to emit the event for.\"}},\"getApproved(uint256)\":{\"params\":{\"tokenId\":\"The id of the token.\"},\"returns\":{\"operator\":\"The address of the operator.\"}},\"isApprovedForAll(address,address)\":{\"params\":{\"operator\":\"The address of the operator.\",\"owner\":\"The address of the owner.\"},\"returns\":{\"isOperator\":\"The status of the approval.\"}},\"nonces(address)\":{\"params\":{\"account\":\"account to query\"},\"returns\":{\"nonce\":\"account's nonce\"}},\"nonces(uint256)\":{\"params\":{\"tokenId\":\"token id\"},\"returns\":{\"nonce\":\"token nonce\"}},\"ownerAndLastTransferBlockNumberList(uint256[])\":{\"params\":{\"ids\":\"The list of token ids to check.\"},\"returns\":{\"ownersData\":\"The list of (owner, lastTransferBlockNumber) for each ids given as input.\"}},\"ownerAndLastTransferBlockNumberOf(uint256)\":{\"params\":{\"id\":\"The id of the token.\"},\"returns\":{\"blockNumber\":\"The blocknumber at which the last transfer of that id happened.\",\"owner\":\"The address of the token owner.\"}},\"ownerOf(uint256)\":{\"params\":{\"tokenId\":\"The id of the token.\"},\"returns\":{\"owner\":\"The address of the token owner.\"}},\"permit(address,uint256,uint256,bytes)\":{\"details\":\"Anyone can call this to approve `spender`, even a third-party\",\"params\":{\"deadline\":\"the deadline for the permit to be used\",\"signature\":\"permit\",\"spender\":\"the actor to approve\",\"tokenId\":\"the token id\"}},\"permitForAll(address,address,uint256,bytes)\":{\"details\":\"Anyone can call this to approve `spender`, even a third-party\",\"params\":{\"deadline\":\"the deadline for the permit to be used\",\"signature\":\"permit\",\"signer\":\"the one giving permission\",\"spender\":\"the actor to approve\"}},\"safeTransferFrom(address,address,uint256)\":{\"params\":{\"from\":\"The send of the token.\",\"to\":\"The recipient of the token.\",\"tokenId\":\"The id of the token.\"}},\"safeTransferFrom(address,address,uint256,bytes)\":{\"params\":{\"data\":\"Additional data.\",\"from\":\"The sender of the token.\",\"to\":\"The recipient of the token.\",\"tokenId\":\"The id of the token.\"}},\"setApprovalForAll(address,bool)\":{\"params\":{\"approved\":\"The determination of the approval.\",\"operator\":\"The address receiving the approval.\"}},\"supportsInterface(bytes4)\":{\"details\":\"Interface identification is specified in ERC-165. This function  uses less than 30,000 gas.\",\"params\":{\"interfaceID\":\"The interface identifier, as specified in ERC-165\"},\"returns\":{\"_0\":\"`true` if the contract implements `interfaceID` and  `interfaceID` is not 0xffffffff, `false` otherwise\"}},\"tokenNonces(uint256)\":{\"params\":{\"tokenId\":\"token id\"},\"returns\":{\"nonce\":\"token nonce\"}},\"tokenURI(uint256)\":{\"details\":\"Throws if `_tokenId` is not a valid NFT. URIs are defined in RFC  3986. The URI may point to a JSON file that conforms to the \\\"ERC721  Metadata JSON Schema\\\".\"},\"transferFrom(address,address,uint256)\":{\"params\":{\"from\":\"The sender of the token.\",\"to\":\"The recipient of the token.\",\"tokenId\":\"The id of the token.\"}}},\"title\":\"Blockies on-chain\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"DOMAIN_SEPARATOR()\":{\"notice\":\"EIP-712 Domain separator hash\"},\"approve(address,uint256)\":{\"notice\":\"Approve an operator to transfer a specific token on the senders behalf.\"},\"balanceOf(address)\":{\"notice\":\"Get the number of tokens owned by an address.\"},\"eip712Domain()\":{\"notice\":\"The return values of this function MUST describe the domain separator that is used for verification of EIP-712 signatures in the contract. They describe both the form of the EIP712Domain struct (i.e., which of the optional fields and extensions are present) and the value of each field, as follows.\"},\"emitSelfTransferEvent(uint256)\":{\"notice\":\"emit Transfer event so that indexer can pick it up.   This can be called by anyone at any time and does not change state   As such it keeps the token's operator-approval state and will re-emit an Approval event to indicate that.\"},\"getApproved(uint256)\":{\"notice\":\"Get the approved operator for a specific token.\"},\"isApprovedForAll(address,address)\":{\"notice\":\"Check if the sender approved the operator.\"},\"name()\":{\"notice\":\"A descriptive name for a collection of NFTs in this contract\"},\"nonces(address)\":{\"notice\":\"Allows to retrieve current nonce for the account\"},\"nonces(uint256)\":{\"notice\":\"Allows to retrieve current nonce for token\"},\"ownerAndLastTransferBlockNumberList(uint256[])\":{\"notice\":\"Get the list of owner of a token and the blockNumber of its last transfer, useful to voting mechanism.\"},\"ownerAndLastTransferBlockNumberOf(uint256)\":{\"notice\":\"Get the owner of a token and the blockNumber of the last transfer, useful to voting mechanism.\"},\"ownerOf(uint256)\":{\"notice\":\"Get the owner of a token.\"},\"permit(address,uint256,uint256,bytes)\":{\"notice\":\"function to be called by anyone to approve `spender` using a Permit signature\"},\"permitForAll(address,address,uint256,bytes)\":{\"notice\":\"function to be called by anyone to approve `spender` using a Permit signature\"},\"safeTransferFrom(address,address,uint256)\":{\"notice\":\"Transfer a token between 2 addresses letting the receiver know of the transfer.\"},\"safeTransferFrom(address,address,uint256,bytes)\":{\"notice\":\"Transfer a token between 2 addresses letting the receiver knows of the transfer.\"},\"setApprovalForAll(address,bool)\":{\"notice\":\"Set the approval for an operator to manage all the tokens of the sender.\"},\"supportsInterface(bytes4)\":{\"notice\":\"Query if a contract implements an interface\"},\"symbol()\":{\"notice\":\"An abbreviated name for NFTs in this contract\"},\"tokenNonces(uint256)\":{\"notice\":\"Allows to retrieve current nonce for token\"},\"tokenURI(uint256)\":{\"notice\":\"A distinct Uniform Resource Identifier (URI) for a given asset.\"},\"transferFrom(address,address,uint256)\":{\"notice\":\"Transfer a token between 2 addresses.\"}},\"notice\":\"Blockies as NFT. Each ethereum address owns its own one. No minting needed. You can even use Permit (EIP-4494) to approve contracts via signatures. Note though that unless you transfer or call `emitSelfTransferEvent` indexer would not know of your token.\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"src/Blockies.sol\":\"Blockies\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":2000},\"remappings\":[]},\"sources\":{\"solidity-kit/solc_0.8/ERC165/implementations/UsingERC165Internal.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"../interfaces/IERC165.sol\\\";\\n\\nabstract contract UsingERC165Internal is IERC165 {\\n\\t/// @inheritdoc IERC165\\n\\tfunction supportsInterface(bytes4) public view virtual returns (bool) {\\n\\t\\treturn false;\\n\\t}\\n}\\n\",\"keccak256\":\"0xe1c3dcc3cf91a7fce82324d796159c9ab4e45f64d0d9bd0bc98c580414819af7\",\"license\":\"MIT\"},\"solidity-kit/solc_0.8/ERC165/interfaces/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface IERC165 {\\n\\t/// @notice Query if a contract implements an interface\\n\\t/// @param interfaceID The interface identifier, as specified in ERC-165\\n\\t/// @dev Interface identification is specified in ERC-165. This function\\n\\t///  uses less than 30,000 gas.\\n\\t/// @return `true` if the contract implements `interfaceID` and\\n\\t///  `interfaceID` is not 0xffffffff, `false` otherwise\\n\\tfunction supportsInterface(bytes4 interfaceID) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x036eb02f585d3f298df9fc1470e1d761b74e86793b6c27d8d8608620146b3cf9\",\"license\":\"MIT\"},\"solidity-kit/solc_0.8/ERC712/implementations/ImplementingExternalDomainSeparator.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nabstract contract ImplementingExternalDomainSeparator {\\n\\t/// @notice EIP-712 Domain separator hash\\n\\tfunction DOMAIN_SEPARATOR() public view virtual returns (bytes32);\\n}\\n\",\"keccak256\":\"0xaeea9575d7d21d565d7148a9d57d5f559760e1e73a94e9038b2110cd50d1cd14\",\"license\":\"MIT\"},\"solidity-kit/solc_0.8/ERC712/implementations/Named.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nabstract contract Named {\\n\\t/// @notice Returns the name of the contract.\\n\\tfunction name() public view virtual returns (string memory);\\n}\\n\",\"keccak256\":\"0x924b53f83a89b85206c14daea25f30248502b831f4424186c567581581c46794\",\"license\":\"MIT\"},\"solidity-kit/solc_0.8/ERC712/implementations/UsingERC712.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"../interfaces/IERC5267.sol\\\";\\n\\nabstract contract UsingERC712 is IERC5267 {}\\n\",\"keccak256\":\"0x5b2d5c3dd2ebe8dedf66a6d1a8b01918a42dfe3bc00778dca06fdf7686b7699e\",\"license\":\"MIT\"},\"solidity-kit/solc_0.8/ERC712/implementations/UsingERC712WithDynamicChainId.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"./UsingERC712.sol\\\";\\nimport \\\"./Named.sol\\\";\\n\\nabstract contract UsingERC712WithDynamicChainId is UsingERC712, Named {\\n\\tuint256 private immutable _deploymentChainId;\\n\\tbytes32 private immutable _deploymentDomainSeparator;\\n\\n\\tconstructor(address verifyingContract) {\\n\\t\\tuint256 chainId;\\n\\t\\tassembly {\\n\\t\\t\\tchainId := chainid()\\n\\t\\t}\\n\\n\\t\\t_deploymentChainId = chainId;\\n\\t\\t_deploymentDomainSeparator = _calculateDomainSeparator(\\n\\t\\t\\tchainId,\\n\\t\\t\\tverifyingContract == address(0) ? address(this) : verifyingContract\\n\\t\\t);\\n\\t}\\n\\n\\t/// @inheritdoc IERC5267\\n\\tfunction eip712Domain()\\n\\t\\texternal\\n\\t\\tview\\n\\t\\tvirtual\\n\\t\\toverride\\n\\t\\treturns (\\n\\t\\t\\tbytes1 fields,\\n\\t\\t\\tstring memory name,\\n\\t\\t\\tstring memory version,\\n\\t\\t\\tuint256 chainId,\\n\\t\\t\\taddress verifyingContract,\\n\\t\\t\\tbytes32 salt,\\n\\t\\t\\tuint256[] memory extensions\\n\\t\\t)\\n\\t{\\n\\t\\tfields = 0x0D;\\n\\t\\tname = _name();\\n\\t\\tversion = \\\"\\\";\\n\\t\\tassembly {\\n\\t\\t\\tchainId := chainid()\\n\\t\\t}\\n\\t\\tverifyingContract = address(this);\\n\\t\\tsalt = 0;\\n\\t\\textensions = new uint256[](0);\\n\\t}\\n\\n\\t// ------------------------------------------------------------------------------------------------------------------\\n\\t// INTERNALS\\n\\t// ------------------------------------------------------------------------------------------------------------------\\n\\n\\t// need to ensure we can use return value \\\"name\\\" in `eip712Domain`\\n\\tfunction _name() internal view returns (string memory) {\\n\\t\\treturn name();\\n\\t}\\n\\n\\tfunction _currentDomainSeparator() internal view returns (bytes32) {\\n\\t\\tuint256 chainId;\\n\\t\\tassembly {\\n\\t\\t\\tchainId := chainid()\\n\\t\\t}\\n\\n\\t\\t// in case a fork happen, to support the chain that had to change its chainId, we compute the domain operator\\n\\t\\treturn\\n\\t\\t\\tchainId == _deploymentChainId\\n\\t\\t\\t\\t? _deploymentDomainSeparator\\n\\t\\t\\t\\t: _calculateDomainSeparator(chainId, address(this));\\n\\t}\\n\\n\\t/// @dev Calculate the Domain Separator used to compute ERC712 hash\\n\\tfunction _calculateDomainSeparator(uint256 chainId, address verifyingContract) private view returns (bytes32) {\\n\\t\\treturn\\n\\t\\t\\tkeccak256(\\n\\t\\t\\t\\tabi.encode(\\n\\t\\t\\t\\t\\tkeccak256(\\\"EIP712Domain(string name,uint256 chainId,address verifyingContract)\\\"),\\n\\t\\t\\t\\t\\tkeccak256(bytes(name())),\\n\\t\\t\\t\\t\\tchainId,\\n\\t\\t\\t\\t\\tverifyingContract\\n\\t\\t\\t\\t)\\n\\t\\t\\t);\\n\\t}\\n}\\n\",\"keccak256\":\"0xec06088b4eab4115e7d89f37c90bf7c8eeaa2f5ec2419a26b483939c9a550846\",\"license\":\"MIT\"},\"solidity-kit/solc_0.8/ERC712/interfaces/IERC5267.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\ninterface IERC5267 {\\n\\t/// @notice The return values of this function MUST describe the domain separator that is used for verification of EIP-712 signatures in the contract. They describe both the form of the EIP712Domain struct (i.e., which of the optional fields and extensions are present) and the value of each field, as follows.\\n\\t/// @return fields A bit map where bit i is set to 1 if and only if domain field i is present (0 \\u2264 i \\u2264 4). Bits are read from least significant to most significant, and fields are indexed in the order that is specified by EIP-712, identical to the order in which they are listed in the function type.\\n\\t/// @return name EIP-712 name\\n\\t/// @return version EIP-712 version\\n\\t/// @return chainId EIP-712 chainId\\n\\t/// @return verifyingContract EIP-712 name verifyingContract\\n\\t/// @return salt EIP-712 salt\\n\\t/// @return extensions A list of EIP numbers that specify additional fields in the domain. The method to obtain the value for each of these additional fields and any conditions for inclusion are expected to be specified in the respective EIP. The value of fields does not affect their inclusion.\\n\\tfunction eip712Domain()\\n\\t\\texternal\\n\\t\\tview\\n\\t\\treturns (\\n\\t\\t\\tbytes1 fields,\\n\\t\\t\\tstring memory name,\\n\\t\\t\\tstring memory version,\\n\\t\\t\\tuint256 chainId,\\n\\t\\t\\taddress verifyingContract,\\n\\t\\t\\tbytes32 salt,\\n\\t\\t\\tuint256[] memory extensions\\n\\t\\t);\\n}\\n\",\"keccak256\":\"0x76268a69cb6c346a2871f465ddec751af7f03b9484d05cc7f856c356115c34e1\",\"license\":\"MIT\"},\"solidity-kit/solc_0.8/ERC721/ERC4494/implementations/UsingERC4494Permit.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../implementations/ImplementingERC721Internal.sol\\\";\\nimport \\\"../../../ERC165/implementations/UsingERC165Internal.sol\\\";\\nimport \\\"../interfaces/IERC4494.sol\\\";\\nimport \\\"../../../ERC712/implementations/UsingERC712.sol\\\";\\nimport \\\"../../../ERC712/implementations/ImplementingExternalDomainSeparator.sol\\\";\\nimport \\\"../../../ERC721/interfaces/IERC721.sol\\\";\\n\\nimport \\\"../../..//openzeppelin/contracts/utils/cryptography/SignatureChecker.sol\\\";\\nimport \\\"../../../openzeppelin/contracts/utils/Address.sol\\\";\\n\\nabstract contract UsingERC4494Permit is\\n\\tIERC4494,\\n\\tIERC4494PermitForAll,\\n\\tIERC4494Alternative,\\n\\tImplementingERC721Internal,\\n\\tUsingERC165Internal,\\n\\tImplementingExternalDomainSeparator,\\n\\tUsingERC712\\n{\\n\\tbytes32 public constant PERMIT_TYPEHASH =\\n\\t\\tkeccak256(\\\"Permit(address spender,uint256 tokenId,uint256 nonce,uint256 deadline)\\\");\\n\\tbytes32 public constant PERMIT_FOR_ALL_TYPEHASH =\\n\\t\\tkeccak256(\\\"PermitForAll(address owner,address spender,uint256 nonce,uint256 deadline)\\\");\\n\\n\\tmapping(address => uint256) internal _userNonces;\\n\\n\\t/// @inheritdoc IERC4494PermitForAll\\n\\tfunction nonces(address account) external view virtual returns (uint256 nonce) {\\n\\t\\treturn _userNonces[account];\\n\\t}\\n\\n\\t/// @inheritdoc IERC4494\\n\\tfunction nonces(uint256 id) public view virtual returns (uint256 nonce) {\\n\\t\\t(address owner, uint256 currentNonce) = _ownerAndNonceOf(id);\\n\\t\\tif (owner == address(0)) {\\n\\t\\t\\trevert IERC721.NonExistentToken(id);\\n\\t\\t}\\n\\t\\treturn currentNonce;\\n\\t}\\n\\n\\t/// @inheritdoc IERC4494Alternative\\n\\tfunction tokenNonces(uint256 tokenId) external view returns (uint256 nonce) {\\n\\t\\treturn nonces(tokenId);\\n\\t}\\n\\n\\t/// @inheritdoc IERC4494\\n\\tfunction permit(\\n\\t\\taddress spender,\\n\\t\\tuint256 tokenId,\\n\\t\\tuint256 deadline,\\n\\t\\tbytes memory sig\\n\\t) external override(IERC4494, IERC4494Alternative) {\\n\\t\\tif (block.timestamp > deadline) {\\n\\t\\t\\trevert DeadlineOver(block.timestamp, deadline);\\n\\t\\t}\\n\\n\\t\\t(address owner, uint256 nonce) = _ownerAndNonceOf(tokenId);\\n\\t\\tif (owner == address(0)) {\\n\\t\\t\\trevert IERC721.NonExistentToken(tokenId);\\n\\t\\t}\\n\\n\\t\\t_requireValidPermit(owner, spender, tokenId, deadline, nonce, sig);\\n\\n\\t\\t_approveFor(owner, nonce, spender, tokenId);\\n\\t}\\n\\n\\t/// @inheritdoc IERC4494PermitForAll\\n\\tfunction permitForAll(\\n\\t\\taddress owner,\\n\\t\\taddress spender,\\n\\t\\tuint256 deadline,\\n\\t\\tbytes memory sig\\n\\t) external {\\n\\t\\tif (block.timestamp > deadline) {\\n\\t\\t\\trevert DeadlineOver(block.timestamp, deadline);\\n\\t\\t}\\n\\n\\t\\t_requireValidPermitForAll(owner, spender, deadline, _userNonces[owner]++, sig);\\n\\n\\t\\t_setApprovalForAll(owner, spender, true);\\n\\t}\\n\\n\\t/// @inheritdoc IERC165\\n\\tfunction supportsInterface(bytes4 id) public view virtual override(IERC165, UsingERC165Internal) returns (bool) {\\n\\t\\treturn\\n\\t\\t\\tsuper.supportsInterface(id) ||\\n\\t\\t\\tid == type(IERC4494).interfaceId ||\\n\\t\\t\\tid == type(IERC4494Alternative).interfaceId;\\n\\t}\\n\\n\\t/// @inheritdoc ImplementingExternalDomainSeparator\\n\\tfunction DOMAIN_SEPARATOR()\\n\\t\\tpublic\\n\\t\\tview\\n\\t\\tvirtual\\n\\t\\toverride(IERC4494, IERC4494PermitForAll, IERC4494Alternative, ImplementingExternalDomainSeparator)\\n\\t\\treturns (bytes32);\\n\\n\\t// ------------------------------------------------------------------------------------------------------------------\\n\\t// INTERNALS\\n\\t// ------------------------------------------------------------------------------------------------------------------\\n\\n\\tfunction _requireValidPermit(\\n\\t\\taddress signer,\\n\\t\\taddress spender,\\n\\t\\tuint256 id,\\n\\t\\tuint256 deadline,\\n\\t\\tuint256 nonce,\\n\\t\\tbytes memory sig\\n\\t) internal view {\\n\\t\\tbytes32 digest = keccak256(\\n\\t\\t\\tabi.encodePacked(\\n\\t\\t\\t\\t\\\"\\\\x19\\\\x01\\\",\\n\\t\\t\\t\\tDOMAIN_SEPARATOR(),\\n\\t\\t\\t\\tkeccak256(abi.encode(PERMIT_TYPEHASH, spender, id, nonce, deadline))\\n\\t\\t\\t)\\n\\t\\t);\\n\\t\\tif (!Openzeppelin_SignatureChecker.isValidSignatureNow(signer, digest, sig)) {\\n\\t\\t\\trevert InvalidSignature();\\n\\t\\t}\\n\\t}\\n\\n\\tfunction _requireValidPermitForAll(\\n\\t\\taddress owner,\\n\\t\\taddress spender,\\n\\t\\tuint256 deadline,\\n\\t\\tuint256 nonce,\\n\\t\\tbytes memory sig\\n\\t) internal view {\\n\\t\\tbytes32 digest = keccak256(\\n\\t\\t\\tabi.encodePacked(\\n\\t\\t\\t\\t\\\"\\\\x19\\\\x01\\\",\\n\\t\\t\\t\\tDOMAIN_SEPARATOR(),\\n\\t\\t\\t\\tkeccak256(abi.encode(PERMIT_FOR_ALL_TYPEHASH, owner, spender, nonce, deadline))\\n\\t\\t\\t)\\n\\t\\t);\\n\\t\\tif (!Openzeppelin_SignatureChecker.isValidSignatureNow(owner, digest, sig)) {\\n\\t\\t\\trevert InvalidSignature();\\n\\t\\t}\\n\\t}\\n}\\n\",\"keccak256\":\"0x7afd9c8853b7b108fe3ca0c1d442ed3156a98be31bcf79c1ef731a83c0e85c6d\",\"license\":\"MIT\"},\"solidity-kit/solc_0.8/ERC721/ERC4494/implementations/UsingERC4494PermitWithDynamicChainId.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"./UsingERC4494Permit.sol\\\";\\nimport \\\"../../../ERC712/implementations/UsingERC712WithDynamicChainId.sol\\\";\\n\\nabstract contract UsingERC4494PermitWithDynamicChainId is UsingERC4494Permit, UsingERC712WithDynamicChainId {\\n\\t/// @inheritdoc ImplementingExternalDomainSeparator\\n\\tfunction DOMAIN_SEPARATOR() public view virtual override returns (bytes32) {\\n\\t\\treturn _currentDomainSeparator();\\n\\t}\\n}\\n\",\"keccak256\":\"0x109f5407a20fd97ab84d5b35904eb0805dc596e0f229297e4d7652621162b355\",\"license\":\"MIT\"},\"solidity-kit/solc_0.8/ERC721/ERC4494/interfaces/IERC4494.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../../ERC165/interfaces/IERC165.sol\\\";\\n\\ninterface IERC4494 is IERC165 {\\n\\terror DeadlineOver(uint256 currentTime, uint256 deadline);\\n\\terror InvalidSignature();\\n\\n\\t/// @notice EIP-712 Domain separator hash\\n\\tfunction DOMAIN_SEPARATOR() external view returns (bytes32);\\n\\n\\t/// @notice Allows to retrieve current nonce for token\\n\\t/// @param tokenId token id\\n\\t/// @return nonce token nonce\\n\\tfunction nonces(uint256 tokenId) external view returns (uint256 nonce);\\n\\n\\t/// @notice function to be called by anyone to approve `spender` using a Permit signature\\n\\t/// @dev Anyone can call this to approve `spender`, even a third-party\\n\\t/// @param spender the actor to approve\\n\\t/// @param tokenId the token id\\n\\t/// @param deadline the deadline for the permit to be used\\n\\t/// @param signature permit\\n\\tfunction permit(\\n\\t\\taddress spender,\\n\\t\\tuint256 tokenId,\\n\\t\\tuint256 deadline,\\n\\t\\tbytes memory signature\\n\\t) external;\\n}\\n\\ninterface IERC4494PermitForAll {\\n\\t/// @notice EIP-712 Domain separator hash\\n\\tfunction DOMAIN_SEPARATOR() external view returns (bytes32);\\n\\n\\t/// @notice Allows to retrieve current nonce for the account\\n\\t/// @param account account to query\\n\\t/// @return nonce account's nonce\\n\\tfunction nonces(address account) external view returns (uint256 nonce);\\n\\n\\t/// @notice function to be called by anyone to approve `spender` using a Permit signature\\n\\t/// @dev Anyone can call this to approve `spender`, even a third-party\\n\\t/// @param signer the one giving permission\\n\\t/// @param spender the actor to approve\\n\\t/// @param deadline the deadline for the permit to be used\\n\\t/// @param signature permit\\n\\tfunction permitForAll(\\n\\t\\taddress signer,\\n\\t\\taddress spender,\\n\\t\\tuint256 deadline,\\n\\t\\tbytes memory signature\\n\\t) external;\\n}\\n\\ninterface IERC4494Alternative is IERC165 {\\n\\t/// @notice EIP-712 Domain separator hash\\n\\tfunction DOMAIN_SEPARATOR() external view returns (bytes32);\\n\\n\\t/// @notice Allows to retrieve current nonce for token\\n\\t/// @param tokenId token id\\n\\t/// @return nonce token nonce\\n\\tfunction tokenNonces(uint256 tokenId) external view returns (uint256 nonce);\\n\\n\\t/// @notice function to be called by anyone to approve `spender` using a Permit signature\\n\\t/// @dev Anyone can call this to approve `spender`, even a third-party\\n\\t/// @param spender the actor to approve\\n\\t/// @param tokenId the token id\\n\\t/// @param deadline the deadline for the permit to be used\\n\\t/// @param signature permit\\n\\tfunction permit(\\n\\t\\taddress spender,\\n\\t\\tuint256 tokenId,\\n\\t\\tuint256 deadline,\\n\\t\\tbytes memory signature\\n\\t) external;\\n}\\n\",\"keccak256\":\"0xf8cf6e3aa49b909c85e1bb10f3acdfb911337197137dad676a673670fe28379e\",\"license\":\"MIT\"},\"solidity-kit/solc_0.8/ERC721/implementations/BasicERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"../interfaces/IERC721Receiver.sol\\\";\\nimport \\\"../interfaces/IERC721.sol\\\";\\nimport \\\"../interfaces/IERC721WithBlocknumber.sol\\\";\\nimport \\\"./ImplementingERC721Internal.sol\\\";\\n\\nimport \\\"../../openzeppelin/contracts/utils/Address.sol\\\";\\n\\nabstract contract BasicERC721 is IERC721, IERC721WithBlocknumber, ImplementingERC721Internal {\\n\\tusing Openzeppelin_Address for address;\\n\\n\\tbytes4 internal constant ERC721_RECEIVED = 0x150b7a02;\\n\\n\\tuint256 internal constant OPERATOR_FLAG = 0x8000000000000000000000000000000000000000000000000000000000000000;\\n\\n\\tmapping(uint256 => uint256) internal _owners;\\n\\tmapping(address => uint256) internal _balances;\\n\\tmapping(address => mapping(address => bool)) internal _operatorsForAll;\\n\\tmapping(uint256 => address) internal _operators;\\n\\n\\t/// @inheritdoc IERC721\\n\\tfunction approve(address operator, uint256 tokenId) external override {\\n\\t\\t(address owner, uint256 nonce) = _ownerAndNonceOf(tokenId);\\n\\t\\tif (owner == address(0)) {\\n\\t\\t\\trevert NonExistentToken(tokenId);\\n\\t\\t}\\n\\t\\tif (msg.sender != owner && !isApprovedForAll(owner, msg.sender)) {\\n\\t\\t\\trevert NotAuthorized();\\n\\t\\t}\\n\\t\\t_approveFor(owner, nonce, operator, tokenId);\\n\\t}\\n\\n\\t/// @inheritdoc IERC721\\n\\tfunction transferFrom(\\n\\t\\taddress from,\\n\\t\\taddress to,\\n\\t\\tuint256 tokenId\\n\\t) external override {\\n\\t\\t(address owner, uint256 nonce, bool operatorEnabled) = _ownerNonceAndOperatorEnabledOf(tokenId);\\n\\t\\tif (owner == address(0)) {\\n\\t\\t\\trevert NonExistentToken(tokenId);\\n\\t\\t}\\n\\t\\tif (from != owner) {\\n\\t\\t\\trevert NotOwner(from, owner);\\n\\t\\t}\\n\\t\\tif (to == address(0) || to == address(this)) {\\n\\t\\t\\trevert InvalidAddress(to);\\n\\t\\t}\\n\\t\\tif (msg.sender != from) {\\n\\t\\t\\tif (!(operatorEnabled && _operators[tokenId] == msg.sender) && !isApprovedForAll(from, msg.sender)) {\\n\\t\\t\\t\\trevert NotAuthorized();\\n\\t\\t\\t}\\n\\t\\t}\\n\\t\\t_transferFrom(from, to, tokenId, (nonce >> 24) != 0);\\n\\t}\\n\\n\\t/// @inheritdoc IERC721\\n\\tfunction safeTransferFrom(\\n\\t\\taddress from,\\n\\t\\taddress to,\\n\\t\\tuint256 tokenId\\n\\t) external override {\\n\\t\\tsafeTransferFrom(from, to, tokenId, \\\"\\\");\\n\\t}\\n\\n\\t/// @inheritdoc IERC721\\n\\tfunction setApprovalForAll(address operator, bool approved) external override {\\n\\t\\t_setApprovalForAll(msg.sender, operator, approved);\\n\\t}\\n\\n\\t/// @inheritdoc IERC721\\n\\tfunction balanceOf(address owner) public view virtual override returns (uint256 balance) {\\n\\t\\tif (owner == address(0)) {\\n\\t\\t\\trevert InvalidAddress(owner);\\n\\t\\t}\\n\\t\\tbalance = _balances[owner];\\n\\t}\\n\\n\\t/// @inheritdoc IERC721\\n\\tfunction ownerOf(uint256 tokenId) external view override returns (address owner) {\\n\\t\\towner = _ownerOf(tokenId);\\n\\t\\tif (owner == address(0)) {\\n\\t\\t\\trevert NonExistentToken(tokenId);\\n\\t\\t}\\n\\t}\\n\\n\\t/// @inheritdoc IERC721\\n\\tfunction getApproved(uint256 tokenId) external view override returns (address operator) {\\n\\t\\t(address owner, bool operatorEnabled) = _ownerAndOperatorEnabledOf(tokenId);\\n\\t\\tif (owner == address(0)) {\\n\\t\\t\\trevert NonExistentToken(tokenId);\\n\\t\\t}\\n\\t\\tif (operatorEnabled) {\\n\\t\\t\\treturn _operators[tokenId];\\n\\t\\t} else {\\n\\t\\t\\treturn address(0);\\n\\t\\t}\\n\\t}\\n\\n\\t/// @inheritdoc IERC721\\n\\tfunction isApprovedForAll(address owner, address operator) public view virtual override returns (bool isOperator) {\\n\\t\\treturn _operatorsForAll[owner][operator];\\n\\t}\\n\\n\\t/// @inheritdoc IERC721\\n\\tfunction safeTransferFrom(\\n\\t\\taddress from,\\n\\t\\taddress to,\\n\\t\\tuint256 tokenId,\\n\\t\\tbytes memory data\\n\\t) public override {\\n\\t\\t(address owner, uint256 nonce, bool operatorEnabled) = _ownerNonceAndOperatorEnabledOf(tokenId);\\n\\t\\tif (owner == address(0)) {\\n\\t\\t\\trevert NonExistentToken(tokenId);\\n\\t\\t}\\n\\t\\tif (owner != from) {\\n\\t\\t\\trevert NotOwner(from, owner);\\n\\t\\t}\\n\\n\\t\\tif (to == address(0) || to == address(this)) {\\n\\t\\t\\trevert InvalidAddress(to);\\n\\t\\t}\\n\\n\\t\\tif (msg.sender != from) {\\n\\t\\t\\tif (!(operatorEnabled && _operators[tokenId] == msg.sender) && !isApprovedForAll(from, msg.sender)) {\\n\\t\\t\\t\\trevert NotAuthorized();\\n\\t\\t\\t}\\n\\t\\t}\\n\\t\\t_safeTransferFrom(from, to, tokenId, (nonce >> 24) != 0, data);\\n\\t}\\n\\n\\t/// @inheritdoc IERC165\\n\\tfunction supportsInterface(bytes4 id) public view virtual override returns (bool) {\\n\\t\\t/// 0x01ffc9a7 is ERC165.\\n\\t\\t/// 0x80ac58cd is ERC721\\n\\t\\t/// 0x5b5e139f is for ERC721 metadata\\n\\t\\treturn id == 0x01ffc9a7 || id == 0x80ac58cd || id == 0x5b5e139f;\\n\\t}\\n\\n\\t/// @inheritdoc IERC721WithBlocknumber\\n\\tfunction ownerAndLastTransferBlockNumberOf(uint256 id)\\n\\t\\texternal\\n\\t\\tview\\n\\t\\toverride\\n\\t\\treturns (address owner, uint256 blockNumber)\\n\\t{\\n\\t\\t(address currentOwner, uint256 nonce) = _ownerAndNonceOf(id);\\n\\t\\towner = currentOwner;\\n\\t\\tblockNumber = (nonce >> 24);\\n\\t}\\n\\n\\t/// @inheritdoc IERC721WithBlocknumber\\n\\tfunction ownerAndLastTransferBlockNumberList(uint256[] calldata ids)\\n\\t\\texternal\\n\\t\\tview\\n\\t\\tvirtual\\n\\t\\treturns (OwnerData[] memory ownersData)\\n\\t{\\n\\t\\townersData = new OwnerData[](ids.length);\\n\\t\\tfor (uint256 i = 0; i < ids.length; i++) {\\n\\t\\t\\tuint256 data = _owners[ids[i]];\\n\\t\\t\\townersData[i].owner = address(uint160(data));\\n\\t\\t\\townersData[i].lastTransferBlockNumber = (data >> 184) & 0xFFFFFFFFFFFFFFFF;\\n\\t\\t}\\n\\t}\\n\\n\\t// ------------------------------------------------------------------------------------------------------------------\\n\\t// INTERNALS\\n\\t// ------------------------------------------------------------------------------------------------------------------\\n\\n\\tfunction _safeMint(address to, uint256 id) internal {\\n\\t\\t_safeTransferFrom(address(0), to, id, false, \\\"\\\");\\n\\t}\\n\\n\\tfunction _safeTransferFrom(\\n\\t\\taddress from,\\n\\t\\taddress to,\\n\\t\\tuint256 id,\\n\\t\\tbool registered,\\n\\t\\tbytes memory data\\n\\t) internal {\\n\\t\\t_transferFrom(from, to, id, registered);\\n\\t\\tif (to.isContract()) {\\n\\t\\t\\tif (!_checkOnERC721Received(msg.sender, from, to, id, data)) {\\n\\t\\t\\t\\trevert TransferRejected();\\n\\t\\t\\t}\\n\\t\\t}\\n\\t}\\n\\n\\tfunction _transferFrom(\\n\\t\\taddress from,\\n\\t\\taddress to,\\n\\t\\tuint256 id,\\n\\t\\tbool registered\\n\\t) internal virtual {\\n\\t\\tunchecked {\\n\\t\\t\\t_balances[to]++;\\n\\t\\t\\tif (registered) {\\n\\t\\t\\t\\t_balances[from]--;\\n\\t\\t\\t}\\n\\t\\t}\\n\\n\\t\\t// We encode the blockNumber in the token nonce. We can then use it for count voting.\\n\\t\\t_owners[id] = (block.number << 184) | uint256(uint160(to));\\n\\t\\temit Transfer(from, to, id);\\n\\t}\\n\\n\\t/// @dev See approve.\\n\\tfunction _approveFor(\\n\\t\\taddress owner,\\n\\t\\tuint256 nonce,\\n\\t\\taddress operator,\\n\\t\\tuint256 id\\n\\t) internal override {\\n\\t\\tuint256 blockNumber = nonce >> 24;\\n\\t\\tuint256 newNonce = nonce + 1;\\n\\t\\tif (newNonce >> 24 != blockNumber) {\\n\\t\\t\\trevert NonceOverflow();\\n\\t\\t}\\n\\t\\tif (operator == address(0)) {\\n\\t\\t\\t_owners[id] = (newNonce << 160) | uint256(uint160(owner));\\n\\t\\t} else {\\n\\t\\t\\t_owners[id] = OPERATOR_FLAG | ((newNonce << 160) | uint256(uint160(owner)));\\n\\t\\t\\t_operators[id] = operator;\\n\\t\\t}\\n\\t\\temit Approval(owner, operator, id);\\n\\t}\\n\\n\\t/// @dev See setApprovalForAll.\\n\\tfunction _setApprovalForAll(\\n\\t\\taddress sender,\\n\\t\\taddress operator,\\n\\t\\tbool approved\\n\\t) internal override {\\n\\t\\t_operatorsForAll[sender][operator] = approved;\\n\\n\\t\\temit ApprovalForAll(sender, operator, approved);\\n\\t}\\n\\n\\t/// @dev Check if receiving contract accepts erc721 transfers.\\n\\t/// @param operator The address of the operator.\\n\\t/// @param from The from address, may be different from msg.sender.\\n\\t/// @param to The adddress we want to transfer to.\\n\\t/// @param id The id of the token we would like to transfer.\\n\\t/// @param data Any additional data to send with the transfer.\\n\\t/// @return Whether the expected value of 0x150b7a02 is returned.\\n\\tfunction _checkOnERC721Received(\\n\\t\\taddress operator,\\n\\t\\taddress from,\\n\\t\\taddress to,\\n\\t\\tuint256 id,\\n\\t\\tbytes memory data\\n\\t) internal returns (bool) {\\n\\t\\tbytes4 retval = IERC721Receiver(to).onERC721Received(operator, from, id, data);\\n\\t\\treturn (retval == ERC721_RECEIVED);\\n\\t}\\n\\n\\t/// @dev See ownerOf\\n\\tfunction _ownerOf(uint256 id) internal view virtual returns (address owner) {\\n\\t\\treturn address(uint160(_owners[id]));\\n\\t}\\n\\n\\t/// @dev Get the owner and operatorEnabled status of a token.\\n\\t/// @param id The token to query.\\n\\t/// @return owner The owner of the token.\\n\\t/// @return operatorEnabled Whether or not operators are enabled for this token.\\n\\tfunction _ownerAndOperatorEnabledOf(uint256 id)\\n\\t\\tinternal\\n\\t\\tview\\n\\t\\tvirtual\\n\\t\\treturns (address owner, bool operatorEnabled)\\n\\t{\\n\\t\\tuint256 data = _owners[id];\\n\\t\\towner = address(uint160(data));\\n\\t\\toperatorEnabled = (data & OPERATOR_FLAG) == OPERATOR_FLAG;\\n\\t}\\n\\n\\t/// @dev Get the owner and the permit nonce of a token.\\n\\t/// @param id The token to query.\\n\\t/// @return owner The owner of the token.\\n\\t/// @return nonce the nonce for permit (also incluse the blocknumer in the 64 higer bits (88 bits in total))\\n\\tfunction _ownerAndNonceOf(uint256 id) internal view virtual override returns (address owner, uint256 nonce) {\\n\\t\\tuint256 data = _owners[id];\\n\\t\\towner = address(uint160(data));\\n\\t\\tnonce = (data >> 160) & 0xFFFFFFFFFFFFFFFFFFFFFF;\\n\\t}\\n\\n\\t// @dev Get the owner, the permit nonce of a token and operatorEnabled status of a token.\\n\\t/// @param id The token to query.\\n\\t/// @return owner The owner of the token.\\n\\t/// @return nonce the nonce for permit (also incluse the blocknumer in the 64 higer bits (88 bits in total))\\n\\t/// @return operatorEnabled Whether or not operators are enabled for this token.\\n\\tfunction _ownerNonceAndOperatorEnabledOf(uint256 id)\\n\\t\\tinternal\\n\\t\\tview\\n\\t\\tvirtual\\n\\t\\treturns (\\n\\t\\t\\taddress owner,\\n\\t\\t\\tuint256 nonce,\\n\\t\\t\\tbool operatorEnabled\\n\\t\\t)\\n\\t{\\n\\t\\tuint256 data = _owners[id];\\n\\t\\towner = address(uint160(data));\\n\\t\\toperatorEnabled = (data & OPERATOR_FLAG) == OPERATOR_FLAG;\\n\\t\\tnonce = (data >> 160) & 0xFFFFFFFFFFFFFFFFFFFFFF;\\n\\t}\\n}\\n\",\"keccak256\":\"0x5b08b758afbfb1e867954f37783a3964f903e664993a9e970c3d29f27dfba145\",\"license\":\"MIT\"},\"solidity-kit/solc_0.8/ERC721/implementations/ImplementingERC721Internal.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nabstract contract ImplementingERC721Internal {\\n\\tfunction _ownerAndNonceOf(uint256 id) internal view virtual returns (address owner, uint256 nonce);\\n\\n\\tfunction _approveFor(\\n\\t\\taddress owner,\\n\\t\\tuint256 nonce,\\n\\t\\taddress operator,\\n\\t\\tuint256 id\\n\\t) internal virtual;\\n\\n\\tfunction _setApprovalForAll(\\n\\t\\taddress sender,\\n\\t\\taddress operator,\\n\\t\\tbool approved\\n\\t) internal virtual;\\n}\\n\",\"keccak256\":\"0xc22bbcdff9234efc9787a2bc719b1e86050650b03b4d80cb6fea5a3f814c37f0\",\"license\":\"MIT\"},\"solidity-kit/solc_0.8/ERC721/interfaces/IERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../ERC165/interfaces/IERC165.sol\\\";\\n\\ninterface IERC721Supply {\\n\\tfunction totalSupply() external view returns (uint256);\\n}\\n\\ninterface IERC721 is IERC165 {\\n\\tevent Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\tevent Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\tevent ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n\\terror NonExistentToken(uint256 tokenID);\\n\\terror NotAuthorized();\\n\\terror NotOwner(address provided, address expected);\\n\\terror InvalidAddress(address invalid);\\n\\terror TransferRejected();\\n\\terror NonceOverflow();\\n\\n\\t/// @notice Get the number of tokens owned by an address.\\n\\t/// @param owner The address to look for.\\n\\t/// @return balance The number of tokens owned by the address.\\n\\tfunction balanceOf(address owner) external view returns (uint256 balance);\\n\\n\\t/// @notice Get the owner of a token.\\n\\t/// @param tokenId The id of the token.\\n\\t/// @return owner The address of the token owner.\\n\\tfunction ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n\\t/// @notice Transfer a token between 2 addresses letting the receiver knows of the transfer.\\n\\t/// @param from The sender of the token.\\n\\t/// @param to The recipient of the token.\\n\\t/// @param tokenId The id of the token.\\n\\t/// @param data Additional data.\\n\\tfunction safeTransferFrom(\\n\\t\\taddress from,\\n\\t\\taddress to,\\n\\t\\tuint256 tokenId,\\n\\t\\tbytes calldata data\\n\\t) external;\\n\\n\\t/// @notice Transfer a token between 2 addresses letting the receiver know of the transfer.\\n\\t/// @param from The send of the token.\\n\\t/// @param to The recipient of the token.\\n\\t/// @param tokenId The id of the token.\\n\\tfunction safeTransferFrom(\\n\\t\\taddress from,\\n\\t\\taddress to,\\n\\t\\tuint256 tokenId\\n\\t) external;\\n\\n\\t/// @notice Transfer a token between 2 addresses.\\n\\t/// @param from The sender of the token.\\n\\t/// @param to The recipient of the token.\\n\\t/// @param tokenId The id of the token.\\n\\tfunction transferFrom(\\n\\t\\taddress from,\\n\\t\\taddress to,\\n\\t\\tuint256 tokenId\\n\\t) external;\\n\\n\\t/// @notice Approve an operator to transfer a specific token on the senders behalf.\\n\\t/// @param operator The address receiving the approval.\\n\\t/// @param tokenId The id of the token.\\n\\tfunction approve(address operator, uint256 tokenId) external;\\n\\n\\t/// @notice Set the approval for an operator to manage all the tokens of the sender.\\n\\t/// @param operator The address receiving the approval.\\n\\t/// @param approved The determination of the approval.\\n\\tfunction setApprovalForAll(address operator, bool approved) external;\\n\\n\\t/// @notice Get the approved operator for a specific token.\\n\\t/// @param tokenId The id of the token.\\n\\t/// @return operator The address of the operator.\\n\\tfunction getApproved(uint256 tokenId) external view returns (address operator);\\n\\n\\t/// @notice Check if the sender approved the operator.\\n\\t/// @param owner The address of the owner.\\n\\t/// @param operator The address of the operator.\\n\\t/// @return isOperator The status of the approval.\\n\\tfunction isApprovedForAll(address owner, address operator) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x8e9d69a9679226264abe98e55c14ad469f6071bcdef32824dc5d1573069b109b\",\"license\":\"MIT\"},\"solidity-kit/solc_0.8/ERC721/interfaces/IERC721Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC721.sol\\\";\\n\\ninterface IERC721Metadata is IERC721 {\\n\\t/// @notice A descriptive name for a collection of NFTs in this contract\\n\\tfunction name() external view returns (string memory name);\\n\\n\\t/// @notice An abbreviated name for NFTs in this contract\\n\\tfunction symbol() external view returns (string memory symbol);\\n\\n\\t/// @notice A distinct Uniform Resource Identifier (URI) for a given asset.\\n\\t/// @dev Throws if `_tokenId` is not a valid NFT. URIs are defined in RFC\\n\\t///  3986. The URI may point to a JSON file that conforms to the \\\"ERC721\\n\\t///  Metadata JSON Schema\\\".\\n\\tfunction tokenURI(uint256 tokenId) external view returns (string memory);\\n}\\n\",\"keccak256\":\"0xb7f9316fbed4a15a235deeea9067bda8160c1a75f9bf8e6acf206fbeb2402ac1\",\"license\":\"MIT\"},\"solidity-kit/solc_0.8/ERC721/interfaces/IERC721Receiver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface IERC721Receiver {\\n\\t/// @notice Handle the receipt of an NFT\\n\\t/// @dev The ERC721 smart contract calls this function on the recipient\\n\\t///  after a `transfer`. This function MAY throw to revert and reject the\\n\\t///  transfer. Return of other than the magic value MUST result in the\\n\\t///  transaction being reverted.\\n\\t///  Note: the contract address is always the message sender.\\n\\t/// @param operator The address which called `safeTransferFrom` function\\n\\t/// @param from The address which previously owned the token\\n\\t/// @param tokenId The NFT identifier which is being transferred\\n\\t/// @param data Additional data with no specified format\\n\\t/// @return `bytes4(keccak256(\\\"onERC721Received(address,address,uint256,bytes)\\\"))`\\n\\t///  unless throwing\\n\\tfunction onERC721Received(\\n\\t\\taddress operator,\\n\\t\\taddress from,\\n\\t\\tuint256 tokenId,\\n\\t\\tbytes calldata data\\n\\t) external returns (bytes4);\\n}\\n\",\"keccak256\":\"0xf067bdfe3a5ffaef7a4e3d70b6aa9b8839f4f4413059732eabaf312be57386a8\",\"license\":\"MIT\"},\"solidity-kit/solc_0.8/ERC721/interfaces/IERC721WithBlocknumber.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface IERC721WithBlocknumber {\\n\\t/// @notice Get the owner of a token and the blockNumber of the last transfer, useful to voting mechanism.\\n\\t/// @param id The id of the token.\\n\\t/// @return owner The address of the token owner.\\n\\t/// @return blockNumber The blocknumber at which the last transfer of that id happened.\\n\\tfunction ownerAndLastTransferBlockNumberOf(uint256 id) external view returns (address owner, uint256 blockNumber);\\n\\n\\tstruct OwnerData {\\n\\t\\taddress owner;\\n\\t\\tuint256 lastTransferBlockNumber;\\n\\t}\\n\\n\\t/// @notice Get the list of owner of a token and the blockNumber of its last transfer, useful to voting mechanism.\\n\\t/// @param ids The list of token ids to check.\\n\\t/// @return ownersData The list of (owner, lastTransferBlockNumber) for each ids given as input.\\n\\tfunction ownerAndLastTransferBlockNumberList(uint256[] calldata ids)\\n\\t\\texternal\\n\\t\\tview\\n\\t\\treturns (OwnerData[] memory ownersData);\\n}\\n\",\"keccak256\":\"0x2e6b58e553767834183dd13d544800a9823ab03c79dbd0493485ca599d37e92a\",\"license\":\"MIT\"},\"solidity-kit/solc_0.8/openzeppelin/contracts/interfaces/IERC1271.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (interfaces/IERC1271.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC1271 standard signature validation method for\\n * contracts as defined in https://eips.ethereum.org/EIPS/eip-1271[ERC-1271].\\n *\\n * _Available since v4.1._\\n */\\ninterface Openzeppelin_IERC1271 {\\n\\t/**\\n\\t * @dev Should return whether the signature provided is valid for the provided data\\n\\t * @param hash      Hash of the data to be signed\\n\\t * @param signature Signature byte array associated with _data\\n\\t */\\n\\tfunction isValidSignature(bytes32 hash, bytes memory signature) external view returns (bytes4 magicValue);\\n}\\n\",\"keccak256\":\"0x173c37fa761fec032d32882157af393d4f299e155f83ca2c1e4473bba7944e60\",\"license\":\"MIT\"},\"solidity-kit/solc_0.8/openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Openzeppelin_Address {\\n\\t/**\\n\\t * @dev Returns true if `account` is a contract.\\n\\t *\\n\\t * [IMPORTANT]\\n\\t * ====\\n\\t * It is unsafe to assume that an address for which this function returns\\n\\t * false is an externally-owned account (EOA) and not a contract.\\n\\t *\\n\\t * Among others, `isContract` will return false for the following\\n\\t * types of addresses:\\n\\t *\\n\\t *  - an externally-owned account\\n\\t *  - a contract in construction\\n\\t *  - an address where a contract will be created\\n\\t *  - an address where a contract lived, but was destroyed\\n\\t * ====\\n\\t *\\n\\t * [IMPORTANT]\\n\\t * ====\\n\\t * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n\\t *\\n\\t * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n\\t * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n\\t * constructor.\\n\\t * ====\\n\\t */\\n\\tfunction isContract(address account) internal view returns (bool) {\\n\\t\\t// This method relies on extcodesize/address.code.length, which returns 0\\n\\t\\t// for contracts in construction, since the code is only stored at the end\\n\\t\\t// of the constructor execution.\\n\\n\\t\\treturn account.code.length > 0;\\n\\t}\\n\\n\\t/**\\n\\t * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n\\t * `recipient`, forwarding all available gas and reverting on errors.\\n\\t *\\n\\t * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n\\t * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n\\t * imposed by `transfer`, making them unable to receive funds via\\n\\t * `transfer`. {sendValue} removes this limitation.\\n\\t *\\n\\t * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n\\t *\\n\\t * IMPORTANT: because control is transferred to `recipient`, care must be\\n\\t * taken to not create reentrancy vulnerabilities. Consider using\\n\\t * {ReentrancyGuard} or the\\n\\t * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n\\t */\\n\\tfunction sendValue(address payable recipient, uint256 amount) internal {\\n\\t\\trequire(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n\\t\\t(bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n\\t\\trequire(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n\\t}\\n\\n\\t/**\\n\\t * @dev Performs a Solidity function call using a low level `call`. A\\n\\t * plain `call` is an unsafe replacement for a function call: use this\\n\\t * function instead.\\n\\t *\\n\\t * If `target` reverts with a revert reason, it is bubbled up by this\\n\\t * function (like regular Solidity function calls).\\n\\t *\\n\\t * Returns the raw returned data. To convert to the expected return value,\\n\\t * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n\\t *\\n\\t * Requirements:\\n\\t *\\n\\t * - `target` must be a contract.\\n\\t * - calling `target` with `data` must not revert.\\n\\t *\\n\\t * _Available since v3.1._\\n\\t */\\n\\tfunction functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n\\t\\treturn functionCall(target, data, \\\"Address: low-level call failed\\\");\\n\\t}\\n\\n\\t/**\\n\\t * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n\\t * `errorMessage` as a fallback revert reason when `target` reverts.\\n\\t *\\n\\t * _Available since v3.1._\\n\\t */\\n\\tfunction functionCall(\\n\\t\\taddress target,\\n\\t\\tbytes memory data,\\n\\t\\tstring memory errorMessage\\n\\t) internal returns (bytes memory) {\\n\\t\\treturn functionCallWithValue(target, data, 0, errorMessage);\\n\\t}\\n\\n\\t/**\\n\\t * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n\\t * but also transferring `value` wei to `target`.\\n\\t *\\n\\t * Requirements:\\n\\t *\\n\\t * - the calling contract must have an ETH balance of at least `value`.\\n\\t * - the called Solidity function must be `payable`.\\n\\t *\\n\\t * _Available since v3.1._\\n\\t */\\n\\tfunction functionCallWithValue(\\n\\t\\taddress target,\\n\\t\\tbytes memory data,\\n\\t\\tuint256 value\\n\\t) internal returns (bytes memory) {\\n\\t\\treturn functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n\\t}\\n\\n\\t/**\\n\\t * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n\\t * with `errorMessage` as a fallback revert reason when `target` reverts.\\n\\t *\\n\\t * _Available since v3.1._\\n\\t */\\n\\tfunction functionCallWithValue(\\n\\t\\taddress target,\\n\\t\\tbytes memory data,\\n\\t\\tuint256 value,\\n\\t\\tstring memory errorMessage\\n\\t) internal returns (bytes memory) {\\n\\t\\trequire(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n\\t\\trequire(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n\\t\\t(bool success, bytes memory returndata) = target.call{value: value}(data);\\n\\t\\treturn verifyCallResult(success, returndata, errorMessage);\\n\\t}\\n\\n\\t/**\\n\\t * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n\\t * but performing a static call.\\n\\t *\\n\\t * _Available since v3.3._\\n\\t */\\n\\tfunction functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n\\t\\treturn functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n\\t}\\n\\n\\t/**\\n\\t * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n\\t * but performing a static call.\\n\\t *\\n\\t * _Available since v3.3._\\n\\t */\\n\\tfunction functionStaticCall(\\n\\t\\taddress target,\\n\\t\\tbytes memory data,\\n\\t\\tstring memory errorMessage\\n\\t) internal view returns (bytes memory) {\\n\\t\\trequire(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n\\t\\t(bool success, bytes memory returndata) = target.staticcall(data);\\n\\t\\treturn verifyCallResult(success, returndata, errorMessage);\\n\\t}\\n\\n\\t/**\\n\\t * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n\\t * but performing a delegate call.\\n\\t *\\n\\t * _Available since v3.4._\\n\\t */\\n\\tfunction functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n\\t\\treturn functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n\\t}\\n\\n\\t/**\\n\\t * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n\\t * but performing a delegate call.\\n\\t *\\n\\t * _Available since v3.4._\\n\\t */\\n\\tfunction functionDelegateCall(\\n\\t\\taddress target,\\n\\t\\tbytes memory data,\\n\\t\\tstring memory errorMessage\\n\\t) internal returns (bytes memory) {\\n\\t\\trequire(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n\\t\\t(bool success, bytes memory returndata) = target.delegatecall(data);\\n\\t\\treturn verifyCallResult(success, returndata, errorMessage);\\n\\t}\\n\\n\\t/**\\n\\t * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n\\t * revert reason using the provided one.\\n\\t *\\n\\t * _Available since v4.3._\\n\\t */\\n\\tfunction verifyCallResult(\\n\\t\\tbool success,\\n\\t\\tbytes memory returndata,\\n\\t\\tstring memory errorMessage\\n\\t) internal pure returns (bytes memory) {\\n\\t\\tif (success) {\\n\\t\\t\\treturn returndata;\\n\\t\\t} else {\\n\\t\\t\\t// Look for revert reason and bubble it up if present\\n\\t\\t\\tif (returndata.length > 0) {\\n\\t\\t\\t\\t// The easiest way to bubble the revert reason is using memory via assembly\\n\\t\\t\\t\\t/// @solidity memory-safe-assembly\\n\\t\\t\\t\\tassembly {\\n\\t\\t\\t\\t\\tlet returndata_size := mload(returndata)\\n\\t\\t\\t\\t\\trevert(add(32, returndata), returndata_size)\\n\\t\\t\\t\\t}\\n\\t\\t\\t} else {\\n\\t\\t\\t\\trevert(errorMessage);\\n\\t\\t\\t}\\n\\t\\t}\\n\\t}\\n}\\n\",\"keccak256\":\"0xda14142ec34e7dde33eabb747152062eb9d9aad16036f6498340418f59c83c97\",\"license\":\"MIT\"},\"solidity-kit/solc_0.8/openzeppelin/contracts/utils/Strings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Openzeppelin_Strings {\\n\\tbytes16 private constant _HEX_SYMBOLS = \\\"0123456789abcdef\\\";\\n\\tuint8 private constant _ADDRESS_LENGTH = 20;\\n\\n\\t/**\\n\\t * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n\\t */\\n\\tfunction toString(uint256 value) internal pure returns (string memory) {\\n\\t\\t// Inspired by OraclizeAPI's implementation - MIT licence\\n\\t\\t// https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\\n\\n\\t\\tif (value == 0) {\\n\\t\\t\\treturn \\\"0\\\";\\n\\t\\t}\\n\\t\\tuint256 temp = value;\\n\\t\\tuint256 digits;\\n\\t\\twhile (temp != 0) {\\n\\t\\t\\tdigits++;\\n\\t\\t\\ttemp /= 10;\\n\\t\\t}\\n\\t\\tbytes memory buffer = new bytes(digits);\\n\\t\\twhile (value != 0) {\\n\\t\\t\\tdigits -= 1;\\n\\t\\t\\tbuffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\\n\\t\\t\\tvalue /= 10;\\n\\t\\t}\\n\\t\\treturn string(buffer);\\n\\t}\\n\\n\\t/**\\n\\t * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n\\t */\\n\\tfunction toHexString(uint256 value) internal pure returns (string memory) {\\n\\t\\tif (value == 0) {\\n\\t\\t\\treturn \\\"0x00\\\";\\n\\t\\t}\\n\\t\\tuint256 temp = value;\\n\\t\\tuint256 length = 0;\\n\\t\\twhile (temp != 0) {\\n\\t\\t\\tlength++;\\n\\t\\t\\ttemp >>= 8;\\n\\t\\t}\\n\\t\\treturn toHexString(value, length);\\n\\t}\\n\\n\\t/**\\n\\t * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n\\t */\\n\\tfunction toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n\\t\\tbytes memory buffer = new bytes(2 * length + 2);\\n\\t\\tbuffer[0] = \\\"0\\\";\\n\\t\\tbuffer[1] = \\\"x\\\";\\n\\t\\tfor (uint256 i = 2 * length + 1; i > 1; --i) {\\n\\t\\t\\tbuffer[i] = _HEX_SYMBOLS[value & 0xf];\\n\\t\\t\\tvalue >>= 4;\\n\\t\\t}\\n\\t\\trequire(value == 0, \\\"Strings: hex length insufficient\\\");\\n\\t\\treturn string(buffer);\\n\\t}\\n\\n\\t/**\\n\\t * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\\n\\t */\\n\\tfunction toHexString(address addr) internal pure returns (string memory) {\\n\\t\\treturn toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\\n\\t}\\n}\\n\",\"keccak256\":\"0xf6334586d40bd8b17abc5842da4221b89375004c84e299155cdcad2b93812d5e\",\"license\":\"MIT\"},\"solidity-kit/solc_0.8/openzeppelin/contracts/utils/cryptography/ECDSA.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.3) (utils/cryptography/ECDSA.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../Strings.sol\\\";\\n\\n/**\\n * @dev Elliptic Curve Digital Signature Algorithm (ECDSA) operations.\\n *\\n * These functions can be used to verify that a message was signed by the holder\\n * of the private keys of a given address.\\n */\\nlibrary Openzeppelin_ECDSA {\\n\\tenum RecoverError {\\n\\t\\tNoError,\\n\\t\\tInvalidSignature,\\n\\t\\tInvalidSignatureLength,\\n\\t\\tInvalidSignatureS,\\n\\t\\tInvalidSignatureV\\n\\t}\\n\\n\\tfunction _throwError(RecoverError error) private pure {\\n\\t\\tif (error == RecoverError.NoError) {\\n\\t\\t\\treturn; // no error: do nothing\\n\\t\\t} else if (error == RecoverError.InvalidSignature) {\\n\\t\\t\\trevert(\\\"ECDSA: invalid signature\\\");\\n\\t\\t} else if (error == RecoverError.InvalidSignatureLength) {\\n\\t\\t\\trevert(\\\"ECDSA: invalid signature length\\\");\\n\\t\\t} else if (error == RecoverError.InvalidSignatureS) {\\n\\t\\t\\trevert(\\\"ECDSA: invalid signature 's' value\\\");\\n\\t\\t} else if (error == RecoverError.InvalidSignatureV) {\\n\\t\\t\\trevert(\\\"ECDSA: invalid signature 'v' value\\\");\\n\\t\\t}\\n\\t}\\n\\n\\t/**\\n\\t * @dev Returns the address that signed a hashed message (`hash`) with\\n\\t * `signature` or error string. This address can then be used for verification purposes.\\n\\t *\\n\\t * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\\n\\t * this function rejects them by requiring the `s` value to be in the lower\\n\\t * half order, and the `v` value to be either 27 or 28.\\n\\t *\\n\\t * IMPORTANT: `hash` _must_ be the result of a hash operation for the\\n\\t * verification to be secure: it is possible to craft signatures that\\n\\t * recover to arbitrary addresses for non-hashed data. A safe way to ensure\\n\\t * this is by receiving a hash of the original message (which may otherwise\\n\\t * be too long), and then calling {toEthSignedMessageHash} on it.\\n\\t *\\n\\t * Documentation for signature generation:\\n\\t * - with https://web3js.readthedocs.io/en/v1.3.4/web3-eth-accounts.html#sign[Web3.js]\\n\\t * - with https://docs.ethers.io/v5/api/signer/#Signer-signMessage[ethers]\\n\\t *\\n\\t * _Available since v4.3._\\n\\t */\\n\\tfunction tryRecover(bytes32 hash, bytes memory signature) internal pure returns (address, RecoverError) {\\n\\t\\tif (signature.length == 65) {\\n\\t\\t\\tbytes32 r;\\n\\t\\t\\tbytes32 s;\\n\\t\\t\\tuint8 v;\\n\\t\\t\\t// ecrecover takes the signature parameters, and the only way to get them\\n\\t\\t\\t// currently is to use assembly.\\n\\t\\t\\t/// @solidity memory-safe-assembly\\n\\t\\t\\tassembly {\\n\\t\\t\\t\\tr := mload(add(signature, 0x20))\\n\\t\\t\\t\\ts := mload(add(signature, 0x40))\\n\\t\\t\\t\\tv := byte(0, mload(add(signature, 0x60)))\\n\\t\\t\\t}\\n\\t\\t\\treturn tryRecover(hash, v, r, s);\\n\\t\\t} else {\\n\\t\\t\\treturn (address(0), RecoverError.InvalidSignatureLength);\\n\\t\\t}\\n\\t}\\n\\n\\t/**\\n\\t * @dev Returns the address that signed a hashed message (`hash`) with\\n\\t * `signature`. This address can then be used for verification purposes.\\n\\t *\\n\\t * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\\n\\t * this function rejects them by requiring the `s` value to be in the lower\\n\\t * half order, and the `v` value to be either 27 or 28.\\n\\t *\\n\\t * IMPORTANT: `hash` _must_ be the result of a hash operation for the\\n\\t * verification to be secure: it is possible to craft signatures that\\n\\t * recover to arbitrary addresses for non-hashed data. A safe way to ensure\\n\\t * this is by receiving a hash of the original message (which may otherwise\\n\\t * be too long), and then calling {toEthSignedMessageHash} on it.\\n\\t */\\n\\tfunction recover(bytes32 hash, bytes memory signature) internal pure returns (address) {\\n\\t\\t(address recovered, RecoverError error) = tryRecover(hash, signature);\\n\\t\\t_throwError(error);\\n\\t\\treturn recovered;\\n\\t}\\n\\n\\t/**\\n\\t * @dev Overload of {ECDSA-tryRecover} that receives the `r` and `vs` short-signature fields separately.\\n\\t *\\n\\t * See https://eips.ethereum.org/EIPS/eip-2098[EIP-2098 short signatures]\\n\\t *\\n\\t * _Available since v4.3._\\n\\t */\\n\\tfunction tryRecover(\\n\\t\\tbytes32 hash,\\n\\t\\tbytes32 r,\\n\\t\\tbytes32 vs\\n\\t) internal pure returns (address, RecoverError) {\\n\\t\\tbytes32 s = vs & bytes32(0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff);\\n\\t\\tuint8 v = uint8((uint256(vs) >> 255) + 27);\\n\\t\\treturn tryRecover(hash, v, r, s);\\n\\t}\\n\\n\\t/**\\n\\t * @dev Overload of {ECDSA-recover} that receives the `r and `vs` short-signature fields separately.\\n\\t *\\n\\t * _Available since v4.2._\\n\\t */\\n\\tfunction recover(\\n\\t\\tbytes32 hash,\\n\\t\\tbytes32 r,\\n\\t\\tbytes32 vs\\n\\t) internal pure returns (address) {\\n\\t\\t(address recovered, RecoverError error) = tryRecover(hash, r, vs);\\n\\t\\t_throwError(error);\\n\\t\\treturn recovered;\\n\\t}\\n\\n\\t/**\\n\\t * @dev Overload of {ECDSA-tryRecover} that receives the `v`,\\n\\t * `r` and `s` signature fields separately.\\n\\t *\\n\\t * _Available since v4.3._\\n\\t */\\n\\tfunction tryRecover(\\n\\t\\tbytes32 hash,\\n\\t\\tuint8 v,\\n\\t\\tbytes32 r,\\n\\t\\tbytes32 s\\n\\t) internal pure returns (address, RecoverError) {\\n\\t\\t// EIP-2 still allows signature malleability for ecrecover(). Remove this possibility and make the signature\\n\\t\\t// unique. Appendix F in the Ethereum Yellow paper (https://ethereum.github.io/yellowpaper/paper.pdf), defines\\n\\t\\t// the valid range for s in (301): 0 < s < secp256k1n \\u00f7 2 + 1, and for v in (302): v \\u2208 {27, 28}. Most\\n\\t\\t// signatures from current libraries generate a unique signature with an s-value in the lower half order.\\n\\t\\t//\\n\\t\\t// If your library generates malleable signatures, such as s-values in the upper range, calculate a new s-value\\n\\t\\t// with 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEBAAEDCE6AF48A03BBFD25E8CD0364141 - s1 and flip v from 27 to 28 or\\n\\t\\t// vice versa. If your library also generates signatures with 0/1 for v instead 27/28, add 27 to v to accept\\n\\t\\t// these malleable signatures as well.\\n\\t\\tif (uint256(s) > 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5D576E7357A4501DDFE92F46681B20A0) {\\n\\t\\t\\treturn (address(0), RecoverError.InvalidSignatureS);\\n\\t\\t}\\n\\t\\tif (v != 27 && v != 28) {\\n\\t\\t\\treturn (address(0), RecoverError.InvalidSignatureV);\\n\\t\\t}\\n\\n\\t\\t// If the signature is valid (and not malleable), return the signer address\\n\\t\\taddress signer = ecrecover(hash, v, r, s);\\n\\t\\tif (signer == address(0)) {\\n\\t\\t\\treturn (address(0), RecoverError.InvalidSignature);\\n\\t\\t}\\n\\n\\t\\treturn (signer, RecoverError.NoError);\\n\\t}\\n\\n\\t/**\\n\\t * @dev Overload of {ECDSA-recover} that receives the `v`,\\n\\t * `r` and `s` signature fields separately.\\n\\t */\\n\\tfunction recover(\\n\\t\\tbytes32 hash,\\n\\t\\tuint8 v,\\n\\t\\tbytes32 r,\\n\\t\\tbytes32 s\\n\\t) internal pure returns (address) {\\n\\t\\t(address recovered, RecoverError error) = tryRecover(hash, v, r, s);\\n\\t\\t_throwError(error);\\n\\t\\treturn recovered;\\n\\t}\\n\\n\\t/**\\n\\t * @dev Returns an Ethereum Signed Message, created from a `hash`. This\\n\\t * produces hash corresponding to the one signed with the\\n\\t * https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\\n\\t * JSON-RPC method as part of EIP-191.\\n\\t *\\n\\t * See {recover}.\\n\\t */\\n\\tfunction toEthSignedMessageHash(bytes32 hash) internal pure returns (bytes32) {\\n\\t\\t// 32 is the length in bytes of hash,\\n\\t\\t// enforced by the type signature above\\n\\t\\treturn keccak256(abi.encodePacked(\\\"\\\\x19Ethereum Signed Message:\\\\n32\\\", hash));\\n\\t}\\n\\n\\t/**\\n\\t * @dev Returns an Ethereum Signed Message, created from `s`. This\\n\\t * produces hash corresponding to the one signed with the\\n\\t * https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\\n\\t * JSON-RPC method as part of EIP-191.\\n\\t *\\n\\t * See {recover}.\\n\\t */\\n\\tfunction toEthSignedMessageHash(bytes memory s) internal pure returns (bytes32) {\\n\\t\\treturn\\n\\t\\t\\tkeccak256(abi.encodePacked(\\\"\\\\x19Ethereum Signed Message:\\\\n\\\", Openzeppelin_Strings.toString(s.length), s));\\n\\t}\\n\\n\\t/**\\n\\t * @dev Returns an Ethereum Signed Typed Data, created from a\\n\\t * `domainSeparator` and a `structHash`. This produces hash corresponding\\n\\t * to the one signed with the\\n\\t * https://eips.ethereum.org/EIPS/eip-712[`eth_signTypedData`]\\n\\t * JSON-RPC method as part of EIP-712.\\n\\t *\\n\\t * See {recover}.\\n\\t */\\n\\tfunction toTypedDataHash(bytes32 domainSeparator, bytes32 structHash) internal pure returns (bytes32) {\\n\\t\\treturn keccak256(abi.encodePacked(\\\"\\\\x19\\\\x01\\\", domainSeparator, structHash));\\n\\t}\\n}\\n\",\"keccak256\":\"0xe3c465016f940a2a11b6bde7b5238ca78c1f11bdd271a0f0ce07acfcdb5db282\",\"license\":\"MIT\"},\"solidity-kit/solc_0.8/openzeppelin/contracts/utils/cryptography/SignatureChecker.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.1) (utils/cryptography/SignatureChecker.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./ECDSA.sol\\\";\\nimport \\\"../Address.sol\\\";\\nimport \\\"../../interfaces/IERC1271.sol\\\";\\n\\n/**\\n * @dev Signature verification helper that can be used instead of `ECDSA.recover` to seamlessly support both ECDSA\\n * signatures from externally owned accounts (EOAs) as well as ERC1271 signatures from smart contract wallets like\\n * Argent and Gnosis Safe.\\n *\\n * _Available since v4.1._\\n */\\nlibrary Openzeppelin_SignatureChecker {\\n\\t/**\\n\\t * @dev Checks if a signature is valid for a given signer and data hash. If the signer is a smart contract, the\\n\\t * signature is validated against that smart contract using ERC1271, otherwise it's validated using `ECDSA.recover`.\\n\\t *\\n\\t * NOTE: Unlike ECDSA signatures, contract signatures are revocable, and the outcome of this function can thus\\n\\t * change through time. It could return true at block N and false at block N+1 (or the opposite).\\n\\t */\\n\\tfunction isValidSignatureNow(\\n\\t\\taddress signer,\\n\\t\\tbytes32 hash,\\n\\t\\tbytes memory signature\\n\\t) internal view returns (bool) {\\n\\t\\t(address recovered, Openzeppelin_ECDSA.RecoverError error) = Openzeppelin_ECDSA.tryRecover(hash, signature);\\n\\t\\tif (error == Openzeppelin_ECDSA.RecoverError.NoError && recovered == signer) {\\n\\t\\t\\treturn true;\\n\\t\\t}\\n\\n\\t\\t(bool success, bytes memory result) = signer.staticcall(\\n\\t\\t\\tabi.encodeWithSelector(Openzeppelin_IERC1271.isValidSignature.selector, hash, signature)\\n\\t\\t);\\n\\t\\treturn (success &&\\n\\t\\t\\tresult.length == 32 &&\\n\\t\\t\\tabi.decode(result, (bytes32)) == bytes32(Openzeppelin_IERC1271.isValidSignature.selector));\\n\\t}\\n}\\n\",\"keccak256\":\"0xd5e2c26c26a86657b7cf61e595aafb6305d67e1a60f665a117fc6f366618e3e6\",\"license\":\"MIT\"},\"src/Blockies.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0-or-later\\npragma solidity 0.8.16;\\n\\nimport \\\"solidity-kit/solc_0.8/ERC721/interfaces/IERC721Metadata.sol\\\";\\nimport \\\"solidity-kit/solc_0.8/ERC721/ERC4494/implementations/UsingERC4494PermitWithDynamicChainId.sol\\\";\\nimport \\\"./ERC721OwnedByAll.sol\\\";\\n\\n/// @notice Blockies as NFT. Each ethereum address owns its own one. No minting needed.\\n/// You can even use Permit (EIP-4494) to approve contracts via signatures.\\n/// Note though that unless you transfer or call `emitSelfTransferEvent` indexer would not know of your token.\\n/// @title Blockies on-chain\\ncontract Blockies is ERC721OwnedByAll, UsingERC4494PermitWithDynamicChainId, IERC721Metadata {\\n\\t// ------------------------------------------------------------------------------------------------------------------\\n\\t// TEMPLATE\\n\\t// ------------------------------------------------------------------------------------------------------------------\\n\\tbytes internal constant TEMPLATE =\\n\\t\\t\\\"data:application/json,{\\\\\\\"name\\\\\\\":\\\\\\\"0x0000000000000000000000000000000000000000\\\\\\\",\\\\\\\"description\\\\\\\":\\\\\\\"Blocky%200x0000000000000000000000000000000000000000%20generated%20on-chain\\\\\\\",\\\\\\\"image\\\\\\\":\\\\\\\"data:image/svg+xml,<svg%20xmlns='http://www.w3.org/2000/svg'%20shape-rendering='crispEdges'%20width='512'%20height='512'><g%20transform='scale(64)'><path%20fill='hsl(000,000%,000%)'%20d='M0,0h8v8h-8z'/><path%20fill='hsl(000,000%,000%)'%20d='M0,0h1v0h-1zm1,0h1v0h-1zm1,0h1v0h-1zm1,0h1v0h-1zm1,0h1v0h-1zm1,0h1v0h-1zm1,0h1v0h-1zm1,0h1v0h-1zm-8,1m1,0h1v0h-1zm1,0h1v0h-1zm1,0h1v0h-1zm1,0h1v0h-1zm1,0h1v0h-1zm1,0h1v0h-1zm1,0h1v0h-1zm1,0h1v0h-1zm-8,1m1,0h1v0h-1zm1,0h1v0h-1zm1,0h1v0h-1zm1,0h1v0h-1zm1,0h1v0h-1zm1,0h1v0h-1zm1,0h1v0h-1zm1,0h1v0h-1zm-8,1m1,0h1v0h-1zm1,0h1v0h-1zm1,0h1v0h-1zm1,0h1v0h-1zm1,0h1v0h-1zm1,0h1v0h-1zm1,0h1v0h-1zm1,0h1v0h-1zm-8,1m1,0h1v0h-1zm1,0h1v0h-1zm1,0h1v0h-1zm1,0h1v0h-1zm1,0h1v0h-1zm1,0h1v0h-1zm1,0h1v0h-1zm1,0h1v0h-1zm-8,1m1,0h1v0h-1zm1,0h1v0h-1zm1,0h1v0h-1zm1,0h1v0h-1zm1,0h1v0h-1zm1,0h1v0h-1zm1,0h1v0h-1zm1,0h1v0h-1zm-8,1m1,0h1v0h-1zm1,0h1v0h-1zm1,0h1v0h-1zm1,0h1v0h-1zm1,0h1v0h-1zm1,0h1v0h-1zm1,0h1v0h-1zm1,0h1v0h-1zm-8,1m1,0h1v0h-1zm1,0h1v0h-1zm1,0h1v0h-1zm1,0h1v0h-1zm1,0h1v0h-1zm1,0h1v0h-1zm1,0h1v0h-1zm1,0h1v0h-1z'/><path%20fill='hsl(000,000%,000%)'%20d='M0,0h1v0h-1zm1,0h1v0h-1zm1,0h1v0h-1zm1,0h1v0h-1zm1,0h1v0h-1zm1,0h1v0h-1zm1,0h1v0h-1zm1,0h1v0h-1zm-8,1m1,0h1v0h-1zm1,0h1v0h-1zm1,0h1v0h-1zm1,0h1v0h-1zm1,0h1v0h-1zm1,0h1v0h-1zm1,0h1v0h-1zm1,0h1v0h-1zm-8,1m1,0h1v0h-1zm1,0h1v0h-1zm1,0h1v0h-1zm1,0h1v0h-1zm1,0h1v0h-1zm1,0h1v0h-1zm1,0h1v0h-1zm1,0h1v0h-1zm-8,1m1,0h1v0h-1zm1,0h1v0h-1zm1,0h1v0h-1zm1,0h1v0h-1zm1,0h1v0h-1zm1,0h1v0h-1zm1,0h1v0h-1zm1,0h1v0h-1zm-8,1m1,0h1v0h-1zm1,0h1v0h-1zm1,0h1v0h-1zm1,0h1v0h-1zm1,0h1v0h-1zm1,0h1v0h-1zm1,0h1v0h-1zm1,0h1v0h-1zm-8,1m1,0h1v0h-1zm1,0h1v0h-1zm1,0h1v0h-1zm1,0h1v0h-1zm1,0h1v0h-1zm1,0h1v0h-1zm1,0h1v0h-1zm1,0h1v0h-1zm-8,1m1,0h1v0h-1zm1,0h1v0h-1zm1,0h1v0h-1zm1,0h1v0h-1zm1,0h1v0h-1zm1,0h1v0h-1zm1,0h1v0h-1zm1,0h1v0h-1zm-8,1m1,0h1v0h-1zm1,0h1v0h-1zm1,0h1v0h-1zm1,0h1v0h-1zm1,0h1v0h-1zm1,0h1v0h-1zm1,0h1v0h-1zm1,0h1v0h-1z'/></g></svg>\\\\\\\"}\\\";\\n\\n\\t// 33 start position for address in name\\n\\t// 41 = length of address - 1\\n\\t// 3 =  number of \\\"\\\\\\\"\\n\\tuint256 internal constant ADDRESS_NAME_POS = 34 - 3 + 41; // 72\\n\\n\\t// 22 = distance\\n\\t// 9 = Blocky%20\\n\\t// 41 = length of address - 1\\n\\t// 4 = further number of \\\"\\\\\\\"\\n\\tuint256 internal constant ADDRESS_NAME_2_POS = ADDRESS_NAME_POS + 22 - 4 + 9 + 41; // 140\\n\\n\\t// 184 = distance\\n\\t// 4 = further number of \\\"\\\\\\\"\\n\\t// 23 = %20generated%20on-chain\\n\\tuint256 internal constant COLOR_BG_POS = ADDRESS_NAME_2_POS + 23 + 184 - 4; // 343\\n\\n\\t// 54 = distance\\n\\tuint256 internal constant COLOR_1_POS = COLOR_BG_POS + 54; // 397\\n\\t// 18 = distance\\n\\tuint256 internal constant PATH_1_POS = COLOR_1_POS + 18; // 415\\n\\n\\t// 827 = distance\\n\\tuint256 internal constant COLOR_2_POS = PATH_1_POS + 827; // 1242\\n\\t// 18 = distance\\n\\tuint256 internal constant PATH_2_POS = COLOR_2_POS + 18; // 1260\\n\\n\\t// ------------------------------------------------------------------------------------------------------------------\\n\\t// DATA AND TYPES\\n\\t// ------------------------------------------------------------------------------------------------------------------\\n\\tbytes internal constant hexAlphabet = \\\"0123456789abcdef\\\";\\n\\n\\tstruct Seed {\\n\\t\\tint32 s0;\\n\\t\\tint32 s1;\\n\\t\\tint32 s2;\\n\\t\\tint32 s3;\\n\\t}\\n\\n\\t// ------------------------------------------------------------------------------------------------------------------\\n\\t// CONSTRUCTOR\\n\\t// ------------------------------------------------------------------------------------------------------------------\\n\\n\\tconstructor(address initialOwnerOfBlockyZero) UsingERC712WithDynamicChainId(address(0)) {\\n\\t\\t_transferFrom(address(0), initialOwnerOfBlockyZero, 0, false);\\n\\t}\\n\\n\\t// ------------------------------------------------------------------------------------------------------------------\\n\\t// EXTERNAL INTERFACE\\n\\t// ------------------------------------------------------------------------------------------------------------------\\n\\n\\t/// @inheritdoc IERC721Metadata\\n\\tfunction name() public pure override(IERC721Metadata, Named) returns (string memory) {\\n\\t\\treturn \\\"Blockies\\\";\\n\\t}\\n\\n\\t/// @inheritdoc IERC721Metadata\\n\\tfunction symbol() external pure returns (string memory) {\\n\\t\\treturn \\\"BLOCKY\\\";\\n\\t}\\n\\n\\t/// @inheritdoc IERC721Metadata\\n\\tfunction tokenURI(uint256 id) external pure override returns (string memory str) {\\n\\t\\treturn _tokenURI(id);\\n\\t}\\n\\n\\t/// @inheritdoc IERC165\\n\\tfunction supportsInterface(bytes4 id)\\n\\t\\tpublic\\n\\t\\tview\\n\\t\\toverride(BasicERC721, UsingERC4494Permit, IERC165)\\n\\t\\treturns (bool)\\n\\t{\\n\\t\\treturn BasicERC721.supportsInterface(id) || UsingERC4494Permit.supportsInterface(id);\\n\\t}\\n\\n\\t/// @notice emit Transfer event so that indexer can pick it up.\\n\\t///   This can be called by anyone at any time and does not change state\\n\\t///   As such it keeps the token's operator-approval state and will re-emit an Approval event to indicate that.\\n\\t/// @param id tokenID to emit the event for.\\n\\tfunction emitSelfTransferEvent(uint256 id) external {\\n\\t\\trequire(id < 2**160, \\\"NONEXISTENT_TOKEN\\\");\\n\\t\\t(address owner, , bool operatorEnabled) = _ownerNonceAndOperatorEnabledOf(id);\\n\\t\\temit Transfer(owner, owner, id);\\n\\n\\t\\tif (operatorEnabled) {\\n\\t\\t\\t// we reemit the Approval as Transfer event indicate a reset, as per ERC721 spec\\n\\t\\t\\temit Approval(owner, _operators[id], id);\\n\\t\\t}\\n\\t}\\n\\n\\t// ------------------------------------------------------------------------------------------------------------------\\n\\t// INTERNALS\\n\\t// ------------------------------------------------------------------------------------------------------------------\\n\\n\\tfunction _writeUint(\\n\\t\\tbytes memory data,\\n\\t\\tuint256 endPos,\\n\\t\\tuint256 num\\n\\t) internal pure {\\n\\t\\twhile (num != 0) {\\n\\t\\t\\tdata[endPos--] = bytes1(uint8(48 + (num % 10)));\\n\\t\\t\\tnum /= 10;\\n\\t\\t}\\n\\t}\\n\\n\\tfunction _seedrand(bytes memory seed) internal pure returns (Seed memory randseed) {\\n\\t\\tunchecked {\\n\\t\\t\\tfor (uint256 i = 0; i < seed.length; i++) {\\n\\t\\t\\t\\tuint8 j = uint8(i % 4);\\n\\t\\t\\t\\tif (j == 0) {\\n\\t\\t\\t\\t\\trandseed.s0 = (randseed.s0 << 5) - randseed.s0 + int32(uint32(uint8(seed[i])));\\n\\t\\t\\t\\t} else if (j == 1) {\\n\\t\\t\\t\\t\\trandseed.s1 = (randseed.s1 << 5) - randseed.s1 + int32(uint32(uint8(seed[i])));\\n\\t\\t\\t\\t} else if (j == 2) {\\n\\t\\t\\t\\t\\trandseed.s2 = (randseed.s2 << 5) - randseed.s2 + int32(uint32(uint8(seed[i])));\\n\\t\\t\\t\\t} else if (j == 3) {\\n\\t\\t\\t\\t\\trandseed.s3 = (randseed.s3 << 5) - randseed.s3 + int32(uint32(uint8(seed[i])));\\n\\t\\t\\t\\t}\\n\\t\\t\\t}\\n\\t\\t}\\n\\t}\\n\\n\\tfunction _rand(Seed memory randseed) internal pure returns (uint256 rnd) {\\n\\t\\tunchecked {\\n\\t\\t\\tint32 t = randseed.s0 ^ int32(randseed.s0 << 11);\\n\\t\\t\\trandseed.s0 = randseed.s1;\\n\\t\\t\\trandseed.s1 = randseed.s2;\\n\\t\\t\\trandseed.s2 = randseed.s3;\\n\\t\\t\\trandseed.s3 = randseed.s3 ^ (randseed.s3 >> 19) ^ t ^ (t >> 8);\\n\\t\\t\\trnd = uint32(randseed.s3);\\n\\t\\t}\\n\\t}\\n\\n\\tfunction _randhsl(Seed memory randseed)\\n\\t\\tinternal\\n\\t\\tpure\\n\\t\\treturns (\\n\\t\\t\\tuint16 hue,\\n\\t\\t\\tuint8 saturation,\\n\\t\\t\\tuint8 lightness\\n\\t\\t)\\n\\t{\\n\\t\\tunchecked {\\n\\t\\t\\t// saturation is the whole color spectrum\\n\\t\\t\\thue = uint16(((_rand(randseed) * 360) / 2147483648));\\n\\t\\t\\t// saturation goes from 40 to 100, it avoids greyish colors\\n\\t\\t\\tsaturation = uint8((_rand(randseed) * 60) / 2147483648 + 40);\\n\\t\\t\\t// lightness can be anything from 0 to 100, but probabilities are a bell curve around 50%\\n\\t\\t\\tlightness = uint8(\\n\\t\\t\\t\\t((_rand(randseed) + _rand(randseed) + _rand(randseed) + _rand(randseed)) * 25) / 2147483648\\n\\t\\t\\t);\\n\\t\\t}\\n\\t}\\n\\n\\tfunction _setColor(\\n\\t\\tbytes memory metadata,\\n\\t\\tSeed memory randseed,\\n\\t\\tuint8 i\\n\\t) internal pure {\\n\\t\\t(uint16 hue, uint8 saturation, uint8 lightness) = _randhsl(randseed);\\n\\t\\tuint256 pos = COLOR_BG_POS;\\n\\t\\tif (i == 1) {\\n\\t\\t\\tpos = COLOR_1_POS;\\n\\t\\t} else if (i == 2) {\\n\\t\\t\\tpos = COLOR_2_POS;\\n\\t\\t}\\n\\t\\t_writeUint(metadata, pos + 0, hue);\\n\\t\\t_writeUint(metadata, pos + 4, saturation);\\n\\t\\t_writeUint(metadata, pos + 9, lightness);\\n\\t}\\n\\n\\tfunction _writeUintAsHex(\\n\\t\\tbytes memory data,\\n\\t\\tuint256 endPos,\\n\\t\\tuint256 num\\n\\t) internal pure {\\n\\t\\twhile (num != 0) {\\n\\t\\t\\tdata[endPos--] = bytes1(hexAlphabet[num % 16]);\\n\\t\\t\\tnum /= 16;\\n\\t\\t}\\n\\t}\\n\\n\\tfunction _addressToString(address who) internal pure returns (string memory) {\\n\\t\\tbytes memory addr = \\\"0x0000000000000000000000000000000000000000\\\";\\n\\t\\t_writeUintAsHex(addr, 41, uint160(who));\\n\\t\\treturn string(addr);\\n\\t}\\n\\n\\tfunction _setPixel(\\n\\t\\tbytes memory metadata,\\n\\t\\tuint256 x,\\n\\t\\tuint256 y,\\n\\t\\tuint8 color\\n\\t) internal pure {\\n\\t\\tuint256 pathPos = 0;\\n\\t\\tif (color == 0) {\\n\\t\\t\\treturn;\\n\\t\\t}\\n\\t\\tif (color == 1) {\\n\\t\\t\\tpathPos = PATH_1_POS;\\n\\t\\t} else if (color == 2) {\\n\\t\\t\\tpathPos = PATH_2_POS;\\n\\t\\t}\\n\\t\\tuint256 pos = pathPos + y * 5 + (y * 8 + x) * 12 + 8;\\n\\t\\tmetadata[pos] = \\\"1\\\";\\n\\t}\\n\\n\\tfunction _tokenURI(uint256 id) internal pure returns (string memory) {\\n\\t\\tbytes memory metadata = TEMPLATE;\\n\\t\\t_writeUintAsHex(metadata, ADDRESS_NAME_POS, id);\\n\\t\\t_writeUintAsHex(metadata, ADDRESS_NAME_2_POS, id);\\n\\n\\t\\tSeed memory randseed = _seedrand(bytes(_addressToString(address(uint160(id)))));\\n\\n\\t\\t_setColor(metadata, randseed, 1);\\n\\t\\t_setColor(metadata, randseed, 0);\\n\\t\\t_setColor(metadata, randseed, 2);\\n\\n\\t\\tfor (uint256 y = 0; y < 8; y++) {\\n\\t\\t\\tuint8 p0 = uint8((_rand(randseed) * 23) / 2147483648 / 10);\\n\\t\\t\\tuint8 p1 = uint8((_rand(randseed) * 23) / 2147483648 / 10);\\n\\t\\t\\tuint8 p2 = uint8((_rand(randseed) * 23) / 2147483648 / 10);\\n\\t\\t\\tuint8 p3 = uint8((_rand(randseed) * 23) / 2147483648 / 10);\\n\\n\\t\\t\\t_setPixel(metadata, 0, y, p0);\\n\\t\\t\\t_setPixel(metadata, 1, y, p1);\\n\\t\\t\\t_setPixel(metadata, 2, y, p2);\\n\\t\\t\\t_setPixel(metadata, 3, y, p3);\\n\\t\\t\\t_setPixel(metadata, 4, y, p3);\\n\\t\\t\\t_setPixel(metadata, 5, y, p2);\\n\\t\\t\\t_setPixel(metadata, 6, y, p1);\\n\\t\\t\\t_setPixel(metadata, 7, y, p0);\\n\\t\\t}\\n\\n\\t\\treturn string(metadata);\\n\\t}\\n}\\n\",\"keccak256\":\"0x3a9e5ab41b532605f3e817b7341613f93f5cf655f7f56ac15c77d93af44bf707\",\"license\":\"AGPL-3.0-or-later\"},\"src/ERC721OwnedByAll.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"solidity-kit/solc_0.8/ERC721/implementations/BasicERC721.sol\\\";\\n\\nabstract contract ERC721OwnedByAll is BasicERC721, IERC721Supply {\\n\\t/// @inheritdoc IERC721\\n\\tfunction balanceOf(address owner) public view override returns (uint256 balance) {\\n\\t\\tbalance = super.balanceOf(owner);\\n\\n\\t\\t(, uint256 nonce) = _ownerAndNonceOf(uint256(uint160(owner)));\\n\\t\\tif (nonce >> 24 == 0) {\\n\\t\\t\\t// self token was never registered\\n\\t\\t\\tunchecked {\\n\\t\\t\\t\\tbalance++;\\n\\t\\t\\t}\\n\\t\\t}\\n\\t}\\n\\n\\t/// @inheritdoc IERC721WithBlocknumber\\n\\tfunction ownerAndLastTransferBlockNumberList(uint256[] calldata ids)\\n\\t\\texternal\\n\\t\\tview\\n\\t\\toverride\\n\\t\\treturns (OwnerData[] memory ownersData)\\n\\t{\\n\\t\\townersData = new OwnerData[](ids.length);\\n\\t\\tfor (uint256 i = 0; i < ids.length; i++) {\\n\\t\\t\\tuint256 id = ids[i];\\n\\t\\t\\tuint256 data = _owners[id];\\n\\t\\t\\taddress owner = address(uint160(data));\\n\\t\\t\\tif (owner == address(0) && id < 2**160) {\\n\\t\\t\\t\\towner = address(uint160(id));\\n\\t\\t\\t}\\n\\t\\t\\townersData[i].owner = owner;\\n\\t\\t\\townersData[i].lastTransferBlockNumber = (data >> 184) & 0xFFFFFFFFFFFFFFFF;\\n\\t\\t}\\n\\t}\\n\\n\\t/// @inheritdoc IERC721Supply\\n\\tfunction totalSupply() external pure returns (uint256) {\\n\\t\\treturn 2**160;\\n\\t}\\n\\n\\t// ------------------------------------------------------------------------------------------------------------------\\n\\t// INTERNALS\\n\\t// ------------------------------------------------------------------------------------------------------------------\\n\\n\\tfunction _ownerOf(uint256 id) internal view override returns (address owner) {\\n\\t\\towner = super._ownerOf(id);\\n\\t\\tif (owner == address(0) && id < 2**160) {\\n\\t\\t\\towner = address(uint160(id));\\n\\t\\t}\\n\\t}\\n\\n\\tfunction _ownerAndOperatorEnabledOf(uint256 id)\\n\\t\\tinternal\\n\\t\\tview\\n\\t\\toverride\\n\\t\\treturns (address owner, bool operatorEnabled)\\n\\t{\\n\\t\\t(owner, operatorEnabled) = super._ownerAndOperatorEnabledOf(id);\\n\\t\\tif (owner == address(0) && id < 2**160) {\\n\\t\\t\\towner = address(uint160(id));\\n\\t\\t}\\n\\t}\\n\\n\\tfunction _ownerAndNonceOf(uint256 id) internal view override returns (address owner, uint256 nonce) {\\n\\t\\t(owner, nonce) = super._ownerAndNonceOf(id);\\n\\t\\tif (owner == address(0) && id < 2**160) {\\n\\t\\t\\towner = address(uint160(id));\\n\\t\\t}\\n\\t}\\n\\n\\tfunction _ownerNonceAndOperatorEnabledOf(uint256 id)\\n\\t\\tinternal\\n\\t\\tview\\n\\t\\toverride\\n\\t\\treturns (\\n\\t\\t\\taddress owner,\\n\\t\\t\\tuint256 nonce,\\n\\t\\t\\tbool operatorEnabled\\n\\t\\t)\\n\\t{\\n\\t\\t(owner, nonce, operatorEnabled) = super._ownerNonceAndOperatorEnabledOf(id);\\n\\t\\tif (owner == address(0) && id < 2**160) {\\n\\t\\t\\towner = address(uint160(id));\\n\\t\\t}\\n\\t}\\n}\\n\",\"keccak256\":\"0xff89e67a3c99cb4583b295d37464debbb9fa5ad8641fe25b261d47375679bc5f\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60c06040523480156200001157600080fd5b50604051620035a6380380620035a68339810160408190526200003491620001a5565b46608081905260009062000049813062000065565b60a052506200005e9050600082818062000106565b50620001d7565b60007f8cad95687ba82c2ce50e74f7b754645e5117c3a5bec8151c0726d5857980a866620000ae604080518082019091526008815267426c6f636b69657360c01b602082015290565b8051602091820120604051620000e893928791879101938452602084019290925260408301526001600160a01b0316606082015260800190565b60405160208183030381529060405280519060200120905092915050565b6001600160a01b038316600090815260016020819052604090912080549091019055801562000150576001600160a01b038416600090815260016020526040902080546000190190555b6000828152602081905260408082204360b81b6001600160a01b0380881691821790925591518593918816917fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef91a450505050565b600060208284031215620001b857600080fd5b81516001600160a01b0381168114620001d057600080fd5b9392505050565b60805160a0516133a9620001fd60003960006111ae0152600061117801526133a96000f3fe608060405234801561001057600080fd5b50600436106101ae5760003560e01c806365d13a9b116100ee578063a22cb46511610097578063b88d4fde11610071578063b88d4fde14610423578063c87b56dd14610436578063e985e9c514610449578063f39452821461048557600080fd5b8063a22cb465146103ea578063ab84ee6f146103fd578063adc5fcc21461041057600080fd5b80637ecebe00116100c85780637ecebe001461036d57806384b0196e1461039657806395d89b41146103b157600080fd5b806365d13a9b1461033457806370a0823114610347578063745a41bc1461035a57600080fd5b806323b872dd1161015b57806342842e0e1161013557806342842e0e146102b557806348f3c51c146102c8578063585956d6146102fa5780636352211e1461032157600080fd5b806323b872dd1461027357806330adf81f146102865780633644e515146102ad57600080fd5b8063095ea7b31161018c578063095ea7b314610233578063141a468c1461024857806318160ddd1461026957600080fd5b806301ffc9a7146101b357806306fdde03146101db578063081812fc14610208575b600080fd5b6101c66101c1366004612512565b6104a5565b60405190151581526020015b60405180910390f35b604080518082019091526008815267426c6f636b69657360c01b60208201525b6040516101d2919061257f565b61021b610216366004612592565b6104c5565b6040516001600160a01b0390911681526020016101d2565b6102466102413660046125c2565b610535565b005b61025b610256366004612592565b6105dd565b6040519081526020016101d2565b600160a01b61025b565b6102466102813660046125ec565b610621565b61025b7f49ecf333e5b8c95c40fdafc95c1ad136e8914a8fb55e9dc8bb01eaa83a2df9ad81565b61025b6107a1565b6102466102c33660046125ec565b6107b0565b6102db6102d6366004612592565b6107d0565b604080516001600160a01b0390931683526020830191909152016101d2565b61025b7f045d890c79ffc118c4a2872a8cf3fee78fbf03c72a35e7fae867680021f3e1a481565b61021b61032f366004612592565b6107f0565b610246610342366004612592565b61082c565b61025b610355366004612628565b610935565b6102466103683660046126e6565b610972565b61025b61037b366004612628565b6001600160a01b031660009081526004602052604090205490565b61039e610a0a565b6040516101d29796959493929190612747565b60408051808201909152600681527f424c4f434b59000000000000000000000000000000000000000000000000000060208201526101fb565b6102466103f83660046127f9565b610a6c565b61024661040b366004612835565b610a7b565b61025b61041e366004612592565b610b04565b610246610431366004612835565b610b0f565b6101fb610444366004612592565b610c91565b6101c6610457366004612885565b6001600160a01b03918216600090815260026020908152604080832093909416825291909152205460ff1690565b6104986104933660046128b8565b610c9c565b6040516101d2919061292d565b60006104b082610de4565b806104bf57506104bf82610e7d565b92915050565b60008060006104d384610ee5565b90925090506001600160a01b038216610507576040516338077a2b60e01b8152600481018590526024015b60405180910390fd5b801561052b575050506000908152600360205260409020546001600160a01b031690565b5060009392505050565b60008061054183610f2d565b90925090506001600160a01b038216610570576040516338077a2b60e01b8152600481018490526024016104fe565b336001600160a01b038316148015906105ad57506001600160a01b038216600090815260026020908152604080832033845290915290205460ff16155b156105cb5760405163ea8e4eb560e01b815260040160405180910390fd5b6105d782828686610f55565b50505050565b60008060006105eb84610f2d565b90925090506001600160a01b03821661061a576040516338077a2b60e01b8152600481018590526024016104fe565b9392505050565b600080600061062f84611081565b919450925090506001600160a01b038316610660576040516338077a2b60e01b8152600481018590526024016104fe565b826001600160a01b0316866001600160a01b0316146106be576040517f23295f0e0000000000000000000000000000000000000000000000000000000081526001600160a01b038088166004830152841660248201526044016104fe565b6001600160a01b03851615806106dc57506001600160a01b03851630145b1561070557604051634726455360e11b81526001600160a01b03861660048201526024016104fe565b336001600160a01b038716146107875780801561073857506000848152600360205260409020546001600160a01b031633145b15801561076957506001600160a01b038616600090815260026020908152604080832033845290915290205460ff16155b156107875760405163ea8e4eb560e01b815260040160405180910390fd5b610799868686601886901c15156110d5565b505050505050565b60006107ab611173565b905090565b6107cb83838360405180602001604052806000815250610b0f565b505050565b6000806000806107df85610f2d565b909660189190911c95509350505050565b60006107fb826111d4565b90506001600160a01b038116610827576040516338077a2b60e01b8152600481018390526024016104fe565b919050565b600160a01b8110610899576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601160248201527f4e4f4e4558495354454e545f544f4b454e00000000000000000000000000000060448201526064016104fe565b6000806108a583611081565b604051929450925084916001600160a01b038516915081907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef90600090a480156107cb5760008381526003602052604080822054905185926001600160a01b03928316928616917f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b9259190a4505050565b600061094082611206565b90506000610956836001600160a01b0316610f2d565b915050601881901c60000361096c576001909101905b50919050565b814211156109b5576040517fdd6b219a000000000000000000000000000000000000000000000000000000008152426004820152602481018390526044016104fe565b6000806109c185610f2d565b90925090506001600160a01b0382166109f0576040516338077a2b60e01b8152600481018690526024016104fe565b6109fe828787878588611256565b61079982828888610f55565b7f0d000000000000000000000000000000000000000000000000000000000000006060806000808083610a3b611364565b604080516020808201835260008083528351818152918201909352999a929990985046975030965090945092509050565b610a7733838361138b565b5050565b81421115610abe576040517fdd6b219a000000000000000000000000000000000000000000000000000000008152426004820152602481018390526044016104fe565b6001600160a01b03841660009081526004602052604081208054610af892879287928792909190610aee8361299b565b9190505585611416565b6105d78484600161138b565b60006104bf826105dd565b6000806000610b1d85611081565b919450925090506001600160a01b038316610b4e576040516338077a2b60e01b8152600481018690526024016104fe565b866001600160a01b0316836001600160a01b031614610bac576040517f23295f0e0000000000000000000000000000000000000000000000000000000081526001600160a01b038089166004830152841660248201526044016104fe565b6001600160a01b0386161580610bca57506001600160a01b03861630145b15610bf357604051634726455360e11b81526001600160a01b03871660048201526024016104fe565b336001600160a01b03881614610c7557808015610c2657506000858152600360205260409020546001600160a01b031633145b158015610c5757506001600160a01b038716600090815260026020908152604080832033845290915290205460ff16155b15610c755760405163ea8e4eb560e01b815260040160405180910390fd5b610c88878787601886901c151588611526565b50505050505050565b60606104bf8261158c565b60608167ffffffffffffffff811115610cb757610cb7612643565b604051908082528060200260200182016040528015610cfc57816020015b6040805180820190915260008082526020820152815260200190600190039081610cd55790505b50905060005b82811015610ddd576000848483818110610d1e57610d1e6129b5565b602090810292909201356000818152928390526040909220549192508190506001600160a01b038116158015610d575750600160a01b83105b15610d5f5750815b80858581518110610d7257610d726129b5565b6020026020010151600001906001600160a01b031690816001600160a01b03168152505060b882901c67ffffffffffffffff16858581518110610db757610db76129b5565b602002602001015160200181815250505050508080610dd59061299b565b915050610d02565b5092915050565b60007f01ffc9a7000000000000000000000000000000000000000000000000000000006001600160e01b031983161480610e4757507f80ac58cd000000000000000000000000000000000000000000000000000000006001600160e01b03198316145b806104bf5750506001600160e01b0319167f5b5e139f000000000000000000000000000000000000000000000000000000001490565b60006001600160e01b031982167f5604e2250000000000000000000000000000000000000000000000000000000014806104bf57506001600160e01b031982167fefdb586b000000000000000000000000000000000000000000000000000000001492915050565b6000818152602081905260408120548190600160ff1b808216145b90925090506001600160a01b038216158015610f1f5750600160a01b83105b15610f28578291505b915091565b600081815260208190526040812054819060a081901c6affffffffffffffffffffff16610f00565b601883901c6000610f678560016129cb565b905081601882901c14610fa6576040517fadc1557200000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6001600160a01b038416610fd957600083815260208190526040902060a082901b6001600160a01b038816179055611038565b6000838152602081815260408083206001600160a01b038a811660a087901b17600160ff1b17909155600390925290912080547fffffffffffffffffffffffff0000000000000000000000000000000000000000169186169190911790555b82846001600160a01b0316876001600160a01b03167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92560405160405180910390a4505050505050565b6000818152602081905260409020546affffffffffffffffffffff60a082901c16600160ff1b808316146001600160a01b0383161580156110c55750600160a01b84105b156110ce578392505b9193909250565b6001600160a01b038316600090815260016020819052604090912080549091019055801561111e576001600160a01b038416600090815260016020526040902080546000190190555b6000828152602081905260408082204360b81b6001600160a01b0380881691821790925591518593918816917fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef91a450505050565b6000467f000000000000000000000000000000000000000000000000000000000000000081146111ac576111a781306118cf565b6111ce565b7f00000000000000000000000000000000000000000000000000000000000000005b91505090565b6000818152602081905260409020546001600160a01b0381161580156111fd5750600160a01b82105b15610827575090565b60006001600160a01b03821661123a57604051634726455360e11b81526001600160a01b03831660048201526024016104fe565b506001600160a01b031660009081526001602052604090205490565b60006112606107a1565b604080517f49ecf333e5b8c95c40fdafc95c1ad136e8914a8fb55e9dc8bb01eaa83a2df9ad60208201526001600160a01b03891691810191909152606081018790526080810185905260a0810186905260c0016040516020818303038152906040528051906020012060405160200161130b9291907f190100000000000000000000000000000000000000000000000000000000000081526002810192909252602282015260420190565b60405160208183030381529060405280519060200120905061132e87828461196e565b610c88576040517f8baa579f00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60606107ab604080518082019091526008815267426c6f636b69657360c01b602082015290565b6001600160a01b0383811660008181526002602090815260408083209487168084529482529182902080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff001686151590811790915591519182527f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31910160405180910390a3505050565b60006114206107a1565b604080517f045d890c79ffc118c4a2872a8cf3fee78fbf03c72a35e7fae867680021f3e1a460208201526001600160a01b03808a169282019290925290871660608201526080810185905260a0810186905260c001604051602081830303815290604052805190602001206040516020016114cd9291907f190100000000000000000000000000000000000000000000000000000000000081526002810192909252602282015260420190565b6040516020818303038152906040528051906020012090506114f086828461196e565b610799576040517f8baa579f00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b611532858585856110d5565b6001600160a01b0384163b156115855761154f3386868685611ade565b611585576040517f4e472e5e00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b5050505050565b6060600060405180610840016040528061081f8152602001612b2b61081f913990506115ba81604885611b8e565b6115f28160046115cc604860166129cb565b6115d691906129de565b6115e19060096129cb565b6115ec9060296129cb565b85611b8e565b600061160561160085611c68565b611c9c565b905061161382826001611de4565b61161f82826000611de4565b61162b82826002611de4565b60005b60088110156118c6576000600a638000000061169a858051602082018051600390810b8452604084018051820b9092526060909301805180850b9283905260139290921d90911882840b600b1b90921891821891830b60081d919091189182900b905263ffffffff1690565b6116a59060176129f1565b6116af9190612a26565b6116b99190612a26565b90506000600a638000000061171e868051602082018051600390810b8452604084018051820b9092526060909301805180850b9283905260139290921d90911882840b600b1b90921891821891830b60081d919091189182900b905263ffffffff1690565b6117299060176129f1565b6117339190612a26565b61173d9190612a26565b90506000600a63800000006117a2878051602082018051600390810b8452604084018051820b9092526060909301805180850b9283905260139290921d90911882840b600b1b90921891821891830b60081d919091189182900b905263ffffffff1690565b6117ad9060176129f1565b6117b79190612a26565b6117c19190612a26565b90506000600a6380000000611826888051602082018051600390810b8452604084018051820b9092526060909301805180850b9283905260139290921d90911882840b600b1b90921891821891830b60081d919091189182900b905263ffffffff1690565b6118319060176129f1565b61183b9190612a26565b6118459190612a26565b90506118548760008787611f80565b6118618760018786611f80565b61186e8760028785611f80565b61187b8760038784611f80565b6118888760048784611f80565b6118958760058785611f80565b6118a28760068786611f80565b6118af8760078787611f80565b5050505080806118be9061299b565b91505061162e565b50909392505050565b60007f8cad95687ba82c2ce50e74f7b754645e5117c3a5bec8151c0726d5857980a866611917604080518082019091526008815267426c6f636b69657360c01b602082015290565b805160209182012060405161195093928791879101938452602084019290925260408301526001600160a01b0316606082015260800190565b60405160208183030381529060405280519060200120905092915050565b600080600061197d858561214d565b9092509050600081600481111561199657611996612a3a565b1480156119b45750856001600160a01b0316826001600160a01b0316145b156119c45760019250505061061a565b600080876001600160a01b0316631626ba7e60e01b88886040516024016119ec929190612a50565b60408051601f198184030181529181526020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff166001600160e01b0319909416939093179092529051611a3f9190612a71565b600060405180830381855afa9150503d8060008114611a7a576040519150601f19603f3d011682016040523d82523d6000602084013e611a7f565b606091505b5091509150818015611a92575080516020145b8015611ad2575080517f1626ba7e0000000000000000000000000000000000000000000000000000000090611ad09083016020908101908401612a8d565b145b98975050505050505050565b600080846001600160a01b031663150b7a02888887876040518563ffffffff1660e01b8152600401611b139493929190612aa6565b6020604051808303816000875af1158015611b32573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611b569190612ae2565b6001600160e01b0319167f150b7a02000000000000000000000000000000000000000000000000000000001491505095945050505050565b80156107cb576040805180820190915260108082527f30313233343536373839616263646566000000000000000000000000000000006020830152611bd39083612aff565b81518110611be357611be36129b5565b01602001517fff00000000000000000000000000000000000000000000000000000000000000168383611c1581612b13565b945081518110611c2757611c276129b5565b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a905350611c61601082612a26565b9050611b8e565b606060006040518060600160405280602a815260200161334a602a913990506104bf816029856001600160a01b0316611b8e565b6040805160808101825260008082526020820181905291810182905260608101829052905b825181101561096c57600381166000819003611d0d57838281518110611ce957611ce96129b5565b602091010151835160f89190911c600382810b60051b9290920301900b8352611ddb565b8060ff16600103611d5357838281518110611d2a57611d2a6129b5565b60209101810151908401805160f89290921c600383810b60051b939093030190910b9052611ddb565b8060ff16600203611d9957838281518110611d7057611d706129b5565b60209101015160408401805160f89290921c600383810b60051b939093030190910b9052611ddb565b8060ff16600303611ddb57838281518110611db657611db66129b5565b60209101015160608401805160f89290921c600383810b60051b939093030190910b90525b50600101611cc1565b6000806000611df285612192565b919450925090506000600480611e0a604860166129cb565b611e1491906129de565b611e1f9060096129cb565b611e2a9060296129cb565b611e359060176129cb565b611e409060b86129cb565b611e4a91906129de565b90508460ff16600103611eb857600480611e66604860166129cb565b611e7091906129de565b611e7b9060096129cb565b611e869060296129cb565b611e919060176129cb565b611e9c9060b86129cb565b611ea691906129de565b611eb19060366129cb565b9050611f37565b8460ff16600203611f3757600480611ed2604860166129cb565b611edc91906129de565b611ee79060096129cb565b611ef29060296129cb565b611efd9060176129cb565b611f089060b86129cb565b611f1291906129de565b611f1d9060366129cb565b611f289060126129cb565b611f349061033b6129cb565b90505b611f5087611f468360006129cb565b8661ffff1661238f565b611f6887611f5f8360046129cb565b8560ff1661238f565b610c8887611f778360096129cb565b8460ff1661238f565b60008160ff16600003611f9357506105d7565b8160ff1660010361200a57600480611fad604860166129cb565b611fb791906129de565b611fc29060096129cb565b611fcd9060296129cb565b611fd89060176129cb565b611fe39060b86129cb565b611fed91906129de565b611ff89060366129cb565b6120039060126129cb565b9050612094565b8160ff1660020361209457600480612024604860166129cb565b61202e91906129de565b6120399060096129cb565b6120449060296129cb565b61204f9060176129cb565b61205a9060b86129cb565b61206491906129de565b61206f9060366129cb565b61207a9060126129cb565b6120869061033b6129cb565b6120919060126129cb565b90505b6000846120a28560086129f1565b6120ac91906129cb565b6120b790600c6129f1565b6120c28560056129f1565b6120cc90846129cb565b6120d691906129cb565b6120e19060086129cb565b90507f3100000000000000000000000000000000000000000000000000000000000000868281518110612116576121166129b5565b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a905350505050505050565b60008082516041036121835760208301516040840151606085015160001a6121778782858561240c565b9450945050505061218b565b506000905060025b9250929050565b600080600063800000006121f6858051602082018051600390810b8452604084018051820b9092526060909301805180850b9283905260139290921d90911882840b600b1b90921891821891830b60081d919091189182900b905263ffffffff1690565b610168028161220757612207612a10565b0492506380000000612269858051602082018051600390810b8452604084018051820b9092526060909301805180850b9283905260139290921d90911882840b600b1b90921891821891830b60081d919091189182900b905263ffffffff1690565b603c028161227957612279612a10565b04602801915063800000006122de858051602082018051600390810b8452604084018051820b9092526060909301805180850b9283905260139290921d90911882840b600b1b90921891821891830b60081d919091189182900b905263ffffffff1690565b855160208701805160408901805160608b018051600381810b808f52601390811d90921888820b600b90811b90991890811890820b600890811d9190911880830b9889905288841d90981896820b808a1b1896871896820b811d9690961880820b958690529185901d90941892840b9687901b90961891821891830b90931d189081900b90915263ffffffff91821692821691160101016019028161238557612385612a10565b0490509193909250565b80156107cb576123a0600a82612aff565b6123ab9060306129cb565b60f81b83836123b981612b13565b9450815181106123cb576123cb6129b5565b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a905350612405600a82612a26565b905061238f565b6000807f7fffffffffffffffffffffffffffffff5d576e7357a4501ddfe92f46681b20a083111561244357506000905060036124f0565b8460ff16601b1415801561245b57508460ff16601c14155b1561246c57506000905060046124f0565b6040805160008082526020820180845289905260ff881692820192909252606081018690526080810185905260019060a0016020604051602081039080840390855afa1580156124c0573d6000803e3d6000fd5b5050604051601f1901519150506001600160a01b0381166124e9576000600192509250506124f0565b9150600090505b94509492505050565b6001600160e01b03198116811461250f57600080fd5b50565b60006020828403121561252457600080fd5b813561061a816124f9565b60005b8381101561254a578181015183820152602001612532565b50506000910152565b6000815180845261256b81602086016020860161252f565b601f01601f19169290920160200192915050565b60208152600061061a6020830184612553565b6000602082840312156125a457600080fd5b5035919050565b80356001600160a01b038116811461082757600080fd5b600080604083850312156125d557600080fd5b6125de836125ab565b946020939093013593505050565b60008060006060848603121561260157600080fd5b61260a846125ab565b9250612618602085016125ab565b9150604084013590509250925092565b60006020828403121561263a57600080fd5b61061a826125ab565b634e487b7160e01b600052604160045260246000fd5b600082601f83011261266a57600080fd5b813567ffffffffffffffff8082111561268557612685612643565b604051601f8301601f19908116603f011681019082821181831017156126ad576126ad612643565b816040528381528660208588010111156126c657600080fd5b836020870160208301376000602085830101528094505050505092915050565b600080600080608085870312156126fc57600080fd5b612705856125ab565b93506020850135925060408501359150606085013567ffffffffffffffff81111561272f57600080fd5b61273b87828801612659565b91505092959194509250565b7fff00000000000000000000000000000000000000000000000000000000000000881681526000602060e08184015261278360e084018a612553565b8381036040850152612795818a612553565b606085018990526001600160a01b038816608086015260a0850187905284810360c0860152855180825283870192509083019060005b818110156127e7578351835292840192918401916001016127cb565b50909c9b505050505050505050505050565b6000806040838503121561280c57600080fd5b612815836125ab565b91506020830135801515811461282a57600080fd5b809150509250929050565b6000806000806080858703121561284b57600080fd5b612854856125ab565b9350612862602086016125ab565b925060408501359150606085013567ffffffffffffffff81111561272f57600080fd5b6000806040838503121561289857600080fd5b6128a1836125ab565b91506128af602084016125ab565b90509250929050565b600080602083850312156128cb57600080fd5b823567ffffffffffffffff808211156128e357600080fd5b818501915085601f8301126128f757600080fd5b81358181111561290657600080fd5b8660208260051b850101111561291b57600080fd5b60209290920196919550909350505050565b602080825282518282018190526000919060409081850190868401855b8281101561297857815180516001600160a01b0316855286015186850152928401929085019060010161294a565b5091979650505050505050565b634e487b7160e01b600052601160045260246000fd5b600060001982036129ae576129ae612985565b5060010190565b634e487b7160e01b600052603260045260246000fd5b808201808211156104bf576104bf612985565b818103818111156104bf576104bf612985565b6000816000190483118215151615612a0b57612a0b612985565b500290565b634e487b7160e01b600052601260045260246000fd5b600082612a3557612a35612a10565b500490565b634e487b7160e01b600052602160045260246000fd5b828152604060208201526000612a696040830184612553565b949350505050565b60008251612a8381846020870161252f565b9190910192915050565b600060208284031215612a9f57600080fd5b5051919050565b60006001600160a01b03808716835280861660208401525083604083015260806060830152612ad86080830184612553565b9695505050505050565b600060208284031215612af457600080fd5b815161061a816124f9565b600082612b0e57612b0e612a10565b500690565b600081612b2257612b22612985565b50600019019056fe646174613a6170706c69636174696f6e2f6a736f6e2c7b226e616d65223a22307830303030303030303030303030303030303030303030303030303030303030303030303030303030222c226465736372697074696f6e223a22426c6f636b7925323030783030303030303030303030303030303030303030303030303030303030303030303030303030303025323067656e6572617465642532306f6e2d636861696e222c22696d616765223a22646174613a696d6167652f7376672b786d6c2c3c737667253230786d6c6e733d27687474703a2f2f7777772e77332e6f72672f323030302f7376672725323073686170652d72656e646572696e673d27637269737045646765732725323077696474683d27353132272532306865696768743d27353132273e3c672532307472616e73666f726d3d277363616c6528363429273e3c7061746825323066696c6c3d2768736c283030302c303030252c303030252927253230643d274d302c3068387638682d387a272f3e3c7061746825323066696c6c3d2768736c283030302c303030252c303030252927253230643d274d302c3068317630682d317a6d312c3068317630682d317a6d312c3068317630682d317a6d312c3068317630682d317a6d312c3068317630682d317a6d312c3068317630682d317a6d312c3068317630682d317a6d312c3068317630682d317a6d2d382c316d312c3068317630682d317a6d312c3068317630682d317a6d312c3068317630682d317a6d312c3068317630682d317a6d312c3068317630682d317a6d312c3068317630682d317a6d312c3068317630682d317a6d312c3068317630682d317a6d2d382c316d312c3068317630682d317a6d312c3068317630682d317a6d312c3068317630682d317a6d312c3068317630682d317a6d312c3068317630682d317a6d312c3068317630682d317a6d312c3068317630682d317a6d312c3068317630682d317a6d2d382c316d312c3068317630682d317a6d312c3068317630682d317a6d312c3068317630682d317a6d312c3068317630682d317a6d312c3068317630682d317a6d312c3068317630682d317a6d312c3068317630682d317a6d312c3068317630682d317a6d2d382c316d312c3068317630682d317a6d312c3068317630682d317a6d312c3068317630682d317a6d312c3068317630682d317a6d312c3068317630682d317a6d312c3068317630682d317a6d312c3068317630682d317a6d312c3068317630682d317a6d2d382c316d312c3068317630682d317a6d312c3068317630682d317a6d312c3068317630682d317a6d312c3068317630682d317a6d312c3068317630682d317a6d312c3068317630682d317a6d312c3068317630682d317a6d312c3068317630682d317a6d2d382c316d312c3068317630682d317a6d312c3068317630682d317a6d312c3068317630682d317a6d312c3068317630682d317a6d312c3068317630682d317a6d312c3068317630682d317a6d312c3068317630682d317a6d312c3068317630682d317a6d2d382c316d312c3068317630682d317a6d312c3068317630682d317a6d312c3068317630682d317a6d312c3068317630682d317a6d312c3068317630682d317a6d312c3068317630682d317a6d312c3068317630682d317a6d312c3068317630682d317a272f3e3c7061746825323066696c6c3d2768736c283030302c303030252c303030252927253230643d274d302c3068317630682d317a6d312c3068317630682d317a6d312c3068317630682d317a6d312c3068317630682d317a6d312c3068317630682d317a6d312c3068317630682d317a6d312c3068317630682d317a6d312c3068317630682d317a6d2d382c316d312c3068317630682d317a6d312c3068317630682d317a6d312c3068317630682d317a6d312c3068317630682d317a6d312c3068317630682d317a6d312c3068317630682d317a6d312c3068317630682d317a6d312c3068317630682d317a6d2d382c316d312c3068317630682d317a6d312c3068317630682d317a6d312c3068317630682d317a6d312c3068317630682d317a6d312c3068317630682d317a6d312c3068317630682d317a6d312c3068317630682d317a6d312c3068317630682d317a6d2d382c316d312c3068317630682d317a6d312c3068317630682d317a6d312c3068317630682d317a6d312c3068317630682d317a6d312c3068317630682d317a6d312c3068317630682d317a6d312c3068317630682d317a6d312c3068317630682d317a6d2d382c316d312c3068317630682d317a6d312c3068317630682d317a6d312c3068317630682d317a6d312c3068317630682d317a6d312c3068317630682d317a6d312c3068317630682d317a6d312c3068317630682d317a6d312c3068317630682d317a6d2d382c316d312c3068317630682d317a6d312c3068317630682d317a6d312c3068317630682d317a6d312c3068317630682d317a6d312c3068317630682d317a6d312c3068317630682d317a6d312c3068317630682d317a6d312c3068317630682d317a6d2d382c316d312c3068317630682d317a6d312c3068317630682d317a6d312c3068317630682d317a6d312c3068317630682d317a6d312c3068317630682d317a6d312c3068317630682d317a6d312c3068317630682d317a6d312c3068317630682d317a6d2d382c316d312c3068317630682d317a6d312c3068317630682d317a6d312c3068317630682d317a6d312c3068317630682d317a6d312c3068317630682d317a6d312c3068317630682d317a6d312c3068317630682d317a6d312c3068317630682d317a272f3e3c2f673e3c2f7376673e227d307830303030303030303030303030303030303030303030303030303030303030303030303030303030a264697066735822122021204815570208df081217dacb0e74493549c9aa38f1f85fecc69bf0f82244ea64736f6c63430008100033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106101ae5760003560e01c806365d13a9b116100ee578063a22cb46511610097578063b88d4fde11610071578063b88d4fde14610423578063c87b56dd14610436578063e985e9c514610449578063f39452821461048557600080fd5b8063a22cb465146103ea578063ab84ee6f146103fd578063adc5fcc21461041057600080fd5b80637ecebe00116100c85780637ecebe001461036d57806384b0196e1461039657806395d89b41146103b157600080fd5b806365d13a9b1461033457806370a0823114610347578063745a41bc1461035a57600080fd5b806323b872dd1161015b57806342842e0e1161013557806342842e0e146102b557806348f3c51c146102c8578063585956d6146102fa5780636352211e1461032157600080fd5b806323b872dd1461027357806330adf81f146102865780633644e515146102ad57600080fd5b8063095ea7b31161018c578063095ea7b314610233578063141a468c1461024857806318160ddd1461026957600080fd5b806301ffc9a7146101b357806306fdde03146101db578063081812fc14610208575b600080fd5b6101c66101c1366004612512565b6104a5565b60405190151581526020015b60405180910390f35b604080518082019091526008815267426c6f636b69657360c01b60208201525b6040516101d2919061257f565b61021b610216366004612592565b6104c5565b6040516001600160a01b0390911681526020016101d2565b6102466102413660046125c2565b610535565b005b61025b610256366004612592565b6105dd565b6040519081526020016101d2565b600160a01b61025b565b6102466102813660046125ec565b610621565b61025b7f49ecf333e5b8c95c40fdafc95c1ad136e8914a8fb55e9dc8bb01eaa83a2df9ad81565b61025b6107a1565b6102466102c33660046125ec565b6107b0565b6102db6102d6366004612592565b6107d0565b604080516001600160a01b0390931683526020830191909152016101d2565b61025b7f045d890c79ffc118c4a2872a8cf3fee78fbf03c72a35e7fae867680021f3e1a481565b61021b61032f366004612592565b6107f0565b610246610342366004612592565b61082c565b61025b610355366004612628565b610935565b6102466103683660046126e6565b610972565b61025b61037b366004612628565b6001600160a01b031660009081526004602052604090205490565b61039e610a0a565b6040516101d29796959493929190612747565b60408051808201909152600681527f424c4f434b59000000000000000000000000000000000000000000000000000060208201526101fb565b6102466103f83660046127f9565b610a6c565b61024661040b366004612835565b610a7b565b61025b61041e366004612592565b610b04565b610246610431366004612835565b610b0f565b6101fb610444366004612592565b610c91565b6101c6610457366004612885565b6001600160a01b03918216600090815260026020908152604080832093909416825291909152205460ff1690565b6104986104933660046128b8565b610c9c565b6040516101d2919061292d565b60006104b082610de4565b806104bf57506104bf82610e7d565b92915050565b60008060006104d384610ee5565b90925090506001600160a01b038216610507576040516338077a2b60e01b8152600481018590526024015b60405180910390fd5b801561052b575050506000908152600360205260409020546001600160a01b031690565b5060009392505050565b60008061054183610f2d565b90925090506001600160a01b038216610570576040516338077a2b60e01b8152600481018490526024016104fe565b336001600160a01b038316148015906105ad57506001600160a01b038216600090815260026020908152604080832033845290915290205460ff16155b156105cb5760405163ea8e4eb560e01b815260040160405180910390fd5b6105d782828686610f55565b50505050565b60008060006105eb84610f2d565b90925090506001600160a01b03821661061a576040516338077a2b60e01b8152600481018590526024016104fe565b9392505050565b600080600061062f84611081565b919450925090506001600160a01b038316610660576040516338077a2b60e01b8152600481018590526024016104fe565b826001600160a01b0316866001600160a01b0316146106be576040517f23295f0e0000000000000000000000000000000000000000000000000000000081526001600160a01b038088166004830152841660248201526044016104fe565b6001600160a01b03851615806106dc57506001600160a01b03851630145b1561070557604051634726455360e11b81526001600160a01b03861660048201526024016104fe565b336001600160a01b038716146107875780801561073857506000848152600360205260409020546001600160a01b031633145b15801561076957506001600160a01b038616600090815260026020908152604080832033845290915290205460ff16155b156107875760405163ea8e4eb560e01b815260040160405180910390fd5b610799868686601886901c15156110d5565b505050505050565b60006107ab611173565b905090565b6107cb83838360405180602001604052806000815250610b0f565b505050565b6000806000806107df85610f2d565b909660189190911c95509350505050565b60006107fb826111d4565b90506001600160a01b038116610827576040516338077a2b60e01b8152600481018390526024016104fe565b919050565b600160a01b8110610899576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601160248201527f4e4f4e4558495354454e545f544f4b454e00000000000000000000000000000060448201526064016104fe565b6000806108a583611081565b604051929450925084916001600160a01b038516915081907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef90600090a480156107cb5760008381526003602052604080822054905185926001600160a01b03928316928616917f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b9259190a4505050565b600061094082611206565b90506000610956836001600160a01b0316610f2d565b915050601881901c60000361096c576001909101905b50919050565b814211156109b5576040517fdd6b219a000000000000000000000000000000000000000000000000000000008152426004820152602481018390526044016104fe565b6000806109c185610f2d565b90925090506001600160a01b0382166109f0576040516338077a2b60e01b8152600481018690526024016104fe565b6109fe828787878588611256565b61079982828888610f55565b7f0d000000000000000000000000000000000000000000000000000000000000006060806000808083610a3b611364565b604080516020808201835260008083528351818152918201909352999a929990985046975030965090945092509050565b610a7733838361138b565b5050565b81421115610abe576040517fdd6b219a000000000000000000000000000000000000000000000000000000008152426004820152602481018390526044016104fe565b6001600160a01b03841660009081526004602052604081208054610af892879287928792909190610aee8361299b565b9190505585611416565b6105d78484600161138b565b60006104bf826105dd565b6000806000610b1d85611081565b919450925090506001600160a01b038316610b4e576040516338077a2b60e01b8152600481018690526024016104fe565b866001600160a01b0316836001600160a01b031614610bac576040517f23295f0e0000000000000000000000000000000000000000000000000000000081526001600160a01b038089166004830152841660248201526044016104fe565b6001600160a01b0386161580610bca57506001600160a01b03861630145b15610bf357604051634726455360e11b81526001600160a01b03871660048201526024016104fe565b336001600160a01b03881614610c7557808015610c2657506000858152600360205260409020546001600160a01b031633145b158015610c5757506001600160a01b038716600090815260026020908152604080832033845290915290205460ff16155b15610c755760405163ea8e4eb560e01b815260040160405180910390fd5b610c88878787601886901c151588611526565b50505050505050565b60606104bf8261158c565b60608167ffffffffffffffff811115610cb757610cb7612643565b604051908082528060200260200182016040528015610cfc57816020015b6040805180820190915260008082526020820152815260200190600190039081610cd55790505b50905060005b82811015610ddd576000848483818110610d1e57610d1e6129b5565b602090810292909201356000818152928390526040909220549192508190506001600160a01b038116158015610d575750600160a01b83105b15610d5f5750815b80858581518110610d7257610d726129b5565b6020026020010151600001906001600160a01b031690816001600160a01b03168152505060b882901c67ffffffffffffffff16858581518110610db757610db76129b5565b602002602001015160200181815250505050508080610dd59061299b565b915050610d02565b5092915050565b60007f01ffc9a7000000000000000000000000000000000000000000000000000000006001600160e01b031983161480610e4757507f80ac58cd000000000000000000000000000000000000000000000000000000006001600160e01b03198316145b806104bf5750506001600160e01b0319167f5b5e139f000000000000000000000000000000000000000000000000000000001490565b60006001600160e01b031982167f5604e2250000000000000000000000000000000000000000000000000000000014806104bf57506001600160e01b031982167fefdb586b000000000000000000000000000000000000000000000000000000001492915050565b6000818152602081905260408120548190600160ff1b808216145b90925090506001600160a01b038216158015610f1f5750600160a01b83105b15610f28578291505b915091565b600081815260208190526040812054819060a081901c6affffffffffffffffffffff16610f00565b601883901c6000610f678560016129cb565b905081601882901c14610fa6576040517fadc1557200000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6001600160a01b038416610fd957600083815260208190526040902060a082901b6001600160a01b038816179055611038565b6000838152602081815260408083206001600160a01b038a811660a087901b17600160ff1b17909155600390925290912080547fffffffffffffffffffffffff0000000000000000000000000000000000000000169186169190911790555b82846001600160a01b0316876001600160a01b03167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92560405160405180910390a4505050505050565b6000818152602081905260409020546affffffffffffffffffffff60a082901c16600160ff1b808316146001600160a01b0383161580156110c55750600160a01b84105b156110ce578392505b9193909250565b6001600160a01b038316600090815260016020819052604090912080549091019055801561111e576001600160a01b038416600090815260016020526040902080546000190190555b6000828152602081905260408082204360b81b6001600160a01b0380881691821790925591518593918816917fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef91a450505050565b6000467f000000000000000000000000000000000000000000000000000000000000000081146111ac576111a781306118cf565b6111ce565b7f00000000000000000000000000000000000000000000000000000000000000005b91505090565b6000818152602081905260409020546001600160a01b0381161580156111fd5750600160a01b82105b15610827575090565b60006001600160a01b03821661123a57604051634726455360e11b81526001600160a01b03831660048201526024016104fe565b506001600160a01b031660009081526001602052604090205490565b60006112606107a1565b604080517f49ecf333e5b8c95c40fdafc95c1ad136e8914a8fb55e9dc8bb01eaa83a2df9ad60208201526001600160a01b03891691810191909152606081018790526080810185905260a0810186905260c0016040516020818303038152906040528051906020012060405160200161130b9291907f190100000000000000000000000000000000000000000000000000000000000081526002810192909252602282015260420190565b60405160208183030381529060405280519060200120905061132e87828461196e565b610c88576040517f8baa579f00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60606107ab604080518082019091526008815267426c6f636b69657360c01b602082015290565b6001600160a01b0383811660008181526002602090815260408083209487168084529482529182902080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff001686151590811790915591519182527f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31910160405180910390a3505050565b60006114206107a1565b604080517f045d890c79ffc118c4a2872a8cf3fee78fbf03c72a35e7fae867680021f3e1a460208201526001600160a01b03808a169282019290925290871660608201526080810185905260a0810186905260c001604051602081830303815290604052805190602001206040516020016114cd9291907f190100000000000000000000000000000000000000000000000000000000000081526002810192909252602282015260420190565b6040516020818303038152906040528051906020012090506114f086828461196e565b610799576040517f8baa579f00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b611532858585856110d5565b6001600160a01b0384163b156115855761154f3386868685611ade565b611585576040517f4e472e5e00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b5050505050565b6060600060405180610840016040528061081f8152602001612b2b61081f913990506115ba81604885611b8e565b6115f28160046115cc604860166129cb565b6115d691906129de565b6115e19060096129cb565b6115ec9060296129cb565b85611b8e565b600061160561160085611c68565b611c9c565b905061161382826001611de4565b61161f82826000611de4565b61162b82826002611de4565b60005b60088110156118c6576000600a638000000061169a858051602082018051600390810b8452604084018051820b9092526060909301805180850b9283905260139290921d90911882840b600b1b90921891821891830b60081d919091189182900b905263ffffffff1690565b6116a59060176129f1565b6116af9190612a26565b6116b99190612a26565b90506000600a638000000061171e868051602082018051600390810b8452604084018051820b9092526060909301805180850b9283905260139290921d90911882840b600b1b90921891821891830b60081d919091189182900b905263ffffffff1690565b6117299060176129f1565b6117339190612a26565b61173d9190612a26565b90506000600a63800000006117a2878051602082018051600390810b8452604084018051820b9092526060909301805180850b9283905260139290921d90911882840b600b1b90921891821891830b60081d919091189182900b905263ffffffff1690565b6117ad9060176129f1565b6117b79190612a26565b6117c19190612a26565b90506000600a6380000000611826888051602082018051600390810b8452604084018051820b9092526060909301805180850b9283905260139290921d90911882840b600b1b90921891821891830b60081d919091189182900b905263ffffffff1690565b6118319060176129f1565b61183b9190612a26565b6118459190612a26565b90506118548760008787611f80565b6118618760018786611f80565b61186e8760028785611f80565b61187b8760038784611f80565b6118888760048784611f80565b6118958760058785611f80565b6118a28760068786611f80565b6118af8760078787611f80565b5050505080806118be9061299b565b91505061162e565b50909392505050565b60007f8cad95687ba82c2ce50e74f7b754645e5117c3a5bec8151c0726d5857980a866611917604080518082019091526008815267426c6f636b69657360c01b602082015290565b805160209182012060405161195093928791879101938452602084019290925260408301526001600160a01b0316606082015260800190565b60405160208183030381529060405280519060200120905092915050565b600080600061197d858561214d565b9092509050600081600481111561199657611996612a3a565b1480156119b45750856001600160a01b0316826001600160a01b0316145b156119c45760019250505061061a565b600080876001600160a01b0316631626ba7e60e01b88886040516024016119ec929190612a50565b60408051601f198184030181529181526020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff166001600160e01b0319909416939093179092529051611a3f9190612a71565b600060405180830381855afa9150503d8060008114611a7a576040519150601f19603f3d011682016040523d82523d6000602084013e611a7f565b606091505b5091509150818015611a92575080516020145b8015611ad2575080517f1626ba7e0000000000000000000000000000000000000000000000000000000090611ad09083016020908101908401612a8d565b145b98975050505050505050565b600080846001600160a01b031663150b7a02888887876040518563ffffffff1660e01b8152600401611b139493929190612aa6565b6020604051808303816000875af1158015611b32573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611b569190612ae2565b6001600160e01b0319167f150b7a02000000000000000000000000000000000000000000000000000000001491505095945050505050565b80156107cb576040805180820190915260108082527f30313233343536373839616263646566000000000000000000000000000000006020830152611bd39083612aff565b81518110611be357611be36129b5565b01602001517fff00000000000000000000000000000000000000000000000000000000000000168383611c1581612b13565b945081518110611c2757611c276129b5565b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a905350611c61601082612a26565b9050611b8e565b606060006040518060600160405280602a815260200161334a602a913990506104bf816029856001600160a01b0316611b8e565b6040805160808101825260008082526020820181905291810182905260608101829052905b825181101561096c57600381166000819003611d0d57838281518110611ce957611ce96129b5565b602091010151835160f89190911c600382810b60051b9290920301900b8352611ddb565b8060ff16600103611d5357838281518110611d2a57611d2a6129b5565b60209101810151908401805160f89290921c600383810b60051b939093030190910b9052611ddb565b8060ff16600203611d9957838281518110611d7057611d706129b5565b60209101015160408401805160f89290921c600383810b60051b939093030190910b9052611ddb565b8060ff16600303611ddb57838281518110611db657611db66129b5565b60209101015160608401805160f89290921c600383810b60051b939093030190910b90525b50600101611cc1565b6000806000611df285612192565b919450925090506000600480611e0a604860166129cb565b611e1491906129de565b611e1f9060096129cb565b611e2a9060296129cb565b611e359060176129cb565b611e409060b86129cb565b611e4a91906129de565b90508460ff16600103611eb857600480611e66604860166129cb565b611e7091906129de565b611e7b9060096129cb565b611e869060296129cb565b611e919060176129cb565b611e9c9060b86129cb565b611ea691906129de565b611eb19060366129cb565b9050611f37565b8460ff16600203611f3757600480611ed2604860166129cb565b611edc91906129de565b611ee79060096129cb565b611ef29060296129cb565b611efd9060176129cb565b611f089060b86129cb565b611f1291906129de565b611f1d9060366129cb565b611f289060126129cb565b611f349061033b6129cb565b90505b611f5087611f468360006129cb565b8661ffff1661238f565b611f6887611f5f8360046129cb565b8560ff1661238f565b610c8887611f778360096129cb565b8460ff1661238f565b60008160ff16600003611f9357506105d7565b8160ff1660010361200a57600480611fad604860166129cb565b611fb791906129de565b611fc29060096129cb565b611fcd9060296129cb565b611fd89060176129cb565b611fe39060b86129cb565b611fed91906129de565b611ff89060366129cb565b6120039060126129cb565b9050612094565b8160ff1660020361209457600480612024604860166129cb565b61202e91906129de565b6120399060096129cb565b6120449060296129cb565b61204f9060176129cb565b61205a9060b86129cb565b61206491906129de565b61206f9060366129cb565b61207a9060126129cb565b6120869061033b6129cb565b6120919060126129cb565b90505b6000846120a28560086129f1565b6120ac91906129cb565b6120b790600c6129f1565b6120c28560056129f1565b6120cc90846129cb565b6120d691906129cb565b6120e19060086129cb565b90507f3100000000000000000000000000000000000000000000000000000000000000868281518110612116576121166129b5565b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a905350505050505050565b60008082516041036121835760208301516040840151606085015160001a6121778782858561240c565b9450945050505061218b565b506000905060025b9250929050565b600080600063800000006121f6858051602082018051600390810b8452604084018051820b9092526060909301805180850b9283905260139290921d90911882840b600b1b90921891821891830b60081d919091189182900b905263ffffffff1690565b610168028161220757612207612a10565b0492506380000000612269858051602082018051600390810b8452604084018051820b9092526060909301805180850b9283905260139290921d90911882840b600b1b90921891821891830b60081d919091189182900b905263ffffffff1690565b603c028161227957612279612a10565b04602801915063800000006122de858051602082018051600390810b8452604084018051820b9092526060909301805180850b9283905260139290921d90911882840b600b1b90921891821891830b60081d919091189182900b905263ffffffff1690565b855160208701805160408901805160608b018051600381810b808f52601390811d90921888820b600b90811b90991890811890820b600890811d9190911880830b9889905288841d90981896820b808a1b1896871896820b811d9690961880820b958690529185901d90941892840b9687901b90961891821891830b90931d189081900b90915263ffffffff91821692821691160101016019028161238557612385612a10565b0490509193909250565b80156107cb576123a0600a82612aff565b6123ab9060306129cb565b60f81b83836123b981612b13565b9450815181106123cb576123cb6129b5565b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a905350612405600a82612a26565b905061238f565b6000807f7fffffffffffffffffffffffffffffff5d576e7357a4501ddfe92f46681b20a083111561244357506000905060036124f0565b8460ff16601b1415801561245b57508460ff16601c14155b1561246c57506000905060046124f0565b6040805160008082526020820180845289905260ff881692820192909252606081018690526080810185905260019060a0016020604051602081039080840390855afa1580156124c0573d6000803e3d6000fd5b5050604051601f1901519150506001600160a01b0381166124e9576000600192509250506124f0565b9150600090505b94509492505050565b6001600160e01b03198116811461250f57600080fd5b50565b60006020828403121561252457600080fd5b813561061a816124f9565b60005b8381101561254a578181015183820152602001612532565b50506000910152565b6000815180845261256b81602086016020860161252f565b601f01601f19169290920160200192915050565b60208152600061061a6020830184612553565b6000602082840312156125a457600080fd5b5035919050565b80356001600160a01b038116811461082757600080fd5b600080604083850312156125d557600080fd5b6125de836125ab565b946020939093013593505050565b60008060006060848603121561260157600080fd5b61260a846125ab565b9250612618602085016125ab565b9150604084013590509250925092565b60006020828403121561263a57600080fd5b61061a826125ab565b634e487b7160e01b600052604160045260246000fd5b600082601f83011261266a57600080fd5b813567ffffffffffffffff8082111561268557612685612643565b604051601f8301601f19908116603f011681019082821181831017156126ad576126ad612643565b816040528381528660208588010111156126c657600080fd5b836020870160208301376000602085830101528094505050505092915050565b600080600080608085870312156126fc57600080fd5b612705856125ab565b93506020850135925060408501359150606085013567ffffffffffffffff81111561272f57600080fd5b61273b87828801612659565b91505092959194509250565b7fff00000000000000000000000000000000000000000000000000000000000000881681526000602060e08184015261278360e084018a612553565b8381036040850152612795818a612553565b606085018990526001600160a01b038816608086015260a0850187905284810360c0860152855180825283870192509083019060005b818110156127e7578351835292840192918401916001016127cb565b50909c9b505050505050505050505050565b6000806040838503121561280c57600080fd5b612815836125ab565b91506020830135801515811461282a57600080fd5b809150509250929050565b6000806000806080858703121561284b57600080fd5b612854856125ab565b9350612862602086016125ab565b925060408501359150606085013567ffffffffffffffff81111561272f57600080fd5b6000806040838503121561289857600080fd5b6128a1836125ab565b91506128af602084016125ab565b90509250929050565b600080602083850312156128cb57600080fd5b823567ffffffffffffffff808211156128e357600080fd5b818501915085601f8301126128f757600080fd5b81358181111561290657600080fd5b8660208260051b850101111561291b57600080fd5b60209290920196919550909350505050565b602080825282518282018190526000919060409081850190868401855b8281101561297857815180516001600160a01b0316855286015186850152928401929085019060010161294a565b5091979650505050505050565b634e487b7160e01b600052601160045260246000fd5b600060001982036129ae576129ae612985565b5060010190565b634e487b7160e01b600052603260045260246000fd5b808201808211156104bf576104bf612985565b818103818111156104bf576104bf612985565b6000816000190483118215151615612a0b57612a0b612985565b500290565b634e487b7160e01b600052601260045260246000fd5b600082612a3557612a35612a10565b500490565b634e487b7160e01b600052602160045260246000fd5b828152604060208201526000612a696040830184612553565b949350505050565b60008251612a8381846020870161252f565b9190910192915050565b600060208284031215612a9f57600080fd5b5051919050565b60006001600160a01b03808716835280861660208401525083604083015260806060830152612ad86080830184612553565b9695505050505050565b600060208284031215612af457600080fd5b815161061a816124f9565b600082612b0e57612b0e612a10565b500690565b600081612b2257612b22612985565b50600019019056fe646174613a6170706c69636174696f6e2f6a736f6e2c7b226e616d65223a22307830303030303030303030303030303030303030303030303030303030303030303030303030303030222c226465736372697074696f6e223a22426c6f636b7925323030783030303030303030303030303030303030303030303030303030303030303030303030303030303025323067656e6572617465642532306f6e2d636861696e222c22696d616765223a22646174613a696d6167652f7376672b786d6c2c3c737667253230786d6c6e733d27687474703a2f2f7777772e77332e6f72672f323030302f7376672725323073686170652d72656e646572696e673d27637269737045646765732725323077696474683d27353132272532306865696768743d27353132273e3c672532307472616e73666f726d3d277363616c6528363429273e3c7061746825323066696c6c3d2768736c283030302c303030252c303030252927253230643d274d302c3068387638682d387a272f3e3c7061746825323066696c6c3d2768736c283030302c303030252c303030252927253230643d274d302c3068317630682d317a6d312c3068317630682d317a6d312c3068317630682d317a6d312c3068317630682d317a6d312c3068317630682d317a6d312c3068317630682d317a6d312c3068317630682d317a6d312c3068317630682d317a6d2d382c316d312c3068317630682d317a6d312c3068317630682d317a6d312c3068317630682d317a6d312c3068317630682d317a6d312c3068317630682d317a6d312c3068317630682d317a6d312c3068317630682d317a6d312c3068317630682d317a6d2d382c316d312c3068317630682d317a6d312c3068317630682d317a6d312c3068317630682d317a6d312c3068317630682d317a6d312c3068317630682d317a6d312c3068317630682d317a6d312c3068317630682d317a6d312c3068317630682d317a6d2d382c316d312c3068317630682d317a6d312c3068317630682d317a6d312c3068317630682d317a6d312c3068317630682d317a6d312c3068317630682d317a6d312c3068317630682d317a6d312c3068317630682d317a6d312c3068317630682d317a6d2d382c316d312c3068317630682d317a6d312c3068317630682d317a6d312c3068317630682d317a6d312c3068317630682d317a6d312c3068317630682d317a6d312c3068317630682d317a6d312c3068317630682d317a6d312c3068317630682d317a6d2d382c316d312c3068317630682d317a6d312c3068317630682d317a6d312c3068317630682d317a6d312c3068317630682d317a6d312c3068317630682d317a6d312c3068317630682d317a6d312c3068317630682d317a6d312c3068317630682d317a6d2d382c316d312c3068317630682d317a6d312c3068317630682d317a6d312c3068317630682d317a6d312c3068317630682d317a6d312c3068317630682d317a6d312c3068317630682d317a6d312c3068317630682d317a6d312c3068317630682d317a6d2d382c316d312c3068317630682d317a6d312c3068317630682d317a6d312c3068317630682d317a6d312c3068317630682d317a6d312c3068317630682d317a6d312c3068317630682d317a6d312c3068317630682d317a6d312c3068317630682d317a272f3e3c7061746825323066696c6c3d2768736c283030302c303030252c303030252927253230643d274d302c3068317630682d317a6d312c3068317630682d317a6d312c3068317630682d317a6d312c3068317630682d317a6d312c3068317630682d317a6d312c3068317630682d317a6d312c3068317630682d317a6d312c3068317630682d317a6d2d382c316d312c3068317630682d317a6d312c3068317630682d317a6d312c3068317630682d317a6d312c3068317630682d317a6d312c3068317630682d317a6d312c3068317630682d317a6d312c3068317630682d317a6d312c3068317630682d317a6d2d382c316d312c3068317630682d317a6d312c3068317630682d317a6d312c3068317630682d317a6d312c3068317630682d317a6d312c3068317630682d317a6d312c3068317630682d317a6d312c3068317630682d317a6d312c3068317630682d317a6d2d382c316d312c3068317630682d317a6d312c3068317630682d317a6d312c3068317630682d317a6d312c3068317630682d317a6d312c3068317630682d317a6d312c3068317630682d317a6d312c3068317630682d317a6d312c3068317630682d317a6d2d382c316d312c3068317630682d317a6d312c3068317630682d317a6d312c3068317630682d317a6d312c3068317630682d317a6d312c3068317630682d317a6d312c3068317630682d317a6d312c3068317630682d317a6d312c3068317630682d317a6d2d382c316d312c3068317630682d317a6d312c3068317630682d317a6d312c3068317630682d317a6d312c3068317630682d317a6d312c3068317630682d317a6d312c3068317630682d317a6d312c3068317630682d317a6d312c3068317630682d317a6d2d382c316d312c3068317630682d317a6d312c3068317630682d317a6d312c3068317630682d317a6d312c3068317630682d317a6d312c3068317630682d317a6d312c3068317630682d317a6d312c3068317630682d317a6d312c3068317630682d317a6d2d382c316d312c3068317630682d317a6d312c3068317630682d317a6d312c3068317630682d317a6d312c3068317630682d317a6d312c3068317630682d317a6d312c3068317630682d317a6d312c3068317630682d317a6d312c3068317630682d317a272f3e3c2f673e3c2f7376673e227d307830303030303030303030303030303030303030303030303030303030303030303030303030303030a264697066735822122021204815570208df081217dacb0e74493549c9aa38f1f85fecc69bf0f82244ea64736f6c63430008100033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "approve(address,uint256)": {
        "params": {
          "operator": "The address receiving the approval.",
          "tokenId": "The id of the token."
        }
      },
      "balanceOf(address)": {
        "params": {
          "owner": "The address to look for."
        },
        "returns": {
          "balance": "The number of tokens owned by the address."
        }
      },
      "eip712Domain()": {
        "returns": {
          "chainId": "EIP-712 chainId",
          "extensions": "A list of EIP numbers that specify additional fields in the domain. The method to obtain the value for each of these additional fields and any conditions for inclusion are expected to be specified in the respective EIP. The value of fields does not affect their inclusion.",
          "fields": "A bit map where bit i is set to 1 if and only if domain field i is present (0 ≤ i ≤ 4). Bits are read from least significant to most significant, and fields are indexed in the order that is specified by EIP-712, identical to the order in which they are listed in the function type.",
          "name": "EIP-712 name",
          "salt": "EIP-712 salt",
          "verifyingContract": "EIP-712 name verifyingContract",
          "version": "EIP-712 version"
        }
      },
      "emitSelfTransferEvent(uint256)": {
        "params": {
          "id": "tokenID to emit the event for."
        }
      },
      "getApproved(uint256)": {
        "params": {
          "tokenId": "The id of the token."
        },
        "returns": {
          "operator": "The address of the operator."
        }
      },
      "isApprovedForAll(address,address)": {
        "params": {
          "operator": "The address of the operator.",
          "owner": "The address of the owner."
        },
        "returns": {
          "isOperator": "The status of the approval."
        }
      },
      "nonces(address)": {
        "params": {
          "account": "account to query"
        },
        "returns": {
          "nonce": "account's nonce"
        }
      },
      "nonces(uint256)": {
        "params": {
          "tokenId": "token id"
        },
        "returns": {
          "nonce": "token nonce"
        }
      },
      "ownerAndLastTransferBlockNumberList(uint256[])": {
        "params": {
          "ids": "The list of token ids to check."
        },
        "returns": {
          "ownersData": "The list of (owner, lastTransferBlockNumber) for each ids given as input."
        }
      },
      "ownerAndLastTransferBlockNumberOf(uint256)": {
        "params": {
          "id": "The id of the token."
        },
        "returns": {
          "blockNumber": "The blocknumber at which the last transfer of that id happened.",
          "owner": "The address of the token owner."
        }
      },
      "ownerOf(uint256)": {
        "params": {
          "tokenId": "The id of the token."
        },
        "returns": {
          "owner": "The address of the token owner."
        }
      },
      "permit(address,uint256,uint256,bytes)": {
        "details": "Anyone can call this to approve `spender`, even a third-party",
        "params": {
          "deadline": "the deadline for the permit to be used",
          "signature": "permit",
          "spender": "the actor to approve",
          "tokenId": "the token id"
        }
      },
      "permitForAll(address,address,uint256,bytes)": {
        "details": "Anyone can call this to approve `spender`, even a third-party",
        "params": {
          "deadline": "the deadline for the permit to be used",
          "signature": "permit",
          "signer": "the one giving permission",
          "spender": "the actor to approve"
        }
      },
      "safeTransferFrom(address,address,uint256)": {
        "params": {
          "from": "The send of the token.",
          "to": "The recipient of the token.",
          "tokenId": "The id of the token."
        }
      },
      "safeTransferFrom(address,address,uint256,bytes)": {
        "params": {
          "data": "Additional data.",
          "from": "The sender of the token.",
          "to": "The recipient of the token.",
          "tokenId": "The id of the token."
        }
      },
      "setApprovalForAll(address,bool)": {
        "params": {
          "approved": "The determination of the approval.",
          "operator": "The address receiving the approval."
        }
      },
      "supportsInterface(bytes4)": {
        "details": "Interface identification is specified in ERC-165. This function  uses less than 30,000 gas.",
        "params": {
          "interfaceID": "The interface identifier, as specified in ERC-165"
        },
        "returns": {
          "_0": "`true` if the contract implements `interfaceID` and  `interfaceID` is not 0xffffffff, `false` otherwise"
        }
      },
      "tokenNonces(uint256)": {
        "params": {
          "tokenId": "token id"
        },
        "returns": {
          "nonce": "token nonce"
        }
      },
      "tokenURI(uint256)": {
        "details": "Throws if `_tokenId` is not a valid NFT. URIs are defined in RFC  3986. The URI may point to a JSON file that conforms to the \"ERC721  Metadata JSON Schema\"."
      },
      "transferFrom(address,address,uint256)": {
        "params": {
          "from": "The sender of the token.",
          "to": "The recipient of the token.",
          "tokenId": "The id of the token."
        }
      }
    },
    "title": "Blockies on-chain",
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "DOMAIN_SEPARATOR()": {
        "notice": "EIP-712 Domain separator hash"
      },
      "approve(address,uint256)": {
        "notice": "Approve an operator to transfer a specific token on the senders behalf."
      },
      "balanceOf(address)": {
        "notice": "Get the number of tokens owned by an address."
      },
      "eip712Domain()": {
        "notice": "The return values of this function MUST describe the domain separator that is used for verification of EIP-712 signatures in the contract. They describe both the form of the EIP712Domain struct (i.e., which of the optional fields and extensions are present) and the value of each field, as follows."
      },
      "emitSelfTransferEvent(uint256)": {
        "notice": "emit Transfer event so that indexer can pick it up.   This can be called by anyone at any time and does not change state   As such it keeps the token's operator-approval state and will re-emit an Approval event to indicate that."
      },
      "getApproved(uint256)": {
        "notice": "Get the approved operator for a specific token."
      },
      "isApprovedForAll(address,address)": {
        "notice": "Check if the sender approved the operator."
      },
      "name()": {
        "notice": "A descriptive name for a collection of NFTs in this contract"
      },
      "nonces(address)": {
        "notice": "Allows to retrieve current nonce for the account"
      },
      "nonces(uint256)": {
        "notice": "Allows to retrieve current nonce for token"
      },
      "ownerAndLastTransferBlockNumberList(uint256[])": {
        "notice": "Get the list of owner of a token and the blockNumber of its last transfer, useful to voting mechanism."
      },
      "ownerAndLastTransferBlockNumberOf(uint256)": {
        "notice": "Get the owner of a token and the blockNumber of the last transfer, useful to voting mechanism."
      },
      "ownerOf(uint256)": {
        "notice": "Get the owner of a token."
      },
      "permit(address,uint256,uint256,bytes)": {
        "notice": "function to be called by anyone to approve `spender` using a Permit signature"
      },
      "permitForAll(address,address,uint256,bytes)": {
        "notice": "function to be called by anyone to approve `spender` using a Permit signature"
      },
      "safeTransferFrom(address,address,uint256)": {
        "notice": "Transfer a token between 2 addresses letting the receiver know of the transfer."
      },
      "safeTransferFrom(address,address,uint256,bytes)": {
        "notice": "Transfer a token between 2 addresses letting the receiver knows of the transfer."
      },
      "setApprovalForAll(address,bool)": {
        "notice": "Set the approval for an operator to manage all the tokens of the sender."
      },
      "supportsInterface(bytes4)": {
        "notice": "Query if a contract implements an interface"
      },
      "symbol()": {
        "notice": "An abbreviated name for NFTs in this contract"
      },
      "tokenNonces(uint256)": {
        "notice": "Allows to retrieve current nonce for token"
      },
      "tokenURI(uint256)": {
        "notice": "A distinct Uniform Resource Identifier (URI) for a given asset."
      },
      "transferFrom(address,address,uint256)": {
        "notice": "Transfer a token between 2 addresses."
      }
    },
    "notice": "Blockies as NFT. Each ethereum address owns its own one. No minting needed. You can even use Permit (EIP-4494) to approve contracts via signatures. Note though that unless you transfer or call `emitSelfTransferEvent` indexer would not know of your token.",
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 719,
        "contract": "src/Blockies.sol:Blockies",
        "label": "_owners",
        "offset": 0,
        "slot": "0",
        "type": "t_mapping(t_uint256,t_uint256)"
      },
      {
        "astId": 723,
        "contract": "src/Blockies.sol:Blockies",
        "label": "_balances",
        "offset": 0,
        "slot": "1",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 729,
        "contract": "src/Blockies.sol:Blockies",
        "label": "_operatorsForAll",
        "offset": 0,
        "slot": "2",
        "type": "t_mapping(t_address,t_mapping(t_address,t_bool))"
      },
      {
        "astId": 733,
        "contract": "src/Blockies.sol:Blockies",
        "label": "_operators",
        "offset": 0,
        "slot": "3",
        "type": "t_mapping(t_uint256,t_address)"
      },
      {
        "astId": 271,
        "contract": "src/Blockies.sol:Blockies",
        "label": "_userNonces",
        "offset": 0,
        "slot": "4",
        "type": "t_mapping(t_address,t_uint256)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_address,t_mapping(t_address,t_bool))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(address => bool))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_bool)"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_uint256,t_address)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => address)",
        "numberOfBytes": "32",
        "value": "t_address"
      },
      "t_mapping(t_uint256,t_uint256)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}