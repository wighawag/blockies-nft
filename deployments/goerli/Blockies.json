{
  "address": "0x8123f6c85B9afcD70420394DF5414fc15BdDc7cA",
  "abi": [
    {
      "inputs": [],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "approved",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "Approval",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "approved",
          "type": "bool"
        }
      ],
      "name": "ApprovalForAll",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "Transfer",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "DOMAIN_SEPARATOR",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "PERMIT_FOR_ALL_TYPEHASH",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "PERMIT_TYPEHASH",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        }
      ],
      "name": "approve",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        }
      ],
      "name": "balanceOf",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "balance",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "eip712Domain",
      "outputs": [
        {
          "internalType": "bytes1",
          "name": "",
          "type": "bytes1"
        },
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        },
        {
          "internalType": "uint256[]",
          "name": "",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        }
      ],
      "name": "getApproved",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "operator",
          "type": "address"
        }
      ],
      "name": "isApprovedForAll",
      "outputs": [
        {
          "internalType": "bool",
          "name": "isOperator",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "name",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        }
      ],
      "name": "nonces",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "nonce",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "nonces",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "nonce",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256[]",
          "name": "ids",
          "type": "uint256[]"
        }
      ],
      "name": "ownerAndLastTransferBlockNumberList",
      "outputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "owner",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "lastTransferBlockNumber",
              "type": "uint256"
            }
          ],
          "internalType": "struct BasicERC721.OwnerData[]",
          "name": "ownersData",
          "type": "tuple[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        }
      ],
      "name": "ownerOf",
      "outputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "spender",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "deadline",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "sig",
          "type": "bytes"
        }
      ],
      "name": "permit",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "signer",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "spender",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "deadline",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "sig",
          "type": "bytes"
        }
      ],
      "name": "permitForAll",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        }
      ],
      "name": "registerIfNotAlready",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        }
      ],
      "name": "safeTransferFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "data",
          "type": "bytes"
        }
      ],
      "name": "safeTransferFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "approved",
          "type": "bool"
        }
      ],
      "name": "setApprovalForAll",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes4",
          "name": "id",
          "type": "bytes4"
        }
      ],
      "name": "supportsInterface",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "symbol",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        }
      ],
      "name": "tokenNonces",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "nonce",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        }
      ],
      "name": "tokenURI",
      "outputs": [
        {
          "internalType": "string",
          "name": "str",
          "type": "string"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalSupply",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        }
      ],
      "name": "transferFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0xd8d3480027db03db0d35783990e3f005e8f64984ae3f274bb3c8863d90033328",
  "receipt": {
    "to": null,
    "from": "0x61c461EcC993aaDEB7e4b47E96d1B8cC37314B20",
    "contractAddress": "0x8123f6c85B9afcD70420394DF5414fc15BdDc7cA",
    "transactionIndex": 69,
    "gasUsed": "2864598",
    "logsBloom": "0x
    "blockHash": "0x9a3be0463f03147d11d503e7f1a083727ffbc6249d224322c5e07f92caf1c538",
    "transactionHash": "0xd8d3480027db03db0d35783990e3f005e8f64984ae3f274bb3c8863d90033328",
    "logs": [],
    "blockNumber": 7865409,
    "cumulativeGasUsed": "13411812",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "072910eb8b97199f79f0c3ed0fe3e5ad",
  "metadata": "{\"compiler\":{\"version\":\"0.8.16+commit.07a7930e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"approved\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"ApprovalForAll\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"DOMAIN_SEPARATOR\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"PERMIT_FOR_ALL_TYPEHASH\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"PERMIT_TYPEHASH\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"balance\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"eip712Domain\",\"outputs\":[{\"internalType\":\"bytes1\",\"name\":\"\",\"type\":\"bytes1\"},{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"},{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"getApproved\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"isApprovedForAll\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"isOperator\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"nonces\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"nonce\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"nonces\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"nonce\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"ids\",\"type\":\"uint256[]\"}],\"name\":\"ownerAndLastTransferBlockNumberList\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"lastTransferBlockNumber\",\"type\":\"uint256\"}],\"internalType\":\"struct BasicERC721.OwnerData[]\",\"name\":\"ownersData\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"ownerOf\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"sig\",\"type\":\"bytes\"}],\"name\":\"permit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"signer\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"sig\",\"type\":\"bytes\"}],\"name\":\"permitForAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"registerIfNotAlready\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"setApprovalForAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"id\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"tokenNonces\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"nonce\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"tokenURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"str\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"approve(address,uint256)\":{\"params\":{\"id\":\"The id of the token.\",\"operator\":\"The address receiving the approval.\"}},\"balanceOf(address)\":{\"params\":{\"owner\":\"The address to look for.\"},\"returns\":{\"balance\":\"The number of tokens owned by the address.\"}},\"getApproved(uint256)\":{\"params\":{\"id\":\"The id of the token.\"},\"returns\":{\"_0\":\"The address of the operator.\"}},\"isApprovedForAll(address,address)\":{\"params\":{\"operator\":\"The address of the operator.\",\"owner\":\"The address of the owner.\"},\"returns\":{\"isOperator\":\"The status of the approval.\"}},\"nonces(address)\":{\"params\":{\"account\":\"the account to query\"},\"returns\":{\"nonce\":\"nonce\"}},\"nonces(uint256)\":{\"params\":{\"id\":\"token id to query\"},\"returns\":{\"nonce\":\"nonce\"}},\"ownerAndLastTransferBlockNumberList(uint256[])\":{\"params\":{\"ids\":\"The list of token ids to check.\"},\"returns\":{\"ownersData\":\"The list of (owner, lastTransferBlockNumber) for each ids given as input.\"}},\"ownerOf(uint256)\":{\"params\":{\"id\":\"The id of the token.\"},\"returns\":{\"owner\":\"The address of the token owner.\"}},\"safeTransferFrom(address,address,uint256)\":{\"params\":{\"from\":\"The send of the token.\",\"id\":\"The id of the token.\",\"to\":\"The recipient of the token.\"}},\"safeTransferFrom(address,address,uint256,bytes)\":{\"params\":{\"data\":\"Additional data.\",\"from\":\"The sender of the token.\",\"id\":\"The id of the token.\",\"to\":\"The recipient of the token.\"}},\"setApprovalForAll(address,bool)\":{\"params\":{\"approved\":\"The determination of the approval.\",\"operator\":\"The address receiving the approval.\"}},\"tokenNonces(uint256)\":{\"params\":{\"id\":\"token id to query\"},\"returns\":{\"nonce\":\"nonce\"}},\"totalSupply()\":{\"returns\":{\"_0\":\"A count of valid NFTs tracked by this contract, where each one of  them has an assigned and queryable owner not equal to the zero address\"}},\"transferFrom(address,address,uint256)\":{\"params\":{\"from\":\"The sender of the token.\",\"id\":\"The id of the token.\",\"to\":\"The recipient of the token.\"}}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"approve(address,uint256)\":{\"notice\":\"Approve an operator to transfer a specific token on the senders behalf.\"},\"balanceOf(address)\":{\"notice\":\"Get the number of tokens owned by an address.\"},\"getApproved(uint256)\":{\"notice\":\"Get the approved operator for a specific token.\"},\"isApprovedForAll(address,address)\":{\"notice\":\"Check if the sender approved the operator.\"},\"nonces(address)\":{\"notice\":\"return the account nonce, used for approvalForAll permit or other account related matter\"},\"nonces(uint256)\":{\"notice\":\"return the token nonce, used for individual approve permit or other token related matter\"},\"ownerAndLastTransferBlockNumberList(uint256[])\":{\"notice\":\"Get the list of owner of a token and the blockNumber of its last transfer, useful to voting mechanism.\"},\"ownerOf(uint256)\":{\"notice\":\"Get the owner of a token.\"},\"safeTransferFrom(address,address,uint256)\":{\"notice\":\"Transfer a token between 2 addresses letting the receiver know of the transfer.\"},\"safeTransferFrom(address,address,uint256,bytes)\":{\"notice\":\"Transfer a token between 2 addresses letting the receiver knows of the transfer.\"},\"setApprovalForAll(address,bool)\":{\"notice\":\"Set the approval for an operator to manage all the tokens of the sender.\"},\"tokenNonces(uint256)\":{\"notice\":\"return the token nonce, used for individual approve permit or other token related matter\"},\"totalSupply()\":{\"notice\":\"Count NFTs tracked by this contract\"},\"transferFrom(address,address,uint256)\":{\"notice\":\"Transfer a token between 2 addresses.\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"src/Blockies.sol\":\"Blockies\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":2000},\"remappings\":[]},\"sources\":{\"solidity-kit/solc_0.8/ERC165/implementations/UsingERC165Internal.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nabstract contract UsingERC165Internal {\\n\\tfunction supportsInterface(bytes4) public view virtual returns (bool) {\\n\\t\\treturn false;\\n\\t}\\n}\\n\",\"keccak256\":\"0x1f504fdeed6f6f168c6ecdeeddc26950897315b61be0eeef571933276dfb37bf\",\"license\":\"MIT\"},\"solidity-kit/solc_0.8/ERC165/interfaces/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface IERC165 {\\n\\tfunction supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x4aa7a555b7b56ba401a6aa5fd35222786b3b843dd2feb518e723e08ddd6341ec\",\"license\":\"MIT\"},\"solidity-kit/solc_0.8/ERC712/implementations/ImplementingExternalDomainSeparator.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nabstract contract ImplementingExternalDomainSeparator {\\n\\tfunction DOMAIN_SEPARATOR() public view virtual returns (bytes32);\\n}\\n\",\"keccak256\":\"0x4c2570050db246c578e3bb1438270e48574bfd997b10d22f95fd47d6c9d27878\",\"license\":\"MIT\"},\"solidity-kit/solc_0.8/ERC712/implementations/Named.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nabstract contract Named {\\n\\tfunction name() public view virtual returns (string memory);\\n}\\n\",\"keccak256\":\"0x3a838eb41c5929f1bff0ecfbc0a9bb9b7b6e3ab2a6efddf91ac4485a575b7194\",\"license\":\"MIT\"},\"solidity-kit/solc_0.8/ERC712/implementations/UsingERC712.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"../interfaces/IERC5267.sol\\\";\\n\\nabstract contract UsingERC712 is IERC5267 {}\\n\",\"keccak256\":\"0x5b2d5c3dd2ebe8dedf66a6d1a8b01918a42dfe3bc00778dca06fdf7686b7699e\",\"license\":\"MIT\"},\"solidity-kit/solc_0.8/ERC712/implementations/UsingERC712WithDynamicChainId.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"./UsingERC712.sol\\\";\\nimport \\\"./Named.sol\\\";\\n\\nabstract contract UsingERC712WithDynamicChainId is UsingERC712, Named {\\n\\tuint256 private immutable _deploymentChainId;\\n\\tbytes32 private immutable _deploymentDomainSeparator;\\n\\n\\tconstructor(address verifyingContract) {\\n\\t\\tuint256 chainId;\\n\\t\\tassembly {\\n\\t\\t\\tchainId := chainid()\\n\\t\\t}\\n\\n\\t\\t_deploymentChainId = chainId;\\n\\t\\t_deploymentDomainSeparator = _calculateDomainSeparator(\\n\\t\\t\\tchainId,\\n\\t\\t\\tverifyingContract == address(0) ? address(this) : verifyingContract\\n\\t\\t);\\n\\t}\\n\\n\\tfunction _currentDomainSeparator() internal view returns (bytes32) {\\n\\t\\tuint256 chainId;\\n\\t\\tassembly {\\n\\t\\t\\tchainId := chainid()\\n\\t\\t}\\n\\n\\t\\t// in case a fork happen, to support the chain that had to change its chainId, we compute the domain operator\\n\\t\\treturn\\n\\t\\t\\tchainId == _deploymentChainId\\n\\t\\t\\t\\t? _deploymentDomainSeparator\\n\\t\\t\\t\\t: _calculateDomainSeparator(chainId, address(this));\\n\\t}\\n\\n\\t/// @dev Calculate the Domain Separator used to compute ERC712 hash\\n\\tfunction _calculateDomainSeparator(uint256 chainId, address verifyingContract) private view returns (bytes32) {\\n\\t\\treturn\\n\\t\\t\\tkeccak256(\\n\\t\\t\\t\\tabi.encode(\\n\\t\\t\\t\\t\\tkeccak256(\\\"EIP712Domain(string name,uint256 chainId,address verifyingContract)\\\"),\\n\\t\\t\\t\\t\\tkeccak256(bytes(name())),\\n\\t\\t\\t\\t\\tchainId,\\n\\t\\t\\t\\t\\tverifyingContract\\n\\t\\t\\t\\t)\\n\\t\\t\\t);\\n\\t}\\n\\n\\tfunction eip712Domain()\\n\\t\\texternal\\n\\t\\tview\\n\\t\\tvirtual\\n\\t\\toverride\\n\\t\\treturns (\\n\\t\\t\\tbytes1,\\n\\t\\t\\tstring memory,\\n\\t\\t\\tstring memory,\\n\\t\\t\\tuint256,\\n\\t\\t\\taddress,\\n\\t\\t\\tbytes32,\\n\\t\\t\\tuint256[] memory\\n\\t\\t)\\n\\t{\\n\\t\\tuint256 chainId;\\n\\t\\tassembly {\\n\\t\\t\\tchainId := chainid()\\n\\t\\t}\\n\\t\\t// 0x0D == 01101 (name, , chainId, verifyingContract)\\n\\t\\treturn (0x0D, name(), \\\"\\\", chainId, address(this), bytes32(0), new uint256[](0));\\n\\t}\\n}\\n\",\"keccak256\":\"0xbaa28b21280d608d4b9779e78892147647c1856bd4ccc7bccb35ca579f55bbda\",\"license\":\"MIT\"},\"solidity-kit/solc_0.8/ERC712/interfaces/IERC5267.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\ninterface IERC5267 {\\n\\tfunction eip712Domain()\\n\\t\\texternal\\n\\t\\tview\\n\\t\\treturns (\\n\\t\\t\\tbytes1 fields,\\n\\t\\t\\tstring memory name,\\n\\t\\t\\tstring memory version,\\n\\t\\t\\tuint256 chainId,\\n\\t\\t\\taddress verifyingContract,\\n\\t\\t\\tbytes32 salt,\\n\\t\\t\\tuint256[] memory extensions\\n\\t\\t);\\n}\\n\",\"keccak256\":\"0x572a964d86cedc3f3995137e976d6eae147bbd3a68a4cba6b3ba36803769dc34\",\"license\":\"MIT\"},\"solidity-kit/solc_0.8/ERC721/ERC4494/implementations/UsingERC4494Permit.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../implementations/ImplementingERC721Internal.sol\\\";\\nimport \\\"../../../ERC165/implementations/UsingERC165Internal.sol\\\";\\nimport \\\"../interfaces/IERC4494.sol\\\";\\nimport \\\"../../../ERC712/implementations/UsingERC712.sol\\\";\\nimport \\\"../../../ERC712/implementations/ImplementingExternalDomainSeparator.sol\\\";\\n\\nimport \\\"../../..//openzeppelin/contracts/utils/cryptography/SignatureChecker.sol\\\";\\nimport \\\"../../../openzeppelin/contracts/utils/Address.sol\\\";\\n\\nabstract contract UsingERC4494Permit is\\n\\tIERC4494,\\n\\tImplementingERC721Internal,\\n\\tUsingERC165Internal,\\n\\tImplementingExternalDomainSeparator,\\n\\tUsingERC712\\n{\\n\\tbytes32 public constant PERMIT_TYPEHASH =\\n\\t\\tkeccak256(\\\"Permit(address spender,uint256 tokenId,uint256 nonce,uint256 deadline)\\\");\\n\\tbytes32 public constant PERMIT_FOR_ALL_TYPEHASH =\\n\\t\\tkeccak256(\\\"PermitForAll(address owner,address spender,uint256 nonce,uint256 deadline)\\\");\\n\\n\\tmapping(address => uint256) internal _userNonces;\\n\\n\\t/// @notice return the account nonce, used for approvalForAll permit or other account related matter\\n\\t/// @param account the account to query\\n\\t/// @return nonce\\n\\tfunction nonces(address account) external view virtual returns (uint256 nonce) {\\n\\t\\treturn _userNonces[account];\\n\\t}\\n\\n\\t/// @notice return the token nonce, used for individual approve permit or other token related matter\\n\\t/// @param id token id to query\\n\\t/// @return nonce\\n\\tfunction nonces(uint256 id) public view virtual returns (uint256 nonce) {\\n\\t\\t(address owner, uint256 blockNumber) = _ownerAndBlockNumberOf(id);\\n\\t\\trequire(owner != address(0), \\\"NONEXISTENT_TOKEN\\\");\\n\\t\\treturn blockNumber;\\n\\t}\\n\\n\\t/// @notice return the token nonce, used for individual approve permit or other token related matter\\n\\t/// @param id token id to query\\n\\t/// @return nonce\\n\\tfunction tokenNonces(uint256 id) external view returns (uint256 nonce) {\\n\\t\\treturn nonces(id);\\n\\t}\\n\\n\\tfunction permit(\\n\\t\\taddress spender,\\n\\t\\tuint256 tokenId,\\n\\t\\tuint256 deadline,\\n\\t\\tbytes memory sig\\n\\t) external {\\n\\t\\trequire(deadline >= block.timestamp, \\\"PERMIT_DEADLINE_EXPIRED\\\");\\n\\n\\t\\t(address owner, uint256 blockNumber) = _ownerAndBlockNumberOf(tokenId);\\n\\t\\trequire(owner != address(0), \\\"NONEXISTENT_TOKEN\\\");\\n\\n\\t\\t// We use blockNumber as nonce as we already store it per tokens. It can thus act as an increasing transfer counter.\\n\\t\\t// while technically multiple transfer could happen in the same block, the signed message would be using a previous block.\\n\\t\\t// And the transfer would use then a more recent blockNumber, invalidating that message when transfer is executed.\\n\\t\\t_requireValidPermit(owner, spender, tokenId, deadline, blockNumber, sig);\\n\\n\\t\\t_approveFor(owner, blockNumber, spender, tokenId);\\n\\t}\\n\\n\\tfunction permitForAll(\\n\\t\\taddress signer,\\n\\t\\taddress spender,\\n\\t\\tuint256 deadline,\\n\\t\\tbytes memory sig\\n\\t) external {\\n\\t\\trequire(deadline >= block.timestamp, \\\"PERMIT_DEADLINE_EXPIRED\\\");\\n\\n\\t\\t_requireValidPermitForAll(signer, spender, deadline, _userNonces[signer]++, sig);\\n\\n\\t\\t_setApprovalForAll(signer, spender, true);\\n\\t}\\n\\n\\t/// @notice Check if the contract supports an interface.\\n\\t/// @param id The id of the interface.\\n\\t/// @return Whether the interface is supported.\\n\\tfunction supportsInterface(bytes4 id) public view virtual override(IERC165, UsingERC165Internal) returns (bool) {\\n\\t\\treturn\\n\\t\\t\\tsuper.supportsInterface(id) ||\\n\\t\\t\\tid == type(IERC4494).interfaceId ||\\n\\t\\t\\tid == type(IERC4494Alternative).interfaceId;\\n\\t}\\n\\n\\tfunction DOMAIN_SEPARATOR()\\n\\t\\tpublic\\n\\t\\tview\\n\\t\\tvirtual\\n\\t\\toverride(IERC4494, ImplementingExternalDomainSeparator)\\n\\t\\treturns (bytes32);\\n\\n\\t// -------------------------------------------------------- INTERNAL --------------------------------------------------------------------\\n\\n\\tfunction _requireValidPermit(\\n\\t\\taddress signer,\\n\\t\\taddress spender,\\n\\t\\tuint256 id,\\n\\t\\tuint256 deadline,\\n\\t\\tuint256 nonce,\\n\\t\\tbytes memory sig\\n\\t) internal view {\\n\\t\\tbytes32 digest = keccak256(\\n\\t\\t\\tabi.encodePacked(\\n\\t\\t\\t\\t\\\"\\\\x19\\\\x01\\\",\\n\\t\\t\\t\\tDOMAIN_SEPARATOR(),\\n\\t\\t\\t\\tkeccak256(abi.encode(PERMIT_TYPEHASH, spender, id, nonce, deadline))\\n\\t\\t\\t)\\n\\t\\t);\\n\\t\\trequire(Openzeppelin_SignatureChecker.isValidSignatureNow(signer, digest, sig), \\\"INVALID_SIGNATURE\\\");\\n\\t}\\n\\n\\tfunction _requireValidPermitForAll(\\n\\t\\taddress signer,\\n\\t\\taddress spender,\\n\\t\\tuint256 deadline,\\n\\t\\tuint256 nonce,\\n\\t\\tbytes memory sig\\n\\t) internal view {\\n\\t\\tbytes32 digest = keccak256(\\n\\t\\t\\tabi.encodePacked(\\n\\t\\t\\t\\t\\\"\\\\x19\\\\x01\\\",\\n\\t\\t\\t\\tDOMAIN_SEPARATOR(),\\n\\t\\t\\t\\tkeccak256(abi.encode(PERMIT_FOR_ALL_TYPEHASH, signer, spender, nonce, deadline))\\n\\t\\t\\t)\\n\\t\\t);\\n\\t\\trequire(Openzeppelin_SignatureChecker.isValidSignatureNow(signer, digest, sig), \\\"INVALID_SIGNATURE\\\");\\n\\t}\\n}\\n\",\"keccak256\":\"0xf4ffe0c32cfa2279aacd774c3f5d199e84916caf20f8fba2027bd5d25bc39cf2\",\"license\":\"MIT\"},\"solidity-kit/solc_0.8/ERC721/ERC4494/implementations/UsingERC4494PermitWithDynamicChainId.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"./UsingERC4494Permit.sol\\\";\\nimport \\\"../../../ERC712/implementations/UsingERC712WithDynamicChainId.sol\\\";\\n\\nabstract contract UsingERC4494PermitWithDynamicChainId is UsingERC4494Permit, UsingERC712WithDynamicChainId {\\n\\tfunction DOMAIN_SEPARATOR() public view virtual override returns (bytes32) {\\n\\t\\treturn _currentDomainSeparator();\\n\\t}\\n}\\n\",\"keccak256\":\"0x9cbcedd14867603161e402bcc7ab7fa506bc77e07cc9c3afad8f03f5862d137e\",\"license\":\"MIT\"},\"solidity-kit/solc_0.8/ERC721/ERC4494/interfaces/IERC4494.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../../ERC165/interfaces/IERC165.sol\\\";\\n\\ninterface IERC4494 is IERC165 {\\n\\tfunction DOMAIN_SEPARATOR() external view returns (bytes32);\\n\\n\\t/// @notice Allows to retrieve current nonce for token\\n\\t/// @param tokenId token id\\n\\t/// @return current token nonce\\n\\tfunction nonces(uint256 tokenId) external view returns (uint256);\\n\\n\\t/// @notice function to be called by anyone to approve `spender` using a Permit signature\\n\\t/// @dev Anyone can call this to approve `spender`, even a third-party\\n\\t/// @param spender the actor to approve\\n\\t/// @param tokenId the token id\\n\\t/// @param deadline the deadline for the permit to be used\\n\\t/// @param signature permit\\n\\tfunction permit(\\n\\t\\taddress spender,\\n\\t\\tuint256 tokenId,\\n\\t\\tuint256 deadline,\\n\\t\\tbytes memory signature\\n\\t) external;\\n}\\n\\ninterface IERC4494Alternative is IERC165 {\\n\\tfunction DOMAIN_SEPARATOR() external view returns (bytes32);\\n\\n\\t/// @notice Allows to retrieve current nonce for token\\n\\t/// @param tokenId token id\\n\\t/// @return current token nonce\\n\\tfunction tokenNonces(uint256 tokenId) external view returns (uint256);\\n\\n\\t/// @notice function to be called by anyone to approve `spender` using a Permit signature\\n\\t/// @dev Anyone can call this to approve `spender`, even a third-party\\n\\t/// @param spender the actor to approve\\n\\t/// @param tokenId the token id\\n\\t/// @param deadline the deadline for the permit to be used\\n\\t/// @param signature permit\\n\\tfunction permit(\\n\\t\\taddress spender,\\n\\t\\tuint256 tokenId,\\n\\t\\tuint256 deadline,\\n\\t\\tbytes memory signature\\n\\t) external;\\n}\\n\",\"keccak256\":\"0xd6539f9339e724cfdf5a51561f3676c0c4af12882d2b1b2bb65f79368711feed\",\"license\":\"MIT\"},\"solidity-kit/solc_0.8/ERC721/implementations/BasicERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"../interfaces/IERC721Receiver.sol\\\";\\nimport \\\"../interfaces/IERC721.sol\\\";\\nimport \\\"./ImplementingERC721Internal.sol\\\";\\n\\nimport \\\"../../openzeppelin/contracts/utils/Address.sol\\\";\\n\\nabstract contract BasicERC721 is IERC721, ImplementingERC721Internal {\\n\\tusing Openzeppelin_Address for address;\\n\\n\\tbytes4 internal constant ERC721_RECEIVED = 0x150b7a02;\\n\\tbytes4 internal constant ERC165ID = 0x01ffc9a7;\\n\\n\\tuint256 internal constant OPERATOR_FLAG = 0x8000000000000000000000000000000000000000000000000000000000000000;\\n\\tuint256 internal constant NOT_OPERATOR_FLAG = 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF;\\n\\n\\tmapping(uint256 => uint256) internal _owners;\\n\\tmapping(address => uint256) internal _balances;\\n\\tmapping(address => mapping(address => bool)) internal _operatorsForAll;\\n\\tmapping(uint256 => address) internal _operators;\\n\\n\\t/// @notice Approve an operator to transfer a specific token on the senders behalf.\\n\\t/// @param operator The address receiving the approval.\\n\\t/// @param id The id of the token.\\n\\tfunction approve(address operator, uint256 id) external override {\\n\\t\\t(address owner, uint256 blockNumber) = _ownerAndBlockNumberOf(id);\\n\\t\\trequire(owner != address(0), \\\"NONEXISTENT_TOKEN\\\");\\n\\t\\trequire(msg.sender == owner || isApprovedForAll(owner, msg.sender), \\\"UNAUTHORIZED_APPROVAL\\\");\\n\\t\\t_approveFor(owner, blockNumber, operator, id);\\n\\t}\\n\\n\\t/// @notice Transfer a token between 2 addresses.\\n\\t/// @param from The sender of the token.\\n\\t/// @param to The recipient of the token.\\n\\t/// @param id The id of the token.\\n\\tfunction transferFrom(\\n\\t\\taddress from,\\n\\t\\taddress to,\\n\\t\\tuint256 id\\n\\t) external override {\\n\\t\\t(address owner, bool operatorEnabled) = _ownerAndOperatorEnabledOf(id);\\n\\t\\trequire(owner != address(0), \\\"NONEXISTENT_TOKEN\\\");\\n\\t\\trequire(owner == from, \\\"NOT_OWNER\\\");\\n\\t\\trequire(to != address(0), \\\"NOT_TO_ZEROADDRESS\\\");\\n\\t\\trequire(to != address(this), \\\"NOT_TO_THIS\\\");\\n\\t\\tif (msg.sender != from) {\\n\\t\\t\\trequire(\\n\\t\\t\\t\\t(operatorEnabled && _operators[id] == msg.sender) || isApprovedForAll(from, msg.sender),\\n\\t\\t\\t\\t\\\"UNAUTHORIZED_TRANSFER\\\"\\n\\t\\t\\t);\\n\\t\\t}\\n\\t\\t_transferFrom(from, to, id);\\n\\t}\\n\\n\\t/// @notice Transfer a token between 2 addresses letting the receiver know of the transfer.\\n\\t/// @param from The send of the token.\\n\\t/// @param to The recipient of the token.\\n\\t/// @param id The id of the token.\\n\\tfunction safeTransferFrom(\\n\\t\\taddress from,\\n\\t\\taddress to,\\n\\t\\tuint256 id\\n\\t) external override {\\n\\t\\tsafeTransferFrom(from, to, id, \\\"\\\");\\n\\t}\\n\\n\\t/// @notice Set the approval for an operator to manage all the tokens of the sender.\\n\\t/// @param operator The address receiving the approval.\\n\\t/// @param approved The determination of the approval.\\n\\tfunction setApprovalForAll(address operator, bool approved) external override {\\n\\t\\t_setApprovalForAll(msg.sender, operator, approved);\\n\\t}\\n\\n\\t/// @notice Get the number of tokens owned by an address.\\n\\t/// @param owner The address to look for.\\n\\t/// @return balance The number of tokens owned by the address.\\n\\tfunction balanceOf(address owner) public view virtual override returns (uint256 balance) {\\n\\t\\trequire(owner != address(0), \\\"ZERO_ADDRESS_OWNER\\\");\\n\\t\\tbalance = _balances[owner];\\n\\t}\\n\\n\\t/// @notice Get the owner of a token.\\n\\t/// @param id The id of the token.\\n\\t/// @return owner The address of the token owner.\\n\\tfunction ownerOf(uint256 id) external view override returns (address owner) {\\n\\t\\towner = _ownerOf(id);\\n\\t\\trequire(owner != address(0), \\\"NONEXISTENT_TOKEN\\\");\\n\\t}\\n\\n\\t/// @notice Get the owner of a token and the blockNumber of the last transfer, useful to voting mechanism.\\n\\t/// @param id The id of the token.\\n\\t/// @return owner The address of the token owner.\\n\\t/// @return blockNumber The blocknumber at which the last transfer of that id happened.\\n\\tfunction ownerAndLastTransferBlockNumberOf(uint256 id) internal view returns (address owner, uint256 blockNumber) {\\n\\t\\treturn _ownerAndBlockNumberOf(id);\\n\\t}\\n\\n\\tstruct OwnerData {\\n\\t\\taddress owner;\\n\\t\\tuint256 lastTransferBlockNumber;\\n\\t}\\n\\n\\t/// @notice Get the list of owner of a token and the blockNumber of its last transfer, useful to voting mechanism.\\n\\t/// @param ids The list of token ids to check.\\n\\t/// @return ownersData The list of (owner, lastTransferBlockNumber) for each ids given as input.\\n\\tfunction ownerAndLastTransferBlockNumberList(uint256[] calldata ids)\\n\\t\\texternal\\n\\t\\tview\\n\\t\\tvirtual\\n\\t\\treturns (OwnerData[] memory ownersData)\\n\\t{\\n\\t\\townersData = new OwnerData[](ids.length);\\n\\t\\tfor (uint256 i = 0; i < ids.length; i++) {\\n\\t\\t\\tuint256 data = _owners[ids[i]];\\n\\t\\t\\townersData[i].owner = address(uint160(data));\\n\\t\\t\\townersData[i].lastTransferBlockNumber = (data >> 160) & 0xFFFFFFFFFFFFFFFFFFFFFF;\\n\\t\\t}\\n\\t}\\n\\n\\t/// @notice Get the approved operator for a specific token.\\n\\t/// @param id The id of the token.\\n\\t/// @return The address of the operator.\\n\\tfunction getApproved(uint256 id) external view override returns (address) {\\n\\t\\t(address owner, bool operatorEnabled) = _ownerAndOperatorEnabledOf(id);\\n\\t\\trequire(owner != address(0), \\\"NONEXISTENT_TOKEN\\\");\\n\\t\\tif (operatorEnabled) {\\n\\t\\t\\treturn _operators[id];\\n\\t\\t} else {\\n\\t\\t\\treturn address(0);\\n\\t\\t}\\n\\t}\\n\\n\\t/// @notice Check if the sender approved the operator.\\n\\t/// @param owner The address of the owner.\\n\\t/// @param operator The address of the operator.\\n\\t/// @return isOperator The status of the approval.\\n\\tfunction isApprovedForAll(address owner, address operator) public view virtual override returns (bool isOperator) {\\n\\t\\treturn _operatorsForAll[owner][operator];\\n\\t}\\n\\n\\t/// @notice Transfer a token between 2 addresses letting the receiver knows of the transfer.\\n\\t/// @param from The sender of the token.\\n\\t/// @param to The recipient of the token.\\n\\t/// @param id The id of the token.\\n\\t/// @param data Additional data.\\n\\tfunction safeTransferFrom(\\n\\t\\taddress from,\\n\\t\\taddress to,\\n\\t\\tuint256 id,\\n\\t\\tbytes memory data\\n\\t) public override {\\n\\t\\t(address owner, bool operatorEnabled) = _ownerAndOperatorEnabledOf(id);\\n\\t\\trequire(owner != address(0), \\\"NONEXISTENT_TOKEN\\\");\\n\\t\\trequire(owner == from, \\\"NOT_OWNER\\\");\\n\\t\\trequire(to != address(0), \\\"NOT_TO_ZEROADDRESS\\\");\\n\\t\\trequire(to != address(this), \\\"NOT_TO_THIS\\\");\\n\\t\\tif (msg.sender != from) {\\n\\t\\t\\trequire(\\n\\t\\t\\t\\t(operatorEnabled && _operators[id] == msg.sender) || isApprovedForAll(from, msg.sender),\\n\\t\\t\\t\\t\\\"UNAUTHORIZED_TRANSFER\\\"\\n\\t\\t\\t);\\n\\t\\t}\\n\\t\\t_safeTransferFrom(from, to, id, data);\\n\\t}\\n\\n\\t/// @notice Check if the contract supports an interface.\\n\\t/// @param id The id of the interface.\\n\\t/// @return Whether the interface is supported.\\n\\tfunction supportsInterface(bytes4 id) public view virtual override returns (bool) {\\n\\t\\t/// 0x01ffc9a7 is ERC165.\\n\\t\\t/// 0x80ac58cd is ERC721\\n\\t\\t/// 0x5b5e139f is for ERC721 metadata\\n\\t\\treturn id == 0x01ffc9a7 || id == 0x80ac58cd || id == 0x5b5e139f;\\n\\t}\\n\\n\\tfunction tokenURI(uint256 id) external view virtual returns (string memory);\\n\\n\\tfunction _safeTransferFrom(\\n\\t\\taddress from,\\n\\t\\taddress to,\\n\\t\\tuint256 id,\\n\\t\\tbytes memory data\\n\\t) internal {\\n\\t\\t_transferFrom(from, to, id);\\n\\t\\tif (to.isContract()) {\\n\\t\\t\\trequire(_checkOnERC721Received(msg.sender, from, to, id, data), \\\"ERC721_TRANSFER_REJECTED\\\");\\n\\t\\t}\\n\\t}\\n\\n\\tfunction _transferFrom(\\n\\t\\taddress from,\\n\\t\\taddress to,\\n\\t\\tuint256 id\\n\\t) internal {\\n\\t\\tunchecked {\\n\\t\\t\\t_balances[to]++;\\n\\t\\t\\tif (from != address(0)) {\\n\\t\\t\\t\\t_balances[from]--;\\n\\t\\t\\t}\\n\\t\\t}\\n\\t\\t_owners[id] = (block.number << 160) | uint256(uint160(to));\\n\\t\\temit Transfer(from, to, id);\\n\\t}\\n\\n\\t/// @dev See approve.\\n\\tfunction _approveFor(\\n\\t\\taddress owner,\\n\\t\\tuint256 blockNumber,\\n\\t\\taddress operator,\\n\\t\\tuint256 id\\n\\t) internal override {\\n\\t\\tif (operator == address(0)) {\\n\\t\\t\\t_owners[id] = blockNumber != 0 ? (blockNumber << 160) | uint256(uint160(owner)) : 0;\\n\\t\\t} else {\\n\\t\\t\\t_owners[id] = OPERATOR_FLAG | (blockNumber != 0 ? (blockNumber << 160) | uint256(uint160(owner)) : 0);\\n\\t\\t\\t_operators[id] = operator;\\n\\t\\t}\\n\\t\\temit Approval(owner, operator, id);\\n\\t}\\n\\n\\t/// @dev See setApprovalForAll.\\n\\tfunction _setApprovalForAll(\\n\\t\\taddress sender,\\n\\t\\taddress operator,\\n\\t\\tbool approved\\n\\t) internal override {\\n\\t\\t_operatorsForAll[sender][operator] = approved;\\n\\n\\t\\temit ApprovalForAll(sender, operator, approved);\\n\\t}\\n\\n\\t/// @dev Check if receiving contract accepts erc721 transfers.\\n\\t/// @param operator The address of the operator.\\n\\t/// @param from The from address, may be different from msg.sender.\\n\\t/// @param to The adddress we want to transfer to.\\n\\t/// @param id The id of the token we would like to transfer.\\n\\t/// @param _data Any additional data to send with the transfer.\\n\\t/// @return Whether the expected value of 0x150b7a02 is returned.\\n\\tfunction _checkOnERC721Received(\\n\\t\\taddress operator,\\n\\t\\taddress from,\\n\\t\\taddress to,\\n\\t\\tuint256 id,\\n\\t\\tbytes memory _data\\n\\t) internal returns (bool) {\\n\\t\\tbytes4 retval = IERC721Receiver(to).onERC721Received(operator, from, id, _data);\\n\\t\\treturn (retval == ERC721_RECEIVED);\\n\\t}\\n\\n\\t/// @dev See ownerOf\\n\\tfunction _ownerOf(uint256 id) internal view virtual returns (address owner) {\\n\\t\\treturn address(uint160(_owners[id]));\\n\\t}\\n\\n\\t/// @dev Get the owner and operatorEnabled status of a token.\\n\\t/// @param id The token to query.\\n\\t/// @return owner The owner of the token.\\n\\t/// @return operatorEnabled Whether or not operators are enabled for this token.\\n\\tfunction _ownerAndOperatorEnabledOf(uint256 id)\\n\\t\\tinternal\\n\\t\\tview\\n\\t\\tvirtual\\n\\t\\treturns (address owner, bool operatorEnabled)\\n\\t{\\n\\t\\tuint256 data = _owners[id];\\n\\t\\towner = address(uint160(data));\\n\\t\\toperatorEnabled = (data & OPERATOR_FLAG) == OPERATOR_FLAG;\\n\\t}\\n\\n\\t// @dev Get the owner and operatorEnabled status of a token.\\n\\t/// @param id The token to query.\\n\\t/// @return owner The owner of the token.\\n\\t/// @return blockNumber the blockNumber at which the owner became the owner (last transfer).\\n\\tfunction _ownerAndBlockNumberOf(uint256 id)\\n\\t\\tinternal\\n\\t\\tview\\n\\t\\tvirtual\\n\\t\\toverride\\n\\t\\treturns (address owner, uint256 blockNumber)\\n\\t{\\n\\t\\tuint256 data = _owners[id];\\n\\t\\towner = address(uint160(data));\\n\\t\\tblockNumber = (data >> 160) & 0xFFFFFFFFFFFFFFFFFFFFFF;\\n\\t}\\n}\\n\",\"keccak256\":\"0x94d640550a88bc25c89040efcb0082b8e5d6c5be97543220ea9646008d49d016\",\"license\":\"MIT\"},\"solidity-kit/solc_0.8/ERC721/implementations/ERC721OwnedByAll.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"../interfaces/IERC721Receiver.sol\\\";\\nimport \\\"./BasicERC721.sol\\\";\\n\\nimport \\\"../../openzeppelin/contracts/utils/Address.sol\\\";\\n\\nabstract contract ERC721OwnedByAll is BasicERC721 {\\n\\t/// @notice Get the number of tokens owned by an address.\\n\\t/// @param owner The address to look for.\\n\\t/// @return balance The number of tokens owned by the address.\\n\\tfunction balanceOf(address owner) public view override returns (uint256 balance) {\\n\\t\\trequire(owner != address(0), \\\"ZERO_ADDRESS_OWNER\\\");\\n\\t\\tbalance = _balances[owner];\\n\\t\\t(, uint256 blockNumber) = _ownerAndBlockNumberOf(uint256(uint160(owner)));\\n\\t\\tif (blockNumber == 0) {\\n\\t\\t\\t// owned token was never registered\\n\\t\\t\\tbalance++;\\n\\t\\t}\\n\\t}\\n\\n\\t/// @notice Get the list of owner of a token and the blockNumber of its last transfer, useful to voting mechanism.\\n\\t/// @param ids The list of token ids to check.\\n\\t/// @return ownersData The list of (owner, lastTransferBlockNumber) for each ids given as input.\\n\\tfunction ownerAndLastTransferBlockNumberList(uint256[] calldata ids)\\n\\t\\texternal\\n\\t\\tview\\n\\t\\toverride\\n\\t\\treturns (OwnerData[] memory ownersData)\\n\\t{\\n\\t\\townersData = new OwnerData[](ids.length);\\n\\t\\tfor (uint256 i = 0; i < ids.length; i++) {\\n\\t\\t\\tuint256 id = ids[i];\\n\\t\\t\\tuint256 data = _owners[id];\\n\\t\\t\\taddress owner = address(uint160(data));\\n\\t\\t\\tif (owner == address(0) && id < 2**160) {\\n\\t\\t\\t\\towner = address(uint160(id));\\n\\t\\t\\t}\\n\\t\\t\\townersData[i].owner = owner;\\n\\t\\t\\townersData[i].lastTransferBlockNumber = (data >> 160) & 0xFFFFFFFFFFFFFFFFFFFFFF;\\n\\t\\t}\\n\\t}\\n\\n\\t/// @dev See ownerOf\\n\\tfunction _ownerOf(uint256 id) internal view override returns (address owner) {\\n\\t\\towner = address(uint160(_owners[id]));\\n\\t\\tif (owner == address(0) && id < 2**160) {\\n\\t\\t\\towner = address(uint160(id));\\n\\t\\t}\\n\\t}\\n\\n\\t/// @dev See _ownerAndOperatorEnabledOf\\n\\tfunction _ownerAndOperatorEnabledOf(uint256 id)\\n\\t\\tinternal\\n\\t\\tview\\n\\t\\toverride\\n\\t\\treturns (address owner, bool operatorEnabled)\\n\\t{\\n\\t\\tuint256 data = _owners[id];\\n\\t\\towner = address(uint160(data));\\n\\t\\tif (owner == address(0) && id < 2**160) {\\n\\t\\t\\towner = address(uint160(id));\\n\\t\\t}\\n\\t\\toperatorEnabled = (data & OPERATOR_FLAG) == OPERATOR_FLAG;\\n\\t}\\n\\n\\t/// @dev See _ownerAndBlockNumberOf\\n\\tfunction _ownerAndBlockNumberOf(uint256 id) internal view override returns (address owner, uint256 blockNumber) {\\n\\t\\tuint256 data = _owners[id];\\n\\t\\towner = address(uint160(data));\\n\\t\\tif (owner == address(0) && id < 2**160) {\\n\\t\\t\\towner = address(uint160(id));\\n\\t\\t}\\n\\t\\tblockNumber = (data >> 160) & 0xFFFFFFFFFFFFFFFFFFFFFF;\\n\\t}\\n\\n\\t/// @notice Count NFTs tracked by this contract\\n\\t/// @return A count of valid NFTs tracked by this contract, where each one of\\n\\t///  them has an assigned and queryable owner not equal to the zero address\\n\\tfunction totalSupply() external pure returns (uint256) {\\n\\t\\treturn 2**160 - 1; // do not count token with id zero whose owner would otherwise be the zero address\\n\\t}\\n}\\n\",\"keccak256\":\"0x495b29b6ae2cc747c25626674a2f6080569286f03f987fa5bc38e1a42dc9e5cc\",\"license\":\"MIT\"},\"solidity-kit/solc_0.8/ERC721/implementations/ImplementingERC721Internal.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nabstract contract ImplementingERC721Internal {\\n\\tfunction _ownerAndBlockNumberOf(uint256 id) internal view virtual returns (address owner, uint256 blockNumber);\\n\\n\\tfunction _approveFor(\\n\\t\\taddress owner,\\n\\t\\tuint256 blockNumber,\\n\\t\\taddress operator,\\n\\t\\tuint256 id\\n\\t) internal virtual;\\n\\n\\tfunction _setApprovalForAll(\\n\\t\\taddress sender,\\n\\t\\taddress operator,\\n\\t\\tbool approved\\n\\t) internal virtual;\\n}\\n\",\"keccak256\":\"0xdfaaad0a3033813645d9591ce2fec8959b694ee53c11feca6d2154930bb0c08a\",\"license\":\"MIT\"},\"solidity-kit/solc_0.8/ERC721/interfaces/IERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../ERC165/interfaces/IERC165.sol\\\";\\n\\ninterface IERC721 is IERC165 {\\n\\tevent Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\tevent Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\tevent ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n\\tfunction balanceOf(address owner) external view returns (uint256 balance);\\n\\n\\tfunction ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n\\tfunction safeTransferFrom(\\n\\t\\taddress from,\\n\\t\\taddress to,\\n\\t\\tuint256 tokenId,\\n\\t\\tbytes calldata data\\n\\t) external;\\n\\n\\tfunction safeTransferFrom(\\n\\t\\taddress from,\\n\\t\\taddress to,\\n\\t\\tuint256 tokenId\\n\\t) external;\\n\\n\\tfunction transferFrom(\\n\\t\\taddress from,\\n\\t\\taddress to,\\n\\t\\tuint256 tokenId\\n\\t) external;\\n\\n\\tfunction approve(address to, uint256 tokenId) external;\\n\\n\\tfunction setApprovalForAll(address operator, bool _approved) external;\\n\\n\\tfunction getApproved(uint256 tokenId) external view returns (address operator);\\n\\n\\tfunction isApprovedForAll(address owner, address operator) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x6935147c4d5aae5225da5bbc87ac9e78b2e6a6ae12b3e2ef48be1910334a1d97\",\"license\":\"MIT\"},\"solidity-kit/solc_0.8/ERC721/interfaces/IERC721Receiver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface IERC721Receiver {\\n\\tfunction onERC721Received(\\n\\t\\taddress operator,\\n\\t\\taddress from,\\n\\t\\tuint256 tokenId,\\n\\t\\tbytes calldata data\\n\\t) external returns (bytes4);\\n}\\n\",\"keccak256\":\"0x93b862e272b6f6f50a2e38eea318259308992dc139771389dd7622b8c9053fc3\",\"license\":\"MIT\"},\"solidity-kit/solc_0.8/openzeppelin/contracts/interfaces/IERC1271.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (interfaces/IERC1271.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC1271 standard signature validation method for\\n * contracts as defined in https://eips.ethereum.org/EIPS/eip-1271[ERC-1271].\\n *\\n * _Available since v4.1._\\n */\\ninterface Openzeppelin_IERC1271 {\\n\\t/**\\n\\t * @dev Should return whether the signature provided is valid for the provided data\\n\\t * @param hash      Hash of the data to be signed\\n\\t * @param signature Signature byte array associated with _data\\n\\t */\\n\\tfunction isValidSignature(bytes32 hash, bytes memory signature) external view returns (bytes4 magicValue);\\n}\\n\",\"keccak256\":\"0x173c37fa761fec032d32882157af393d4f299e155f83ca2c1e4473bba7944e60\",\"license\":\"MIT\"},\"solidity-kit/solc_0.8/openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Openzeppelin_Address {\\n\\t/**\\n\\t * @dev Returns true if `account` is a contract.\\n\\t *\\n\\t * [IMPORTANT]\\n\\t * ====\\n\\t * It is unsafe to assume that an address for which this function returns\\n\\t * false is an externally-owned account (EOA) and not a contract.\\n\\t *\\n\\t * Among others, `isContract` will return false for the following\\n\\t * types of addresses:\\n\\t *\\n\\t *  - an externally-owned account\\n\\t *  - a contract in construction\\n\\t *  - an address where a contract will be created\\n\\t *  - an address where a contract lived, but was destroyed\\n\\t * ====\\n\\t *\\n\\t * [IMPORTANT]\\n\\t * ====\\n\\t * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n\\t *\\n\\t * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n\\t * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n\\t * constructor.\\n\\t * ====\\n\\t */\\n\\tfunction isContract(address account) internal view returns (bool) {\\n\\t\\t// This method relies on extcodesize/address.code.length, which returns 0\\n\\t\\t// for contracts in construction, since the code is only stored at the end\\n\\t\\t// of the constructor execution.\\n\\n\\t\\treturn account.code.length > 0;\\n\\t}\\n\\n\\t/**\\n\\t * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n\\t * `recipient`, forwarding all available gas and reverting on errors.\\n\\t *\\n\\t * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n\\t * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n\\t * imposed by `transfer`, making them unable to receive funds via\\n\\t * `transfer`. {sendValue} removes this limitation.\\n\\t *\\n\\t * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n\\t *\\n\\t * IMPORTANT: because control is transferred to `recipient`, care must be\\n\\t * taken to not create reentrancy vulnerabilities. Consider using\\n\\t * {ReentrancyGuard} or the\\n\\t * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n\\t */\\n\\tfunction sendValue(address payable recipient, uint256 amount) internal {\\n\\t\\trequire(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n\\t\\t(bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n\\t\\trequire(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n\\t}\\n\\n\\t/**\\n\\t * @dev Performs a Solidity function call using a low level `call`. A\\n\\t * plain `call` is an unsafe replacement for a function call: use this\\n\\t * function instead.\\n\\t *\\n\\t * If `target` reverts with a revert reason, it is bubbled up by this\\n\\t * function (like regular Solidity function calls).\\n\\t *\\n\\t * Returns the raw returned data. To convert to the expected return value,\\n\\t * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n\\t *\\n\\t * Requirements:\\n\\t *\\n\\t * - `target` must be a contract.\\n\\t * - calling `target` with `data` must not revert.\\n\\t *\\n\\t * _Available since v3.1._\\n\\t */\\n\\tfunction functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n\\t\\treturn functionCall(target, data, \\\"Address: low-level call failed\\\");\\n\\t}\\n\\n\\t/**\\n\\t * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n\\t * `errorMessage` as a fallback revert reason when `target` reverts.\\n\\t *\\n\\t * _Available since v3.1._\\n\\t */\\n\\tfunction functionCall(\\n\\t\\taddress target,\\n\\t\\tbytes memory data,\\n\\t\\tstring memory errorMessage\\n\\t) internal returns (bytes memory) {\\n\\t\\treturn functionCallWithValue(target, data, 0, errorMessage);\\n\\t}\\n\\n\\t/**\\n\\t * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n\\t * but also transferring `value` wei to `target`.\\n\\t *\\n\\t * Requirements:\\n\\t *\\n\\t * - the calling contract must have an ETH balance of at least `value`.\\n\\t * - the called Solidity function must be `payable`.\\n\\t *\\n\\t * _Available since v3.1._\\n\\t */\\n\\tfunction functionCallWithValue(\\n\\t\\taddress target,\\n\\t\\tbytes memory data,\\n\\t\\tuint256 value\\n\\t) internal returns (bytes memory) {\\n\\t\\treturn functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n\\t}\\n\\n\\t/**\\n\\t * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n\\t * with `errorMessage` as a fallback revert reason when `target` reverts.\\n\\t *\\n\\t * _Available since v3.1._\\n\\t */\\n\\tfunction functionCallWithValue(\\n\\t\\taddress target,\\n\\t\\tbytes memory data,\\n\\t\\tuint256 value,\\n\\t\\tstring memory errorMessage\\n\\t) internal returns (bytes memory) {\\n\\t\\trequire(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n\\t\\trequire(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n\\t\\t(bool success, bytes memory returndata) = target.call{value: value}(data);\\n\\t\\treturn verifyCallResult(success, returndata, errorMessage);\\n\\t}\\n\\n\\t/**\\n\\t * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n\\t * but performing a static call.\\n\\t *\\n\\t * _Available since v3.3._\\n\\t */\\n\\tfunction functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n\\t\\treturn functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n\\t}\\n\\n\\t/**\\n\\t * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n\\t * but performing a static call.\\n\\t *\\n\\t * _Available since v3.3._\\n\\t */\\n\\tfunction functionStaticCall(\\n\\t\\taddress target,\\n\\t\\tbytes memory data,\\n\\t\\tstring memory errorMessage\\n\\t) internal view returns (bytes memory) {\\n\\t\\trequire(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n\\t\\t(bool success, bytes memory returndata) = target.staticcall(data);\\n\\t\\treturn verifyCallResult(success, returndata, errorMessage);\\n\\t}\\n\\n\\t/**\\n\\t * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n\\t * but performing a delegate call.\\n\\t *\\n\\t * _Available since v3.4._\\n\\t */\\n\\tfunction functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n\\t\\treturn functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n\\t}\\n\\n\\t/**\\n\\t * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n\\t * but performing a delegate call.\\n\\t *\\n\\t * _Available since v3.4._\\n\\t */\\n\\tfunction functionDelegateCall(\\n\\t\\taddress target,\\n\\t\\tbytes memory data,\\n\\t\\tstring memory errorMessage\\n\\t) internal returns (bytes memory) {\\n\\t\\trequire(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n\\t\\t(bool success, bytes memory returndata) = target.delegatecall(data);\\n\\t\\treturn verifyCallResult(success, returndata, errorMessage);\\n\\t}\\n\\n\\t/**\\n\\t * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n\\t * revert reason using the provided one.\\n\\t *\\n\\t * _Available since v4.3._\\n\\t */\\n\\tfunction verifyCallResult(\\n\\t\\tbool success,\\n\\t\\tbytes memory returndata,\\n\\t\\tstring memory errorMessage\\n\\t) internal pure returns (bytes memory) {\\n\\t\\tif (success) {\\n\\t\\t\\treturn returndata;\\n\\t\\t} else {\\n\\t\\t\\t// Look for revert reason and bubble it up if present\\n\\t\\t\\tif (returndata.length > 0) {\\n\\t\\t\\t\\t// The easiest way to bubble the revert reason is using memory via assembly\\n\\t\\t\\t\\t/// @solidity memory-safe-assembly\\n\\t\\t\\t\\tassembly {\\n\\t\\t\\t\\t\\tlet returndata_size := mload(returndata)\\n\\t\\t\\t\\t\\trevert(add(32, returndata), returndata_size)\\n\\t\\t\\t\\t}\\n\\t\\t\\t} else {\\n\\t\\t\\t\\trevert(errorMessage);\\n\\t\\t\\t}\\n\\t\\t}\\n\\t}\\n}\\n\",\"keccak256\":\"0xda14142ec34e7dde33eabb747152062eb9d9aad16036f6498340418f59c83c97\",\"license\":\"MIT\"},\"solidity-kit/solc_0.8/openzeppelin/contracts/utils/Strings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Openzeppelin_Strings {\\n\\tbytes16 private constant _HEX_SYMBOLS = \\\"0123456789abcdef\\\";\\n\\tuint8 private constant _ADDRESS_LENGTH = 20;\\n\\n\\t/**\\n\\t * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n\\t */\\n\\tfunction toString(uint256 value) internal pure returns (string memory) {\\n\\t\\t// Inspired by OraclizeAPI's implementation - MIT licence\\n\\t\\t// https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\\n\\n\\t\\tif (value == 0) {\\n\\t\\t\\treturn \\\"0\\\";\\n\\t\\t}\\n\\t\\tuint256 temp = value;\\n\\t\\tuint256 digits;\\n\\t\\twhile (temp != 0) {\\n\\t\\t\\tdigits++;\\n\\t\\t\\ttemp /= 10;\\n\\t\\t}\\n\\t\\tbytes memory buffer = new bytes(digits);\\n\\t\\twhile (value != 0) {\\n\\t\\t\\tdigits -= 1;\\n\\t\\t\\tbuffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\\n\\t\\t\\tvalue /= 10;\\n\\t\\t}\\n\\t\\treturn string(buffer);\\n\\t}\\n\\n\\t/**\\n\\t * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n\\t */\\n\\tfunction toHexString(uint256 value) internal pure returns (string memory) {\\n\\t\\tif (value == 0) {\\n\\t\\t\\treturn \\\"0x00\\\";\\n\\t\\t}\\n\\t\\tuint256 temp = value;\\n\\t\\tuint256 length = 0;\\n\\t\\twhile (temp != 0) {\\n\\t\\t\\tlength++;\\n\\t\\t\\ttemp >>= 8;\\n\\t\\t}\\n\\t\\treturn toHexString(value, length);\\n\\t}\\n\\n\\t/**\\n\\t * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n\\t */\\n\\tfunction toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n\\t\\tbytes memory buffer = new bytes(2 * length + 2);\\n\\t\\tbuffer[0] = \\\"0\\\";\\n\\t\\tbuffer[1] = \\\"x\\\";\\n\\t\\tfor (uint256 i = 2 * length + 1; i > 1; --i) {\\n\\t\\t\\tbuffer[i] = _HEX_SYMBOLS[value & 0xf];\\n\\t\\t\\tvalue >>= 4;\\n\\t\\t}\\n\\t\\trequire(value == 0, \\\"Strings: hex length insufficient\\\");\\n\\t\\treturn string(buffer);\\n\\t}\\n\\n\\t/**\\n\\t * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\\n\\t */\\n\\tfunction toHexString(address addr) internal pure returns (string memory) {\\n\\t\\treturn toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\\n\\t}\\n}\\n\",\"keccak256\":\"0xf6334586d40bd8b17abc5842da4221b89375004c84e299155cdcad2b93812d5e\",\"license\":\"MIT\"},\"solidity-kit/solc_0.8/openzeppelin/contracts/utils/cryptography/ECDSA.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.3) (utils/cryptography/ECDSA.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../Strings.sol\\\";\\n\\n/**\\n * @dev Elliptic Curve Digital Signature Algorithm (ECDSA) operations.\\n *\\n * These functions can be used to verify that a message was signed by the holder\\n * of the private keys of a given address.\\n */\\nlibrary Openzeppelin_ECDSA {\\n\\tenum RecoverError {\\n\\t\\tNoError,\\n\\t\\tInvalidSignature,\\n\\t\\tInvalidSignatureLength,\\n\\t\\tInvalidSignatureS,\\n\\t\\tInvalidSignatureV\\n\\t}\\n\\n\\tfunction _throwError(RecoverError error) private pure {\\n\\t\\tif (error == RecoverError.NoError) {\\n\\t\\t\\treturn; // no error: do nothing\\n\\t\\t} else if (error == RecoverError.InvalidSignature) {\\n\\t\\t\\trevert(\\\"ECDSA: invalid signature\\\");\\n\\t\\t} else if (error == RecoverError.InvalidSignatureLength) {\\n\\t\\t\\trevert(\\\"ECDSA: invalid signature length\\\");\\n\\t\\t} else if (error == RecoverError.InvalidSignatureS) {\\n\\t\\t\\trevert(\\\"ECDSA: invalid signature 's' value\\\");\\n\\t\\t} else if (error == RecoverError.InvalidSignatureV) {\\n\\t\\t\\trevert(\\\"ECDSA: invalid signature 'v' value\\\");\\n\\t\\t}\\n\\t}\\n\\n\\t/**\\n\\t * @dev Returns the address that signed a hashed message (`hash`) with\\n\\t * `signature` or error string. This address can then be used for verification purposes.\\n\\t *\\n\\t * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\\n\\t * this function rejects them by requiring the `s` value to be in the lower\\n\\t * half order, and the `v` value to be either 27 or 28.\\n\\t *\\n\\t * IMPORTANT: `hash` _must_ be the result of a hash operation for the\\n\\t * verification to be secure: it is possible to craft signatures that\\n\\t * recover to arbitrary addresses for non-hashed data. A safe way to ensure\\n\\t * this is by receiving a hash of the original message (which may otherwise\\n\\t * be too long), and then calling {toEthSignedMessageHash} on it.\\n\\t *\\n\\t * Documentation for signature generation:\\n\\t * - with https://web3js.readthedocs.io/en/v1.3.4/web3-eth-accounts.html#sign[Web3.js]\\n\\t * - with https://docs.ethers.io/v5/api/signer/#Signer-signMessage[ethers]\\n\\t *\\n\\t * _Available since v4.3._\\n\\t */\\n\\tfunction tryRecover(bytes32 hash, bytes memory signature) internal pure returns (address, RecoverError) {\\n\\t\\tif (signature.length == 65) {\\n\\t\\t\\tbytes32 r;\\n\\t\\t\\tbytes32 s;\\n\\t\\t\\tuint8 v;\\n\\t\\t\\t// ecrecover takes the signature parameters, and the only way to get them\\n\\t\\t\\t// currently is to use assembly.\\n\\t\\t\\t/// @solidity memory-safe-assembly\\n\\t\\t\\tassembly {\\n\\t\\t\\t\\tr := mload(add(signature, 0x20))\\n\\t\\t\\t\\ts := mload(add(signature, 0x40))\\n\\t\\t\\t\\tv := byte(0, mload(add(signature, 0x60)))\\n\\t\\t\\t}\\n\\t\\t\\treturn tryRecover(hash, v, r, s);\\n\\t\\t} else {\\n\\t\\t\\treturn (address(0), RecoverError.InvalidSignatureLength);\\n\\t\\t}\\n\\t}\\n\\n\\t/**\\n\\t * @dev Returns the address that signed a hashed message (`hash`) with\\n\\t * `signature`. This address can then be used for verification purposes.\\n\\t *\\n\\t * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\\n\\t * this function rejects them by requiring the `s` value to be in the lower\\n\\t * half order, and the `v` value to be either 27 or 28.\\n\\t *\\n\\t * IMPORTANT: `hash` _must_ be the result of a hash operation for the\\n\\t * verification to be secure: it is possible to craft signatures that\\n\\t * recover to arbitrary addresses for non-hashed data. A safe way to ensure\\n\\t * this is by receiving a hash of the original message (which may otherwise\\n\\t * be too long), and then calling {toEthSignedMessageHash} on it.\\n\\t */\\n\\tfunction recover(bytes32 hash, bytes memory signature) internal pure returns (address) {\\n\\t\\t(address recovered, RecoverError error) = tryRecover(hash, signature);\\n\\t\\t_throwError(error);\\n\\t\\treturn recovered;\\n\\t}\\n\\n\\t/**\\n\\t * @dev Overload of {ECDSA-tryRecover} that receives the `r` and `vs` short-signature fields separately.\\n\\t *\\n\\t * See https://eips.ethereum.org/EIPS/eip-2098[EIP-2098 short signatures]\\n\\t *\\n\\t * _Available since v4.3._\\n\\t */\\n\\tfunction tryRecover(\\n\\t\\tbytes32 hash,\\n\\t\\tbytes32 r,\\n\\t\\tbytes32 vs\\n\\t) internal pure returns (address, RecoverError) {\\n\\t\\tbytes32 s = vs & bytes32(0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff);\\n\\t\\tuint8 v = uint8((uint256(vs) >> 255) + 27);\\n\\t\\treturn tryRecover(hash, v, r, s);\\n\\t}\\n\\n\\t/**\\n\\t * @dev Overload of {ECDSA-recover} that receives the `r and `vs` short-signature fields separately.\\n\\t *\\n\\t * _Available since v4.2._\\n\\t */\\n\\tfunction recover(\\n\\t\\tbytes32 hash,\\n\\t\\tbytes32 r,\\n\\t\\tbytes32 vs\\n\\t) internal pure returns (address) {\\n\\t\\t(address recovered, RecoverError error) = tryRecover(hash, r, vs);\\n\\t\\t_throwError(error);\\n\\t\\treturn recovered;\\n\\t}\\n\\n\\t/**\\n\\t * @dev Overload of {ECDSA-tryRecover} that receives the `v`,\\n\\t * `r` and `s` signature fields separately.\\n\\t *\\n\\t * _Available since v4.3._\\n\\t */\\n\\tfunction tryRecover(\\n\\t\\tbytes32 hash,\\n\\t\\tuint8 v,\\n\\t\\tbytes32 r,\\n\\t\\tbytes32 s\\n\\t) internal pure returns (address, RecoverError) {\\n\\t\\t// EIP-2 still allows signature malleability for ecrecover(). Remove this possibility and make the signature\\n\\t\\t// unique. Appendix F in the Ethereum Yellow paper (https://ethereum.github.io/yellowpaper/paper.pdf), defines\\n\\t\\t// the valid range for s in (301): 0 < s < secp256k1n \\u00f7 2 + 1, and for v in (302): v \\u2208 {27, 28}. Most\\n\\t\\t// signatures from current libraries generate a unique signature with an s-value in the lower half order.\\n\\t\\t//\\n\\t\\t// If your library generates malleable signatures, such as s-values in the upper range, calculate a new s-value\\n\\t\\t// with 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEBAAEDCE6AF48A03BBFD25E8CD0364141 - s1 and flip v from 27 to 28 or\\n\\t\\t// vice versa. If your library also generates signatures with 0/1 for v instead 27/28, add 27 to v to accept\\n\\t\\t// these malleable signatures as well.\\n\\t\\tif (uint256(s) > 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5D576E7357A4501DDFE92F46681B20A0) {\\n\\t\\t\\treturn (address(0), RecoverError.InvalidSignatureS);\\n\\t\\t}\\n\\t\\tif (v != 27 && v != 28) {\\n\\t\\t\\treturn (address(0), RecoverError.InvalidSignatureV);\\n\\t\\t}\\n\\n\\t\\t// If the signature is valid (and not malleable), return the signer address\\n\\t\\taddress signer = ecrecover(hash, v, r, s);\\n\\t\\tif (signer == address(0)) {\\n\\t\\t\\treturn (address(0), RecoverError.InvalidSignature);\\n\\t\\t}\\n\\n\\t\\treturn (signer, RecoverError.NoError);\\n\\t}\\n\\n\\t/**\\n\\t * @dev Overload of {ECDSA-recover} that receives the `v`,\\n\\t * `r` and `s` signature fields separately.\\n\\t */\\n\\tfunction recover(\\n\\t\\tbytes32 hash,\\n\\t\\tuint8 v,\\n\\t\\tbytes32 r,\\n\\t\\tbytes32 s\\n\\t) internal pure returns (address) {\\n\\t\\t(address recovered, RecoverError error) = tryRecover(hash, v, r, s);\\n\\t\\t_throwError(error);\\n\\t\\treturn recovered;\\n\\t}\\n\\n\\t/**\\n\\t * @dev Returns an Ethereum Signed Message, created from a `hash`. This\\n\\t * produces hash corresponding to the one signed with the\\n\\t * https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\\n\\t * JSON-RPC method as part of EIP-191.\\n\\t *\\n\\t * See {recover}.\\n\\t */\\n\\tfunction toEthSignedMessageHash(bytes32 hash) internal pure returns (bytes32) {\\n\\t\\t// 32 is the length in bytes of hash,\\n\\t\\t// enforced by the type signature above\\n\\t\\treturn keccak256(abi.encodePacked(\\\"\\\\x19Ethereum Signed Message:\\\\n32\\\", hash));\\n\\t}\\n\\n\\t/**\\n\\t * @dev Returns an Ethereum Signed Message, created from `s`. This\\n\\t * produces hash corresponding to the one signed with the\\n\\t * https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\\n\\t * JSON-RPC method as part of EIP-191.\\n\\t *\\n\\t * See {recover}.\\n\\t */\\n\\tfunction toEthSignedMessageHash(bytes memory s) internal pure returns (bytes32) {\\n\\t\\treturn\\n\\t\\t\\tkeccak256(abi.encodePacked(\\\"\\\\x19Ethereum Signed Message:\\\\n\\\", Openzeppelin_Strings.toString(s.length), s));\\n\\t}\\n\\n\\t/**\\n\\t * @dev Returns an Ethereum Signed Typed Data, created from a\\n\\t * `domainSeparator` and a `structHash`. This produces hash corresponding\\n\\t * to the one signed with the\\n\\t * https://eips.ethereum.org/EIPS/eip-712[`eth_signTypedData`]\\n\\t * JSON-RPC method as part of EIP-712.\\n\\t *\\n\\t * See {recover}.\\n\\t */\\n\\tfunction toTypedDataHash(bytes32 domainSeparator, bytes32 structHash) internal pure returns (bytes32) {\\n\\t\\treturn keccak256(abi.encodePacked(\\\"\\\\x19\\\\x01\\\", domainSeparator, structHash));\\n\\t}\\n}\\n\",\"keccak256\":\"0xe3c465016f940a2a11b6bde7b5238ca78c1f11bdd271a0f0ce07acfcdb5db282\",\"license\":\"MIT\"},\"solidity-kit/solc_0.8/openzeppelin/contracts/utils/cryptography/SignatureChecker.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.1) (utils/cryptography/SignatureChecker.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./ECDSA.sol\\\";\\nimport \\\"../Address.sol\\\";\\nimport \\\"../../interfaces/IERC1271.sol\\\";\\n\\n/**\\n * @dev Signature verification helper that can be used instead of `ECDSA.recover` to seamlessly support both ECDSA\\n * signatures from externally owned accounts (EOAs) as well as ERC1271 signatures from smart contract wallets like\\n * Argent and Gnosis Safe.\\n *\\n * _Available since v4.1._\\n */\\nlibrary Openzeppelin_SignatureChecker {\\n\\t/**\\n\\t * @dev Checks if a signature is valid for a given signer and data hash. If the signer is a smart contract, the\\n\\t * signature is validated against that smart contract using ERC1271, otherwise it's validated using `ECDSA.recover`.\\n\\t *\\n\\t * NOTE: Unlike ECDSA signatures, contract signatures are revocable, and the outcome of this function can thus\\n\\t * change through time. It could return true at block N and false at block N+1 (or the opposite).\\n\\t */\\n\\tfunction isValidSignatureNow(\\n\\t\\taddress signer,\\n\\t\\tbytes32 hash,\\n\\t\\tbytes memory signature\\n\\t) internal view returns (bool) {\\n\\t\\t(address recovered, Openzeppelin_ECDSA.RecoverError error) = Openzeppelin_ECDSA.tryRecover(hash, signature);\\n\\t\\tif (error == Openzeppelin_ECDSA.RecoverError.NoError && recovered == signer) {\\n\\t\\t\\treturn true;\\n\\t\\t}\\n\\n\\t\\t(bool success, bytes memory result) = signer.staticcall(\\n\\t\\t\\tabi.encodeWithSelector(Openzeppelin_IERC1271.isValidSignature.selector, hash, signature)\\n\\t\\t);\\n\\t\\treturn (success &&\\n\\t\\t\\tresult.length == 32 &&\\n\\t\\t\\tabi.decode(result, (bytes32)) == bytes32(Openzeppelin_IERC1271.isValidSignature.selector));\\n\\t}\\n}\\n\",\"keccak256\":\"0xd5e2c26c26a86657b7cf61e595aafb6305d67e1a60f665a117fc6f366618e3e6\",\"license\":\"MIT\"},\"src/Blockies.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0-or-later\\npragma solidity 0.8.16;\\n\\nimport \\\"solidity-kit/solc_0.8/ERC721/implementations/ERC721OwnedByAll.sol\\\";\\nimport \\\"solidity-kit/solc_0.8/ERC721/ERC4494/implementations/UsingERC4494PermitWithDynamicChainId.sol\\\";\\n\\n// import \\\"solidity-kit/solc_0.8/Multicall/UsingMulticall.sol\\\";\\n// import \\\"solidity-kit/solc_0.8/ERC721/implementations/UsingExternalMinter.sol\\\";\\n// import \\\"solidity-kit/solc_0.8/ERC2981/implementations/UsingGlobalRoyalties.sol\\\";\\n// import \\\"solidity-kit/solc_0.8/Guardian/implementations/UsingGuardian.sol\\\";\\n\\ncontract Blockies is ERC721OwnedByAll, UsingERC4494PermitWithDynamicChainId {\\n\\tstruct Seed {\\n\\t\\tint32 s0;\\n\\t\\tint32 s1;\\n\\t\\tint32 s2;\\n\\t\\tint32 s3;\\n\\t}\\n\\n\\tbytes internal constant hexAlphabet = \\\"0123456789abcdef\\\";\\n\\n\\tbytes internal constant TEMPLATE =\\n\\t\\t\\\"data:application/json,{\\\\\\\"name\\\\\\\":\\\\\\\"0x0000000000000000000000000000000000000000\\\\\\\",\\\\\\\"description\\\\\\\":\\\\\\\"A%20Blockie%20for%200x0000000000000000000000000000000000000000\\\\\\\",\\\\\\\"image\\\\\\\":\\\\\\\"data:image/svg+xml,<svg%20xmlns='http://www.w3.org/2000/svg'%20shape-rendering='crispEdges'%20width='512'%20height='512'><g%20transform='scale(64)'><path%20fill='hsl(000,000%,000%)'%20d='M0,0h8v8h-8z'/><path%20fill='hsl(000,000%,000%)'%20d='M0,0h1v0h-1zm1,0h1v0h-1zm1,0h1v0h-1zm1,0h1v0h-1zm1,0h1v0h-1zm1,0h1v0h-1zm1,0h1v0h-1zm1,0h1v0h-1zm-8,1m1,0h1v0h-1zm1,0h1v0h-1zm1,0h1v0h-1zm1,0h1v0h-1zm1,0h1v0h-1zm1,0h1v0h-1zm1,0h1v0h-1zm1,0h1v0h-1zm-8,1m1,0h1v0h-1zm1,0h1v0h-1zm1,0h1v0h-1zm1,0h1v0h-1zm1,0h1v0h-1zm1,0h1v0h-1zm1,0h1v0h-1zm1,0h1v0h-1zm-8,1m1,0h1v0h-1zm1,0h1v0h-1zm1,0h1v0h-1zm1,0h1v0h-1zm1,0h1v0h-1zm1,0h1v0h-1zm1,0h1v0h-1zm1,0h1v0h-1zm-8,1m1,0h1v0h-1zm1,0h1v0h-1zm1,0h1v0h-1zm1,0h1v0h-1zm1,0h1v0h-1zm1,0h1v0h-1zm1,0h1v0h-1zm1,0h1v0h-1zm-8,1m1,0h1v0h-1zm1,0h1v0h-1zm1,0h1v0h-1zm1,0h1v0h-1zm1,0h1v0h-1zm1,0h1v0h-1zm1,0h1v0h-1zm1,0h1v0h-1zm-8,1m1,0h1v0h-1zm1,0h1v0h-1zm1,0h1v0h-1zm1,0h1v0h-1zm1,0h1v0h-1zm1,0h1v0h-1zm1,0h1v0h-1zm1,0h1v0h-1zm-8,1m1,0h1v0h-1zm1,0h1v0h-1zm1,0h1v0h-1zm1,0h1v0h-1zm1,0h1v0h-1zm1,0h1v0h-1zm1,0h1v0h-1zm1,0h1v0h-1z'/><path%20fill='hsl(000,000%,000%)'%20d='M0,0h1v0h-1zm1,0h1v0h-1zm1,0h1v0h-1zm1,0h1v0h-1zm1,0h1v0h-1zm1,0h1v0h-1zm1,0h1v0h-1zm1,0h1v0h-1zm-8,1m1,0h1v0h-1zm1,0h1v0h-1zm1,0h1v0h-1zm1,0h1v0h-1zm1,0h1v0h-1zm1,0h1v0h-1zm1,0h1v0h-1zm1,0h1v0h-1zm-8,1m1,0h1v0h-1zm1,0h1v0h-1zm1,0h1v0h-1zm1,0h1v0h-1zm1,0h1v0h-1zm1,0h1v0h-1zm1,0h1v0h-1zm1,0h1v0h-1zm-8,1m1,0h1v0h-1zm1,0h1v0h-1zm1,0h1v0h-1zm1,0h1v0h-1zm1,0h1v0h-1zm1,0h1v0h-1zm1,0h1v0h-1zm1,0h1v0h-1zm-8,1m1,0h1v0h-1zm1,0h1v0h-1zm1,0h1v0h-1zm1,0h1v0h-1zm1,0h1v0h-1zm1,0h1v0h-1zm1,0h1v0h-1zm1,0h1v0h-1zm-8,1m1,0h1v0h-1zm1,0h1v0h-1zm1,0h1v0h-1zm1,0h1v0h-1zm1,0h1v0h-1zm1,0h1v0h-1zm1,0h1v0h-1zm1,0h1v0h-1zm-8,1m1,0h1v0h-1zm1,0h1v0h-1zm1,0h1v0h-1zm1,0h1v0h-1zm1,0h1v0h-1zm1,0h1v0h-1zm1,0h1v0h-1zm1,0h1v0h-1zm-8,1m1,0h1v0h-1zm1,0h1v0h-1zm1,0h1v0h-1zm1,0h1v0h-1zm1,0h1v0h-1zm1,0h1v0h-1zm1,0h1v0h-1zm1,0h1v0h-1z'/></g></svg>\\\\\\\"}\\\";\\n\\n\\tuint256 internal constant COLOR_BG_POS = 280 + 51;\\n\\tuint256 internal constant COLOR_1_POS = 334 + 51;\\n\\tuint256 internal constant COLOR_2_POS = 1179 + 51;\\n\\n\\tuint256 internal constant PATH_1_POS = 352 + 51;\\n\\tuint256 internal constant PATH_2_POS = 1197 + 51;\\n\\n\\tuint256 internal constant ADDRESS_NAME_POS = 72;\\n\\tuint256 internal constant ADDRESS_NAME_2_POS = 151;\\n\\n\\t// address(0) works for non-upgradeable contract, where implementation is the contract, see solidity-kit\\n\\tconstructor() UsingERC712WithDynamicChainId(address(0)) {}\\n\\n\\tfunction name() public pure override returns (string memory) {\\n\\t\\treturn \\\"Blockies\\\";\\n\\t}\\n\\n\\tfunction symbol() external pure returns (string memory) {\\n\\t\\treturn \\\"BLCK\\\";\\n\\t}\\n\\n\\tfunction tokenURI(uint256 id) external pure override returns (string memory str) {\\n\\t\\treturn _tokenURI(id);\\n\\t}\\n\\n\\tfunction supportsInterface(bytes4 id) public view override(BasicERC721, UsingERC4494Permit) returns (bool) {\\n\\t\\treturn BasicERC721.supportsInterface(id) || UsingERC4494Permit.supportsInterface(id);\\n\\t}\\n\\n\\tfunction registerIfNotAlready(uint256 id) external {\\n\\t\\trequire(id < 2**160, \\\"NONEXISTENT_TOKEN\\\");\\n\\t\\t(, uint256 blockNumber) = _ownerAndBlockNumberOf(id);\\n\\n\\t\\t// require(blockNumber == 0, \\\"ALREADY_REGISTERED\\\");\\n\\t\\tif (blockNumber == 0) {\\n\\t\\t\\t_owners[id] = (block.number << 160) | id;\\n\\t\\t\\temit Transfer(address(uint160(id)), address(uint160(id)), id);\\n\\t\\t}\\n\\t}\\n\\n\\t// ------------------------------------------------------------------------------------------------------------------\\n\\t// INTERNALS\\n\\t// ------------------------------------------------------------------------------------------------------------------\\n\\n\\tfunction _writeUint(\\n\\t\\tbytes memory data,\\n\\t\\tuint256 endPos,\\n\\t\\tuint256 num\\n\\t) internal pure {\\n\\t\\twhile (num != 0) {\\n\\t\\t\\tdata[endPos--] = bytes1(uint8(48 + (num % 10)));\\n\\t\\t\\tnum /= 10;\\n\\t\\t}\\n\\t}\\n\\n\\tfunction _seedrand(bytes memory seed) internal pure returns (Seed memory randseed) {\\n\\t\\tunchecked {\\n\\t\\t\\tfor (uint256 i = 0; i < seed.length; i++) {\\n\\t\\t\\t\\tuint8 j = uint8(i % 4);\\n\\t\\t\\t\\tif (j == 0) {\\n\\t\\t\\t\\t\\trandseed.s0 = (randseed.s0 << 5) - randseed.s0 + int32(uint32(uint8(seed[i])));\\n\\t\\t\\t\\t} else if (j == 1) {\\n\\t\\t\\t\\t\\trandseed.s1 = (randseed.s1 << 5) - randseed.s1 + int32(uint32(uint8(seed[i])));\\n\\t\\t\\t\\t} else if (j == 2) {\\n\\t\\t\\t\\t\\trandseed.s2 = (randseed.s2 << 5) - randseed.s2 + int32(uint32(uint8(seed[i])));\\n\\t\\t\\t\\t} else if (j == 3) {\\n\\t\\t\\t\\t\\trandseed.s3 = (randseed.s3 << 5) - randseed.s3 + int32(uint32(uint8(seed[i])));\\n\\t\\t\\t\\t}\\n\\t\\t\\t}\\n\\t\\t}\\n\\t}\\n\\n\\tfunction _rand(Seed memory randseed) internal pure returns (uint256 rnd) {\\n\\t\\tunchecked {\\n\\t\\t\\tint32 t = randseed.s0 ^ int32(randseed.s0 << 11);\\n\\t\\t\\trandseed.s0 = randseed.s1;\\n\\t\\t\\trandseed.s1 = randseed.s2;\\n\\t\\t\\trandseed.s2 = randseed.s3;\\n\\t\\t\\trandseed.s3 = randseed.s3 ^ (randseed.s3 >> 19) ^ t ^ (t >> 8);\\n\\t\\t\\trnd = uint32(randseed.s3);\\n\\t\\t}\\n\\t}\\n\\n\\tfunction _randhsl(Seed memory randseed)\\n\\t\\tinternal\\n\\t\\tpure\\n\\t\\treturns (\\n\\t\\t\\tuint16 hue,\\n\\t\\t\\tuint8 saturation,\\n\\t\\t\\tuint8 lightness\\n\\t\\t)\\n\\t{\\n\\t\\tunchecked {\\n\\t\\t\\t// saturation is the whole color spectrum\\n\\t\\t\\thue = uint16(((_rand(randseed) * 360) / 2147483648));\\n\\t\\t\\t// saturation goes from 40 to 100, it avoids greyish colors\\n\\t\\t\\tsaturation = uint8((_rand(randseed) * 60) / 2147483648 + 40);\\n\\t\\t\\t// lightness can be anything from 0 to 100, but probabilities are a bell curve around 50%\\n\\t\\t\\tlightness = uint8(\\n\\t\\t\\t\\t((_rand(randseed) + _rand(randseed) + _rand(randseed) + _rand(randseed)) * 25) / 2147483648\\n\\t\\t\\t);\\n\\t\\t}\\n\\t}\\n\\n\\tfunction _setColor(\\n\\t\\tbytes memory metadata,\\n\\t\\tSeed memory randseed,\\n\\t\\tuint8 i\\n\\t) internal pure {\\n\\t\\t(uint16 hue, uint8 saturation, uint8 lightness) = _randhsl(randseed);\\n\\t\\tuint256 pos = COLOR_BG_POS;\\n\\t\\tif (i == 1) {\\n\\t\\t\\tpos = COLOR_1_POS;\\n\\t\\t} else if (i == 2) {\\n\\t\\t\\tpos = COLOR_2_POS;\\n\\t\\t}\\n\\t\\t_writeUint(metadata, pos + 0, hue);\\n\\t\\t_writeUint(metadata, pos + 4, saturation);\\n\\t\\t_writeUint(metadata, pos + 9, lightness);\\n\\t}\\n\\n\\tfunction _writeUintAsHex(\\n\\t\\tbytes memory data,\\n\\t\\tuint256 endPos,\\n\\t\\tuint256 num\\n\\t) internal pure {\\n\\t\\twhile (num != 0) {\\n\\t\\t\\tdata[endPos--] = bytes1(hexAlphabet[num % 16]);\\n\\t\\t\\tnum /= 16;\\n\\t\\t}\\n\\t}\\n\\n\\tfunction _addressToString(address who) internal pure returns (string memory) {\\n\\t\\tbytes memory addr = \\\"0x0000000000000000000000000000000000000000\\\";\\n\\t\\t_writeUintAsHex(addr, 41, uint160(who));\\n\\t\\treturn string(addr);\\n\\t}\\n\\n\\tfunction _setPixel(\\n\\t\\tbytes memory metadata,\\n\\t\\tuint256 x,\\n\\t\\tuint256 y,\\n\\t\\tuint8 color\\n\\t) internal pure {\\n\\t\\tuint256 pathPos = 0;\\n\\t\\tif (color == 0) {\\n\\t\\t\\treturn;\\n\\t\\t}\\n\\t\\tif (color == 1) {\\n\\t\\t\\tpathPos = PATH_1_POS;\\n\\t\\t} else if (color == 2) {\\n\\t\\t\\tpathPos = PATH_2_POS;\\n\\t\\t}\\n\\t\\tuint256 pos = pathPos + y * 5 + (y * 8 + x) * 12 + 8;\\n\\t\\tmetadata[pos] = \\\"1\\\";\\n\\t}\\n\\n\\tfunction _tokenURI(uint256 id) internal pure returns (string memory) {\\n\\t\\tbytes memory metadata = TEMPLATE;\\n\\t\\t_writeUintAsHex(metadata, ADDRESS_NAME_POS, id);\\n\\t\\t_writeUintAsHex(metadata, ADDRESS_NAME_2_POS, id);\\n\\n\\t\\tSeed memory randseed = _seedrand(bytes(_addressToString(address(uint160(id)))));\\n\\n\\t\\t_setColor(metadata, randseed, 1);\\n\\t\\t_setColor(metadata, randseed, 0);\\n\\t\\t_setColor(metadata, randseed, 2);\\n\\n\\t\\tfor (uint256 y = 0; y < 8; y++) {\\n\\t\\t\\tuint8 p0 = uint8((_rand(randseed) * 23) / 2147483648 / 10);\\n\\t\\t\\tuint8 p1 = uint8((_rand(randseed) * 23) / 2147483648 / 10);\\n\\t\\t\\tuint8 p2 = uint8((_rand(randseed) * 23) / 2147483648 / 10);\\n\\t\\t\\tuint8 p3 = uint8((_rand(randseed) * 23) / 2147483648 / 10);\\n\\n\\t\\t\\t_setPixel(metadata, 0, y, p0);\\n\\t\\t\\t_setPixel(metadata, 1, y, p1);\\n\\t\\t\\t_setPixel(metadata, 2, y, p2);\\n\\t\\t\\t_setPixel(metadata, 3, y, p3);\\n\\t\\t\\t_setPixel(metadata, 4, y, p3);\\n\\t\\t\\t_setPixel(metadata, 5, y, p2);\\n\\t\\t\\t_setPixel(metadata, 6, y, p1);\\n\\t\\t\\t_setPixel(metadata, 7, y, p0);\\n\\t\\t}\\n\\n\\t\\treturn string(metadata);\\n\\t}\\n}\\n\",\"keccak256\":\"0xd819cfea9492a3ac38e3ac7bd12ace10b83b649c3e7bff67beb57a1b1759245c\",\"license\":\"AGPL-3.0-or-later\"}},\"version\":1}",
  "bytecode": "0x60c06040523480156200001157600080fd5b5046608081905260009062000027813062000033565b60a05250620000d49050565b60007f8cad95687ba82c2ce50e74f7b754645e5117c3a5bec8151c0726d5857980a8666200007c604080518082019091526008815267426c6f636b69657360c01b602082015290565b8051602091820120604051620000b693928791879101938452602084019290925260408301526001600160a01b0316606082015260800190565b60405160208183030381529060405280519060200120905092915050565b60805160a0516132ee620000fa60003960006113660152600061133001526132ee6000f3fe608060405234801561001057600080fd5b50600436106101a35760003560e01c806370a08231116100ee578063ab84ee6f11610097578063c87b56dd11610071578063c87b56dd146103e9578063e7f38fdb146103fc578063e985e9c51461040f578063f39452821461044b57600080fd5b8063ab84ee6f146103b0578063adc5fcc2146103c3578063b88d4fde146103d657600080fd5b806384b0196e116100c857806384b0196e1461034957806395d89b4114610364578063a22cb4651461039d57600080fd5b806370a08231146102fa578063745a41bc1461030d5780637ecebe001461032057600080fd5b806323b872dd1161015057806342842e0e1161012a57806342842e0e146102ad578063585956d6146102c05780636352211e146102e757600080fd5b806323b872dd1461026b57806330adf81f1461027e5780633644e515146102a557600080fd5b8063095ea7b311610181578063095ea7b314610228578063141a468c1461023d57806318160ddd1461025e57600080fd5b806301ffc9a7146101a857806306fdde03146101d0578063081812fc146101fd575b600080fd5b6101bb6101b6366004612476565b61046b565b60405190151581526020015b60405180910390f35b604080518082019091526008815267426c6f636b69657360c01b60208201525b6040516101c791906124e3565b61021061020b3660046124f6565b61048b565b6040516001600160a01b0390911681526020016101c7565b61023b610236366004612526565b61051b565b005b61025061024b3660046124f6565b61060e565b6040519081526020016101c7565b6001600160a01b03610250565b61023b610279366004612550565b610672565b6102507f49ecf333e5b8c95c40fdafc95c1ad136e8914a8fb55e9dc8bb01eaa83a2df9ad81565b61025061089b565b61023b6102bb366004612550565b6108aa565b6102507f045d890c79ffc118c4a2872a8cf3fee78fbf03c72a35e7fae867680021f3e1a481565b6102106102f53660046124f6565b6108ca565b61025061030836600461258c565b610926565b61023b61031b36600461264a565b6109c1565b61025061032e36600461258c565b6001600160a01b031660009081526004602052604090205490565b610351610a8e565b6040516101c797969594939291906126ab565b60408051808201909152600481527f424c434b0000000000000000000000000000000000000000000000000000000060208201526101f0565b61023b6103ab36600461275d565b610af1565b61023b6103be366004612799565b610b00565b6102506103d13660046124f6565b610b96565b61023b6103e4366004612799565b610ba1565b6101f06103f73660046124f6565b610dc4565b61023b61040a3660046124f6565b610dcf565b6101bb61041d3660046127e9565b6001600160a01b03918216600090815260026020908152604080832093909416825291909152205460ff1690565b61045e61045936600461281c565b610e7a565b6040516101c79190612891565b600061047682610fc5565b8061048557506104858261105e565b92915050565b6000806000610499846110c6565b90925090506001600160a01b0382166104ed5760405162461bcd60e51b81526020600482015260116024820152702727a722ac24a9aa22a72a2faa27a5a2a760791b60448201526064015b60405180910390fd5b8015610511575050506000908152600360205260409020546001600160a01b031690565b5060009392505050565b60008061052783611127565b90925090506001600160a01b0382166105765760405162461bcd60e51b81526020600482015260116024820152702727a722ac24a9aa22a72a2faa27a5a2a760791b60448201526064016104e4565b336001600160a01b03831614806105b057506001600160a01b038216600090815260026020908152604080832033845290915290205460ff165b6105fc5760405162461bcd60e51b815260206004820152601560248201527f554e415554484f52495a45445f415050524f56414c000000000000000000000060448201526064016104e4565b61060882828686611175565b50505050565b600080600061061c84611127565b90925090506001600160a01b03821661066b5760405162461bcd60e51b81526020600482015260116024820152702727a722ac24a9aa22a72a2faa27a5a2a760791b60448201526064016104e4565b9392505050565b60008061067e836110c6565b90925090506001600160a01b0382166106cd5760405162461bcd60e51b81526020600482015260116024820152702727a722ac24a9aa22a72a2faa27a5a2a760791b60448201526064016104e4565b846001600160a01b0316826001600160a01b03161461072e5760405162461bcd60e51b815260206004820152600960248201527f4e4f545f4f574e4552000000000000000000000000000000000000000000000060448201526064016104e4565b6001600160a01b0384166107845760405162461bcd60e51b815260206004820152601260248201527f4e4f545f544f5f5a45524f41444452455353000000000000000000000000000060448201526064016104e4565b306001600160a01b038516036107dc5760405162461bcd60e51b815260206004820152600b60248201527f4e4f545f544f5f5448495300000000000000000000000000000000000000000060448201526064016104e4565b336001600160a01b038616146108895780801561080f57506000838152600360205260409020546001600160a01b031633145b8061083d57506001600160a01b038516600090815260026020908152604080832033845290915290205460ff165b6108895760405162461bcd60e51b815260206004820152601560248201527f554e415554484f52495a45445f5452414e53464552000000000000000000000060448201526064016104e4565b61089485858561128c565b5050505050565b60006108a561132b565b905090565b6108c583838360405180602001604052806000815250610ba1565b505050565b60006108d58261138c565b90506001600160a01b0381166109215760405162461bcd60e51b81526020600482015260116024820152702727a722ac24a9aa22a72a2faa27a5a2a760791b60448201526064016104e4565b919050565b60006001600160a01b03821661097e5760405162461bcd60e51b815260206004820152601260248201527f5a45524f5f414444524553535f4f574e4552000000000000000000000000000060448201526064016104e4565b506001600160a01b038116600081815260016020526040812054916109a290611127565b915050806000036109bb57816109b7816128ff565b9250505b50919050565b42821015610a115760405162461bcd60e51b815260206004820152601760248201527f5045524d49545f444541444c494e455f4558504952454400000000000000000060448201526064016104e4565b600080610a1d85611127565b90925090506001600160a01b038216610a6c5760405162461bcd60e51b81526020600482015260116024820152702727a722ac24a9aa22a72a2faa27a5a2a760791b60448201526064016104e4565b610a7a8287878785886113be565b610a8682828888611175565b505050505050565b60006060808280808346600d610abf604080518082019091526008815267426c6f636b69657360c01b602082015290565b6040805160008082528183019092526020810182815260f89490941b9c929b5092995092975030965091945092509050565b610afc3383836114eb565b5050565b42821015610b505760405162461bcd60e51b815260206004820152601760248201527f5045524d49545f444541444c494e455f4558504952454400000000000000000060448201526064016104e4565b6001600160a01b03841660009081526004602052604081208054610b8a92879287928792909190610b80836128ff565b9190505585611576565b610608848460016114eb565b60006104858261060e565b600080610bad846110c6565b90925090506001600160a01b038216610bfc5760405162461bcd60e51b81526020600482015260116024820152702727a722ac24a9aa22a72a2faa27a5a2a760791b60448201526064016104e4565b856001600160a01b0316826001600160a01b031614610c5d5760405162461bcd60e51b815260206004820152600960248201527f4e4f545f4f574e4552000000000000000000000000000000000000000000000060448201526064016104e4565b6001600160a01b038516610cb35760405162461bcd60e51b815260206004820152601260248201527f4e4f545f544f5f5a45524f41444452455353000000000000000000000000000060448201526064016104e4565b306001600160a01b03861603610d0b5760405162461bcd60e51b815260206004820152600b60248201527f4e4f545f544f5f5448495300000000000000000000000000000000000000000060448201526064016104e4565b336001600160a01b03871614610db857808015610d3e57506000848152600360205260409020546001600160a01b031633145b80610d6c57506001600160a01b038616600090815260026020908152604080832033845290915290205460ff165b610db85760405162461bcd60e51b815260206004820152601560248201527f554e415554484f52495a45445f5452414e53464552000000000000000000000060448201526064016104e4565b610a868686868661169c565b606061048582611710565b600160a01b8110610e165760405162461bcd60e51b81526020600482015260116024820152702727a722ac24a9aa22a72a2faa27a5a2a760791b60448201526064016104e4565b6000610e2182611127565b91505080600003610afc576000828152602081905260408082204360a01b851790555183916001600160a01b0383169182917fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef91a45050565b60608167ffffffffffffffff811115610e9557610e956125a7565b604051908082528060200260200182016040528015610eda57816020015b6040805180820190915260008082526020820152815260200190600190039081610eb35790505b50905060005b82811015610fbe576000848483818110610efc57610efc612919565b602090810292909201356000818152928390526040909220549192508190506001600160a01b038116158015610f355750600160a01b83105b15610f3d5750815b80858581518110610f5057610f50612919565b6020026020010151600001906001600160a01b031690816001600160a01b03168152505060a082901c6affffffffffffffffffffff16858581518110610f9857610f98612919565b602002602001015160200181815250505050508080610fb6906128ff565b915050610ee0565b5092915050565b60007f01ffc9a7000000000000000000000000000000000000000000000000000000006001600160e01b03198316148061102857507f80ac58cd000000000000000000000000000000000000000000000000000000006001600160e01b03198316145b806104855750506001600160e01b0319167f5b5e139f000000000000000000000000000000000000000000000000000000001490565b60006001600160e01b031982167f5604e22500000000000000000000000000000000000000000000000000000000148061048557506001600160e01b031982167fefdb586b000000000000000000000000000000000000000000000000000000001492915050565b60008181526020819052604081205490816001600160a01b0381161580156110f15750600160a01b84105b156110fa578392505b7f800000000000000000000000000000000000000000000000000000000000000080821614915050915091565b60008181526020819052604081205490816001600160a01b0381161580156111525750600160a01b84105b1561115b578392505b60a081901c6affffffffffffffffffffff16915050915091565b6001600160a01b0382166111b757826000036111925760006111a3565b836001600160a01b031660a084901b175b600082815260208190526040902055611245565b826000036111c65760006111d7565b836001600160a01b031660a084901b175b6000828152602081815260408083207f800000000000000000000000000000000000000000000000000000000000000094909417909355600390522080547fffffffffffffffffffffffff0000000000000000000000000000000000000000166001600160a01b0384161790555b80826001600160a01b0316856001600160a01b03167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92560405160405180910390a450505050565b6001600160a01b038083166000908152600160208190526040909120805490910190558316156112d7576001600160a01b038316600090815260016020526040902080546000190190555b6000818152602081905260408082204360a01b6001600160a01b0380871691821790925591518493918716917fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef91a4505050565b6000467f000000000000000000000000000000000000000000000000000000000000000081146113645761135f8130611a27565b611386565b7f00000000000000000000000000000000000000000000000000000000000000005b91505090565b6000818152602081905260409020546001600160a01b0381161580156113b55750600160a01b82105b15610921575090565b60006113c861089b565b604080517f49ecf333e5b8c95c40fdafc95c1ad136e8914a8fb55e9dc8bb01eaa83a2df9ad60208201526001600160a01b03891691810191909152606081018790526080810185905260a0810186905260c001604051602081830303815290604052805190602001206040516020016114739291907f190100000000000000000000000000000000000000000000000000000000000081526002810192909252602282015260420190565b604051602081830303815290604052805190602001209050611496878284611ac6565b6114e25760405162461bcd60e51b815260206004820152601160248201527f494e56414c49445f5349474e415455524500000000000000000000000000000060448201526064016104e4565b50505050505050565b6001600160a01b0383811660008181526002602090815260408083209487168084529482529182902080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff001686151590811790915591519182527f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31910160405180910390a3505050565b600061158061089b565b604080517f045d890c79ffc118c4a2872a8cf3fee78fbf03c72a35e7fae867680021f3e1a460208201526001600160a01b03808a169282019290925290871660608201526080810185905260a0810186905260c0016040516020818303038152906040528051906020012060405160200161162d9291907f190100000000000000000000000000000000000000000000000000000000000081526002810192909252602282015260420190565b604051602081830303815290604052805190602001209050611650868284611ac6565b610a865760405162461bcd60e51b815260206004820152601160248201527f494e56414c49445f5349474e415455524500000000000000000000000000000060448201526064016104e4565b6116a784848461128c565b6001600160a01b0383163b15610608576116c43385858585611c36565b6106085760405162461bcd60e51b815260206004820152601860248201527f4552433732315f5452414e534645525f52454a4543544544000000000000000060448201526064016104e4565b606060006040518061084001604052806108138152602001612a7c6108139139905061173e81604885611ce6565b61174a81609785611ce6565b600061175d61175885611dc0565b611df4565b905061176b82826001611f3c565b61177782826000611f3c565b61178382826002611f3c565b60005b6008811015611a1e576000600a63800000006117f2858051602082018051600390810b8452604084018051820b9092526060909301805180850b9283905260139290921d90911882840b600b1b90921891821891830b60081d919091189182900b905263ffffffff1690565b6117fd90601761292f565b6118079190612964565b6118119190612964565b90506000600a6380000000611876868051602082018051600390810b8452604084018051820b9092526060909301805180850b9283905260139290921d90911882840b600b1b90921891821891830b60081d919091189182900b905263ffffffff1690565b61188190601761292f565b61188b9190612964565b6118959190612964565b90506000600a63800000006118fa878051602082018051600390810b8452604084018051820b9092526060909301805180850b9283905260139290921d90911882840b600b1b90921891821891830b60081d919091189182900b905263ffffffff1690565b61190590601761292f565b61190f9190612964565b6119199190612964565b90506000600a638000000061197e888051602082018051600390810b8452604084018051820b9092526060909301805180850b9283905260139290921d90911882840b600b1b90921891821891830b60081d919091189182900b905263ffffffff1690565b61198990601761292f565b6119939190612964565b61199d9190612964565b90506119ac8760008787611fc1565b6119b98760018786611fc1565b6119c68760028785611fc1565b6119d38760038784611fc1565b6119e08760048784611fc1565b6119ed8760058785611fc1565b6119fa8760068786611fc1565b611a078760078787611fc1565b505050508080611a16906128ff565b915050611786565b50909392505050565b60007f8cad95687ba82c2ce50e74f7b754645e5117c3a5bec8151c0726d5857980a866611a6f604080518082019091526008815267426c6f636b69657360c01b602082015290565b8051602091820120604051611aa893928791879101938452602084019290925260408301526001600160a01b0316606082015260800190565b60405160208183030381529060405280519060200120905092915050565b6000806000611ad585856120b1565b90925090506000816004811115611aee57611aee612978565b148015611b0c5750856001600160a01b0316826001600160a01b0316145b15611b1c5760019250505061066b565b600080876001600160a01b0316631626ba7e60e01b8888604051602401611b4492919061298e565b60408051601f198184030181529181526020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff166001600160e01b0319909416939093179092529051611b9791906129af565b600060405180830381855afa9150503d8060008114611bd2576040519150601f19603f3d011682016040523d82523d6000602084013e611bd7565b606091505b5091509150818015611bea575080516020145b8015611c2a575080517f1626ba7e0000000000000000000000000000000000000000000000000000000090611c2890830160209081019084016129cb565b145b98975050505050505050565b600080846001600160a01b031663150b7a02888887876040518563ffffffff1660e01b8152600401611c6b94939291906129e4565b6020604051808303816000875af1158015611c8a573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611cae9190612a20565b6001600160e01b0319167f150b7a02000000000000000000000000000000000000000000000000000000001491505095945050505050565b80156108c5576040805180820190915260108082527f30313233343536373839616263646566000000000000000000000000000000006020830152611d2b9083612a3d565b81518110611d3b57611d3b612919565b01602001517fff00000000000000000000000000000000000000000000000000000000000000168383611d6d81612a51565b945081518110611d7f57611d7f612919565b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a905350611db9601082612964565b9050611ce6565b606060006040518060600160405280602a815260200161328f602a91399050610485816029856001600160a01b0316611ce6565b6040805160808101825260008082526020820181905291810182905260608101829052905b82518110156109bb57600381166000819003611e6557838281518110611e4157611e41612919565b602091010151835160f89190911c600382810b60051b9290920301900b8352611f33565b8060ff16600103611eab57838281518110611e8257611e82612919565b60209101810151908401805160f89290921c600383810b60051b939093030190910b9052611f33565b8060ff16600203611ef157838281518110611ec857611ec8612919565b60209101015160408401805160f89290921c600383810b60051b939093030190910b9052611f33565b8060ff16600303611f3357838281518110611f0e57611f0e612919565b60209101015160608401805160f89290921c600383810b60051b939093030190910b90525b50600101611e19565b6000806000611f4a856120f6565b9194509250905061014b60ff8516600103611f685750610181611f78565b8460ff16600203611f7857506104ce5b611f9187611f87836000612a68565b8661ffff166122f3565b611fa987611fa0836004612a68565b8560ff166122f3565b6114e287611fb8836009612a68565b8460ff166122f3565b60008160ff16600003611fd45750610608565b8160ff16600103611fe85750610193611ff8565b8160ff16600203611ff857506104e05b60008461200685600861292f565b6120109190612a68565b61201b90600c61292f565b61202685600561292f565b6120309084612a68565b61203a9190612a68565b612045906008612a68565b90507f310000000000000000000000000000000000000000000000000000000000000086828151811061207a5761207a612919565b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a905350505050505050565b60008082516041036120e75760208301516040840151606085015160001a6120db87828585612370565b945094505050506120ef565b506000905060025b9250929050565b6000806000638000000061215a858051602082018051600390810b8452604084018051820b9092526060909301805180850b9283905260139290921d90911882840b600b1b90921891821891830b60081d919091189182900b905263ffffffff1690565b610168028161216b5761216b61294e565b04925063800000006121cd858051602082018051600390810b8452604084018051820b9092526060909301805180850b9283905260139290921d90911882840b600b1b90921891821891830b60081d919091189182900b905263ffffffff1690565b603c02816121dd576121dd61294e565b0460280191506380000000612242858051602082018051600390810b8452604084018051820b9092526060909301805180850b9283905260139290921d90911882840b600b1b90921891821891830b60081d919091189182900b905263ffffffff1690565b855160208701805160408901805160608b018051600381810b808f52601390811d90921888820b600b90811b90991890811890820b600890811d9190911880830b9889905288841d90981896820b808a1b1896871896820b811d9690961880820b958690529185901d90941892840b9687901b90961891821891830b90931d189081900b90915263ffffffff9182169282169116010101601902816122e9576122e961294e565b0490509193909250565b80156108c557612304600a82612a3d565b61230f906030612a68565b60f81b838361231d81612a51565b94508151811061232f5761232f612919565b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a905350612369600a82612964565b90506122f3565b6000807f7fffffffffffffffffffffffffffffff5d576e7357a4501ddfe92f46681b20a08311156123a75750600090506003612454565b8460ff16601b141580156123bf57508460ff16601c14155b156123d05750600090506004612454565b6040805160008082526020820180845289905260ff881692820192909252606081018690526080810185905260019060a0016020604051602081039080840390855afa158015612424573d6000803e3d6000fd5b5050604051601f1901519150506001600160a01b03811661244d57600060019250925050612454565b9150600090505b94509492505050565b6001600160e01b03198116811461247357600080fd5b50565b60006020828403121561248857600080fd5b813561066b8161245d565b60005b838110156124ae578181015183820152602001612496565b50506000910152565b600081518084526124cf816020860160208601612493565b601f01601f19169290920160200192915050565b60208152600061066b60208301846124b7565b60006020828403121561250857600080fd5b5035919050565b80356001600160a01b038116811461092157600080fd5b6000806040838503121561253957600080fd5b6125428361250f565b946020939093013593505050565b60008060006060848603121561256557600080fd5b61256e8461250f565b925061257c6020850161250f565b9150604084013590509250925092565b60006020828403121561259e57600080fd5b61066b8261250f565b634e487b7160e01b600052604160045260246000fd5b600082601f8301126125ce57600080fd5b813567ffffffffffffffff808211156125e9576125e96125a7565b604051601f8301601f19908116603f01168101908282118183101715612611576126116125a7565b8160405283815286602085880101111561262a57600080fd5b836020870160208301376000602085830101528094505050505092915050565b6000806000806080858703121561266057600080fd5b6126698561250f565b93506020850135925060408501359150606085013567ffffffffffffffff81111561269357600080fd5b61269f878288016125bd565b91505092959194509250565b7fff00000000000000000000000000000000000000000000000000000000000000881681526000602060e0818401526126e760e084018a6124b7565b83810360408501526126f9818a6124b7565b606085018990526001600160a01b038816608086015260a0850187905284810360c0860152855180825283870192509083019060005b8181101561274b5783518352928401929184019160010161272f565b50909c9b505050505050505050505050565b6000806040838503121561277057600080fd5b6127798361250f565b91506020830135801515811461278e57600080fd5b809150509250929050565b600080600080608085870312156127af57600080fd5b6127b88561250f565b93506127c66020860161250f565b925060408501359150606085013567ffffffffffffffff81111561269357600080fd5b600080604083850312156127fc57600080fd5b6128058361250f565b91506128136020840161250f565b90509250929050565b6000806020838503121561282f57600080fd5b823567ffffffffffffffff8082111561284757600080fd5b818501915085601f83011261285b57600080fd5b81358181111561286a57600080fd5b8660208260051b850101111561287f57600080fd5b60209290920196919550909350505050565b602080825282518282018190526000919060409081850190868401855b828110156128dc57815180516001600160a01b031685528601518685015292840192908501906001016128ae565b5091979650505050505050565b634e487b7160e01b600052601160045260246000fd5b60006000198203612912576129126128e9565b5060010190565b634e487b7160e01b600052603260045260246000fd5b6000816000190483118215151615612949576129496128e9565b500290565b634e487b7160e01b600052601260045260246000fd5b6000826129735761297361294e565b500490565b634e487b7160e01b600052602160045260246000fd5b8281526040602082015260006129a760408301846124b7565b949350505050565b600082516129c1818460208701612493565b9190910192915050565b6000602082840312156129dd57600080fd5b5051919050565b60006001600160a01b03808716835280861660208401525083604083015260806060830152612a1660808301846124b7565b9695505050505050565b600060208284031215612a3257600080fd5b815161066b8161245d565b600082612a4c57612a4c61294e565b500690565b600081612a6057612a606128e9565b506000190190565b80820180821115610485576104856128e956fe646174613a6170706c69636174696f6e2f6a736f6e2c7b226e616d65223a22307830303030303030303030303030303030303030303030303030303030303030303030303030303030222c226465736372697074696f6e223a2241253230426c6f636b6965253230666f72253230307830303030303030303030303030303030303030303030303030303030303030303030303030303030222c22696d616765223a22646174613a696d6167652f7376672b786d6c2c3c737667253230786d6c6e733d27687474703a2f2f7777772e77332e6f72672f323030302f7376672725323073686170652d72656e646572696e673d27637269737045646765732725323077696474683d27353132272532306865696768743d27353132273e3c672532307472616e73666f726d3d277363616c6528363429273e3c7061746825323066696c6c3d2768736c283030302c303030252c303030252927253230643d274d302c3068387638682d387a272f3e3c7061746825323066696c6c3d2768736c283030302c303030252c303030252927253230643d274d302c3068317630682d317a6d312c3068317630682d317a6d312c3068317630682d317a6d312c3068317630682d317a6d312c3068317630682d317a6d312c3068317630682d317a6d312c3068317630682d317a6d312c3068317630682d317a6d2d382c316d312c3068317630682d317a6d312c3068317630682d317a6d312c3068317630682d317a6d312c3068317630682d317a6d312c3068317630682d317a6d312c3068317630682d317a6d312c3068317630682d317a6d312c3068317630682d317a6d2d382c316d312c3068317630682d317a6d312c3068317630682d317a6d312c3068317630682d317a6d312c3068317630682d317a6d312c3068317630682d317a6d312c3068317630682d317a6d312c3068317630682d317a6d312c3068317630682d317a6d2d382c316d312c3068317630682d317a6d312c3068317630682d317a6d312c3068317630682d317a6d312c3068317630682d317a6d312c3068317630682d317a6d312c3068317630682d317a6d312c3068317630682d317a6d312c3068317630682d317a6d2d382c316d312c3068317630682d317a6d312c3068317630682d317a6d312c3068317630682d317a6d312c3068317630682d317a6d312c3068317630682d317a6d312c3068317630682d317a6d312c3068317630682d317a6d312c3068317630682d317a6d2d382c316d312c3068317630682d317a6d312c3068317630682d317a6d312c3068317630682d317a6d312c3068317630682d317a6d312c3068317630682d317a6d312c3068317630682d317a6d312c3068317630682d317a6d312c3068317630682d317a6d2d382c316d312c3068317630682d317a6d312c3068317630682d317a6d312c3068317630682d317a6d312c3068317630682d317a6d312c3068317630682d317a6d312c3068317630682d317a6d312c3068317630682d317a6d312c3068317630682d317a6d2d382c316d312c3068317630682d317a6d312c3068317630682d317a6d312c3068317630682d317a6d312c3068317630682d317a6d312c3068317630682d317a6d312c3068317630682d317a6d312c3068317630682d317a6d312c3068317630682d317a272f3e3c7061746825323066696c6c3d2768736c283030302c303030252c303030252927253230643d274d302c3068317630682d317a6d312c3068317630682d317a6d312c3068317630682d317a6d312c3068317630682d317a6d312c3068317630682d317a6d312c3068317630682d317a6d312c3068317630682d317a6d312c3068317630682d317a6d2d382c316d312c3068317630682d317a6d312c3068317630682d317a6d312c3068317630682d317a6d312c3068317630682d317a6d312c3068317630682d317a6d312c3068317630682d317a6d312c3068317630682d317a6d312c3068317630682d317a6d2d382c316d312c3068317630682d317a6d312c3068317630682d317a6d312c3068317630682d317a6d312c3068317630682d317a6d312c3068317630682d317a6d312c3068317630682d317a6d312c3068317630682d317a6d312c3068317630682d317a6d2d382c316d312c3068317630682d317a6d312c3068317630682d317a6d312c3068317630682d317a6d312c3068317630682d317a6d312c3068317630682d317a6d312c3068317630682d317a6d312c3068317630682d317a6d312c3068317630682d317a6d2d382c316d312c3068317630682d317a6d312c3068317630682d317a6d312c3068317630682d317a6d312c3068317630682d317a6d312c3068317630682d317a6d312c3068317630682d317a6d312c3068317630682d317a6d312c3068317630682d317a6d2d382c316d312c3068317630682d317a6d312c3068317630682d317a6d312c3068317630682d317a6d312c3068317630682d317a6d312c3068317630682d317a6d312c3068317630682d317a6d312c3068317630682d317a6d312c3068317630682d317a6d2d382c316d312c3068317630682d317a6d312c3068317630682d317a6d312c3068317630682d317a6d312c3068317630682d317a6d312c3068317630682d317a6d312c3068317630682d317a6d312c3068317630682d317a6d312c3068317630682d317a6d2d382c316d312c3068317630682d317a6d312c3068317630682d317a6d312c3068317630682d317a6d312c3068317630682d317a6d312c3068317630682d317a6d312c3068317630682d317a6d312c3068317630682d317a6d312c3068317630682d317a272f3e3c2f673e3c2f7376673e227d307830303030303030303030303030303030303030303030303030303030303030303030303030303030a264697066735822122024871b21c072ffd9af3c731991ddfbb5176074c03f075869e2e0bc8f954b0af764736f6c63430008100033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106101a35760003560e01c806370a08231116100ee578063ab84ee6f11610097578063c87b56dd11610071578063c87b56dd146103e9578063e7f38fdb146103fc578063e985e9c51461040f578063f39452821461044b57600080fd5b8063ab84ee6f146103b0578063adc5fcc2146103c3578063b88d4fde146103d657600080fd5b806384b0196e116100c857806384b0196e1461034957806395d89b4114610364578063a22cb4651461039d57600080fd5b806370a08231146102fa578063745a41bc1461030d5780637ecebe001461032057600080fd5b806323b872dd1161015057806342842e0e1161012a57806342842e0e146102ad578063585956d6146102c05780636352211e146102e757600080fd5b806323b872dd1461026b57806330adf81f1461027e5780633644e515146102a557600080fd5b8063095ea7b311610181578063095ea7b314610228578063141a468c1461023d57806318160ddd1461025e57600080fd5b806301ffc9a7146101a857806306fdde03146101d0578063081812fc146101fd575b600080fd5b6101bb6101b6366004612476565b61046b565b60405190151581526020015b60405180910390f35b604080518082019091526008815267426c6f636b69657360c01b60208201525b6040516101c791906124e3565b61021061020b3660046124f6565b61048b565b6040516001600160a01b0390911681526020016101c7565b61023b610236366004612526565b61051b565b005b61025061024b3660046124f6565b61060e565b6040519081526020016101c7565b6001600160a01b03610250565b61023b610279366004612550565b610672565b6102507f49ecf333e5b8c95c40fdafc95c1ad136e8914a8fb55e9dc8bb01eaa83a2df9ad81565b61025061089b565b61023b6102bb366004612550565b6108aa565b6102507f045d890c79ffc118c4a2872a8cf3fee78fbf03c72a35e7fae867680021f3e1a481565b6102106102f53660046124f6565b6108ca565b61025061030836600461258c565b610926565b61023b61031b36600461264a565b6109c1565b61025061032e36600461258c565b6001600160a01b031660009081526004602052604090205490565b610351610a8e565b6040516101c797969594939291906126ab565b60408051808201909152600481527f424c434b0000000000000000000000000000000000000000000000000000000060208201526101f0565b61023b6103ab36600461275d565b610af1565b61023b6103be366004612799565b610b00565b6102506103d13660046124f6565b610b96565b61023b6103e4366004612799565b610ba1565b6101f06103f73660046124f6565b610dc4565b61023b61040a3660046124f6565b610dcf565b6101bb61041d3660046127e9565b6001600160a01b03918216600090815260026020908152604080832093909416825291909152205460ff1690565b61045e61045936600461281c565b610e7a565b6040516101c79190612891565b600061047682610fc5565b8061048557506104858261105e565b92915050565b6000806000610499846110c6565b90925090506001600160a01b0382166104ed5760405162461bcd60e51b81526020600482015260116024820152702727a722ac24a9aa22a72a2faa27a5a2a760791b60448201526064015b60405180910390fd5b8015610511575050506000908152600360205260409020546001600160a01b031690565b5060009392505050565b60008061052783611127565b90925090506001600160a01b0382166105765760405162461bcd60e51b81526020600482015260116024820152702727a722ac24a9aa22a72a2faa27a5a2a760791b60448201526064016104e4565b336001600160a01b03831614806105b057506001600160a01b038216600090815260026020908152604080832033845290915290205460ff165b6105fc5760405162461bcd60e51b815260206004820152601560248201527f554e415554484f52495a45445f415050524f56414c000000000000000000000060448201526064016104e4565b61060882828686611175565b50505050565b600080600061061c84611127565b90925090506001600160a01b03821661066b5760405162461bcd60e51b81526020600482015260116024820152702727a722ac24a9aa22a72a2faa27a5a2a760791b60448201526064016104e4565b9392505050565b60008061067e836110c6565b90925090506001600160a01b0382166106cd5760405162461bcd60e51b81526020600482015260116024820152702727a722ac24a9aa22a72a2faa27a5a2a760791b60448201526064016104e4565b846001600160a01b0316826001600160a01b03161461072e5760405162461bcd60e51b815260206004820152600960248201527f4e4f545f4f574e4552000000000000000000000000000000000000000000000060448201526064016104e4565b6001600160a01b0384166107845760405162461bcd60e51b815260206004820152601260248201527f4e4f545f544f5f5a45524f41444452455353000000000000000000000000000060448201526064016104e4565b306001600160a01b038516036107dc5760405162461bcd60e51b815260206004820152600b60248201527f4e4f545f544f5f5448495300000000000000000000000000000000000000000060448201526064016104e4565b336001600160a01b038616146108895780801561080f57506000838152600360205260409020546001600160a01b031633145b8061083d57506001600160a01b038516600090815260026020908152604080832033845290915290205460ff165b6108895760405162461bcd60e51b815260206004820152601560248201527f554e415554484f52495a45445f5452414e53464552000000000000000000000060448201526064016104e4565b61089485858561128c565b5050505050565b60006108a561132b565b905090565b6108c583838360405180602001604052806000815250610ba1565b505050565b60006108d58261138c565b90506001600160a01b0381166109215760405162461bcd60e51b81526020600482015260116024820152702727a722ac24a9aa22a72a2faa27a5a2a760791b60448201526064016104e4565b919050565b60006001600160a01b03821661097e5760405162461bcd60e51b815260206004820152601260248201527f5a45524f5f414444524553535f4f574e4552000000000000000000000000000060448201526064016104e4565b506001600160a01b038116600081815260016020526040812054916109a290611127565b915050806000036109bb57816109b7816128ff565b9250505b50919050565b42821015610a115760405162461bcd60e51b815260206004820152601760248201527f5045524d49545f444541444c494e455f4558504952454400000000000000000060448201526064016104e4565b600080610a1d85611127565b90925090506001600160a01b038216610a6c5760405162461bcd60e51b81526020600482015260116024820152702727a722ac24a9aa22a72a2faa27a5a2a760791b60448201526064016104e4565b610a7a8287878785886113be565b610a8682828888611175565b505050505050565b60006060808280808346600d610abf604080518082019091526008815267426c6f636b69657360c01b602082015290565b6040805160008082528183019092526020810182815260f89490941b9c929b5092995092975030965091945092509050565b610afc3383836114eb565b5050565b42821015610b505760405162461bcd60e51b815260206004820152601760248201527f5045524d49545f444541444c494e455f4558504952454400000000000000000060448201526064016104e4565b6001600160a01b03841660009081526004602052604081208054610b8a92879287928792909190610b80836128ff565b9190505585611576565b610608848460016114eb565b60006104858261060e565b600080610bad846110c6565b90925090506001600160a01b038216610bfc5760405162461bcd60e51b81526020600482015260116024820152702727a722ac24a9aa22a72a2faa27a5a2a760791b60448201526064016104e4565b856001600160a01b0316826001600160a01b031614610c5d5760405162461bcd60e51b815260206004820152600960248201527f4e4f545f4f574e4552000000000000000000000000000000000000000000000060448201526064016104e4565b6001600160a01b038516610cb35760405162461bcd60e51b815260206004820152601260248201527f4e4f545f544f5f5a45524f41444452455353000000000000000000000000000060448201526064016104e4565b306001600160a01b03861603610d0b5760405162461bcd60e51b815260206004820152600b60248201527f4e4f545f544f5f5448495300000000000000000000000000000000000000000060448201526064016104e4565b336001600160a01b03871614610db857808015610d3e57506000848152600360205260409020546001600160a01b031633145b80610d6c57506001600160a01b038616600090815260026020908152604080832033845290915290205460ff165b610db85760405162461bcd60e51b815260206004820152601560248201527f554e415554484f52495a45445f5452414e53464552000000000000000000000060448201526064016104e4565b610a868686868661169c565b606061048582611710565b600160a01b8110610e165760405162461bcd60e51b81526020600482015260116024820152702727a722ac24a9aa22a72a2faa27a5a2a760791b60448201526064016104e4565b6000610e2182611127565b91505080600003610afc576000828152602081905260408082204360a01b851790555183916001600160a01b0383169182917fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef91a45050565b60608167ffffffffffffffff811115610e9557610e956125a7565b604051908082528060200260200182016040528015610eda57816020015b6040805180820190915260008082526020820152815260200190600190039081610eb35790505b50905060005b82811015610fbe576000848483818110610efc57610efc612919565b602090810292909201356000818152928390526040909220549192508190506001600160a01b038116158015610f355750600160a01b83105b15610f3d5750815b80858581518110610f5057610f50612919565b6020026020010151600001906001600160a01b031690816001600160a01b03168152505060a082901c6affffffffffffffffffffff16858581518110610f9857610f98612919565b602002602001015160200181815250505050508080610fb6906128ff565b915050610ee0565b5092915050565b60007f01ffc9a7000000000000000000000000000000000000000000000000000000006001600160e01b03198316148061102857507f80ac58cd000000000000000000000000000000000000000000000000000000006001600160e01b03198316145b806104855750506001600160e01b0319167f5b5e139f000000000000000000000000000000000000000000000000000000001490565b60006001600160e01b031982167f5604e22500000000000000000000000000000000000000000000000000000000148061048557506001600160e01b031982167fefdb586b000000000000000000000000000000000000000000000000000000001492915050565b60008181526020819052604081205490816001600160a01b0381161580156110f15750600160a01b84105b156110fa578392505b7f800000000000000000000000000000000000000000000000000000000000000080821614915050915091565b60008181526020819052604081205490816001600160a01b0381161580156111525750600160a01b84105b1561115b578392505b60a081901c6affffffffffffffffffffff16915050915091565b6001600160a01b0382166111b757826000036111925760006111a3565b836001600160a01b031660a084901b175b600082815260208190526040902055611245565b826000036111c65760006111d7565b836001600160a01b031660a084901b175b6000828152602081815260408083207f800000000000000000000000000000000000000000000000000000000000000094909417909355600390522080547fffffffffffffffffffffffff0000000000000000000000000000000000000000166001600160a01b0384161790555b80826001600160a01b0316856001600160a01b03167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92560405160405180910390a450505050565b6001600160a01b038083166000908152600160208190526040909120805490910190558316156112d7576001600160a01b038316600090815260016020526040902080546000190190555b6000818152602081905260408082204360a01b6001600160a01b0380871691821790925591518493918716917fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef91a4505050565b6000467f000000000000000000000000000000000000000000000000000000000000000081146113645761135f8130611a27565b611386565b7f00000000000000000000000000000000000000000000000000000000000000005b91505090565b6000818152602081905260409020546001600160a01b0381161580156113b55750600160a01b82105b15610921575090565b60006113c861089b565b604080517f49ecf333e5b8c95c40fdafc95c1ad136e8914a8fb55e9dc8bb01eaa83a2df9ad60208201526001600160a01b03891691810191909152606081018790526080810185905260a0810186905260c001604051602081830303815290604052805190602001206040516020016114739291907f190100000000000000000000000000000000000000000000000000000000000081526002810192909252602282015260420190565b604051602081830303815290604052805190602001209050611496878284611ac6565b6114e25760405162461bcd60e51b815260206004820152601160248201527f494e56414c49445f5349474e415455524500000000000000000000000000000060448201526064016104e4565b50505050505050565b6001600160a01b0383811660008181526002602090815260408083209487168084529482529182902080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff001686151590811790915591519182527f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31910160405180910390a3505050565b600061158061089b565b604080517f045d890c79ffc118c4a2872a8cf3fee78fbf03c72a35e7fae867680021f3e1a460208201526001600160a01b03808a169282019290925290871660608201526080810185905260a0810186905260c0016040516020818303038152906040528051906020012060405160200161162d9291907f190100000000000000000000000000000000000000000000000000000000000081526002810192909252602282015260420190565b604051602081830303815290604052805190602001209050611650868284611ac6565b610a865760405162461bcd60e51b815260206004820152601160248201527f494e56414c49445f5349474e415455524500000000000000000000000000000060448201526064016104e4565b6116a784848461128c565b6001600160a01b0383163b15610608576116c43385858585611c36565b6106085760405162461bcd60e51b815260206004820152601860248201527f4552433732315f5452414e534645525f52454a4543544544000000000000000060448201526064016104e4565b606060006040518061084001604052806108138152602001612a7c6108139139905061173e81604885611ce6565b61174a81609785611ce6565b600061175d61175885611dc0565b611df4565b905061176b82826001611f3c565b61177782826000611f3c565b61178382826002611f3c565b60005b6008811015611a1e576000600a63800000006117f2858051602082018051600390810b8452604084018051820b9092526060909301805180850b9283905260139290921d90911882840b600b1b90921891821891830b60081d919091189182900b905263ffffffff1690565b6117fd90601761292f565b6118079190612964565b6118119190612964565b90506000600a6380000000611876868051602082018051600390810b8452604084018051820b9092526060909301805180850b9283905260139290921d90911882840b600b1b90921891821891830b60081d919091189182900b905263ffffffff1690565b61188190601761292f565b61188b9190612964565b6118959190612964565b90506000600a63800000006118fa878051602082018051600390810b8452604084018051820b9092526060909301805180850b9283905260139290921d90911882840b600b1b90921891821891830b60081d919091189182900b905263ffffffff1690565b61190590601761292f565b61190f9190612964565b6119199190612964565b90506000600a638000000061197e888051602082018051600390810b8452604084018051820b9092526060909301805180850b9283905260139290921d90911882840b600b1b90921891821891830b60081d919091189182900b905263ffffffff1690565b61198990601761292f565b6119939190612964565b61199d9190612964565b90506119ac8760008787611fc1565b6119b98760018786611fc1565b6119c68760028785611fc1565b6119d38760038784611fc1565b6119e08760048784611fc1565b6119ed8760058785611fc1565b6119fa8760068786611fc1565b611a078760078787611fc1565b505050508080611a16906128ff565b915050611786565b50909392505050565b60007f8cad95687ba82c2ce50e74f7b754645e5117c3a5bec8151c0726d5857980a866611a6f604080518082019091526008815267426c6f636b69657360c01b602082015290565b8051602091820120604051611aa893928791879101938452602084019290925260408301526001600160a01b0316606082015260800190565b60405160208183030381529060405280519060200120905092915050565b6000806000611ad585856120b1565b90925090506000816004811115611aee57611aee612978565b148015611b0c5750856001600160a01b0316826001600160a01b0316145b15611b1c5760019250505061066b565b600080876001600160a01b0316631626ba7e60e01b8888604051602401611b4492919061298e565b60408051601f198184030181529181526020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff166001600160e01b0319909416939093179092529051611b9791906129af565b600060405180830381855afa9150503d8060008114611bd2576040519150601f19603f3d011682016040523d82523d6000602084013e611bd7565b606091505b5091509150818015611bea575080516020145b8015611c2a575080517f1626ba7e0000000000000000000000000000000000000000000000000000000090611c2890830160209081019084016129cb565b145b98975050505050505050565b600080846001600160a01b031663150b7a02888887876040518563ffffffff1660e01b8152600401611c6b94939291906129e4565b6020604051808303816000875af1158015611c8a573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611cae9190612a20565b6001600160e01b0319167f150b7a02000000000000000000000000000000000000000000000000000000001491505095945050505050565b80156108c5576040805180820190915260108082527f30313233343536373839616263646566000000000000000000000000000000006020830152611d2b9083612a3d565b81518110611d3b57611d3b612919565b01602001517fff00000000000000000000000000000000000000000000000000000000000000168383611d6d81612a51565b945081518110611d7f57611d7f612919565b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a905350611db9601082612964565b9050611ce6565b606060006040518060600160405280602a815260200161328f602a91399050610485816029856001600160a01b0316611ce6565b6040805160808101825260008082526020820181905291810182905260608101829052905b82518110156109bb57600381166000819003611e6557838281518110611e4157611e41612919565b602091010151835160f89190911c600382810b60051b9290920301900b8352611f33565b8060ff16600103611eab57838281518110611e8257611e82612919565b60209101810151908401805160f89290921c600383810b60051b939093030190910b9052611f33565b8060ff16600203611ef157838281518110611ec857611ec8612919565b60209101015160408401805160f89290921c600383810b60051b939093030190910b9052611f33565b8060ff16600303611f3357838281518110611f0e57611f0e612919565b60209101015160608401805160f89290921c600383810b60051b939093030190910b90525b50600101611e19565b6000806000611f4a856120f6565b9194509250905061014b60ff8516600103611f685750610181611f78565b8460ff16600203611f7857506104ce5b611f9187611f87836000612a68565b8661ffff166122f3565b611fa987611fa0836004612a68565b8560ff166122f3565b6114e287611fb8836009612a68565b8460ff166122f3565b60008160ff16600003611fd45750610608565b8160ff16600103611fe85750610193611ff8565b8160ff16600203611ff857506104e05b60008461200685600861292f565b6120109190612a68565b61201b90600c61292f565b61202685600561292f565b6120309084612a68565b61203a9190612a68565b612045906008612a68565b90507f310000000000000000000000000000000000000000000000000000000000000086828151811061207a5761207a612919565b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a905350505050505050565b60008082516041036120e75760208301516040840151606085015160001a6120db87828585612370565b945094505050506120ef565b506000905060025b9250929050565b6000806000638000000061215a858051602082018051600390810b8452604084018051820b9092526060909301805180850b9283905260139290921d90911882840b600b1b90921891821891830b60081d919091189182900b905263ffffffff1690565b610168028161216b5761216b61294e565b04925063800000006121cd858051602082018051600390810b8452604084018051820b9092526060909301805180850b9283905260139290921d90911882840b600b1b90921891821891830b60081d919091189182900b905263ffffffff1690565b603c02816121dd576121dd61294e565b0460280191506380000000612242858051602082018051600390810b8452604084018051820b9092526060909301805180850b9283905260139290921d90911882840b600b1b90921891821891830b60081d919091189182900b905263ffffffff1690565b855160208701805160408901805160608b018051600381810b808f52601390811d90921888820b600b90811b90991890811890820b600890811d9190911880830b9889905288841d90981896820b808a1b1896871896820b811d9690961880820b958690529185901d90941892840b9687901b90961891821891830b90931d189081900b90915263ffffffff9182169282169116010101601902816122e9576122e961294e565b0490509193909250565b80156108c557612304600a82612a3d565b61230f906030612a68565b60f81b838361231d81612a51565b94508151811061232f5761232f612919565b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a905350612369600a82612964565b90506122f3565b6000807f7fffffffffffffffffffffffffffffff5d576e7357a4501ddfe92f46681b20a08311156123a75750600090506003612454565b8460ff16601b141580156123bf57508460ff16601c14155b156123d05750600090506004612454565b6040805160008082526020820180845289905260ff881692820192909252606081018690526080810185905260019060a0016020604051602081039080840390855afa158015612424573d6000803e3d6000fd5b5050604051601f1901519150506001600160a01b03811661244d57600060019250925050612454565b9150600090505b94509492505050565b6001600160e01b03198116811461247357600080fd5b50565b60006020828403121561248857600080fd5b813561066b8161245d565b60005b838110156124ae578181015183820152602001612496565b50506000910152565b600081518084526124cf816020860160208601612493565b601f01601f19169290920160200192915050565b60208152600061066b60208301846124b7565b60006020828403121561250857600080fd5b5035919050565b80356001600160a01b038116811461092157600080fd5b6000806040838503121561253957600080fd5b6125428361250f565b946020939093013593505050565b60008060006060848603121561256557600080fd5b61256e8461250f565b925061257c6020850161250f565b9150604084013590509250925092565b60006020828403121561259e57600080fd5b61066b8261250f565b634e487b7160e01b600052604160045260246000fd5b600082601f8301126125ce57600080fd5b813567ffffffffffffffff808211156125e9576125e96125a7565b604051601f8301601f19908116603f01168101908282118183101715612611576126116125a7565b8160405283815286602085880101111561262a57600080fd5b836020870160208301376000602085830101528094505050505092915050565b6000806000806080858703121561266057600080fd5b6126698561250f565b93506020850135925060408501359150606085013567ffffffffffffffff81111561269357600080fd5b61269f878288016125bd565b91505092959194509250565b7fff00000000000000000000000000000000000000000000000000000000000000881681526000602060e0818401526126e760e084018a6124b7565b83810360408501526126f9818a6124b7565b606085018990526001600160a01b038816608086015260a0850187905284810360c0860152855180825283870192509083019060005b8181101561274b5783518352928401929184019160010161272f565b50909c9b505050505050505050505050565b6000806040838503121561277057600080fd5b6127798361250f565b91506020830135801515811461278e57600080fd5b809150509250929050565b600080600080608085870312156127af57600080fd5b6127b88561250f565b93506127c66020860161250f565b925060408501359150606085013567ffffffffffffffff81111561269357600080fd5b600080604083850312156127fc57600080fd5b6128058361250f565b91506128136020840161250f565b90509250929050565b6000806020838503121561282f57600080fd5b823567ffffffffffffffff8082111561284757600080fd5b818501915085601f83011261285b57600080fd5b81358181111561286a57600080fd5b8660208260051b850101111561287f57600080fd5b60209290920196919550909350505050565b602080825282518282018190526000919060409081850190868401855b828110156128dc57815180516001600160a01b031685528601518685015292840192908501906001016128ae565b5091979650505050505050565b634e487b7160e01b600052601160045260246000fd5b60006000198203612912576129126128e9565b5060010190565b634e487b7160e01b600052603260045260246000fd5b6000816000190483118215151615612949576129496128e9565b500290565b634e487b7160e01b600052601260045260246000fd5b6000826129735761297361294e565b500490565b634e487b7160e01b600052602160045260246000fd5b8281526040602082015260006129a760408301846124b7565b949350505050565b600082516129c1818460208701612493565b9190910192915050565b6000602082840312156129dd57600080fd5b5051919050565b60006001600160a01b03808716835280861660208401525083604083015260806060830152612a1660808301846124b7565b9695505050505050565b600060208284031215612a3257600080fd5b815161066b8161245d565b600082612a4c57612a4c61294e565b500690565b600081612a6057612a606128e9565b506000190190565b80820180821115610485576104856128e956fe646174613a6170706c69636174696f6e2f6a736f6e2c7b226e616d65223a22307830303030303030303030303030303030303030303030303030303030303030303030303030303030222c226465736372697074696f6e223a2241253230426c6f636b6965253230666f72253230307830303030303030303030303030303030303030303030303030303030303030303030303030303030222c22696d616765223a22646174613a696d6167652f7376672b786d6c2c3c737667253230786d6c6e733d27687474703a2f2f7777772e77332e6f72672f323030302f7376672725323073686170652d72656e646572696e673d27637269737045646765732725323077696474683d27353132272532306865696768743d27353132273e3c672532307472616e73666f726d3d277363616c6528363429273e3c7061746825323066696c6c3d2768736c283030302c303030252c303030252927253230643d274d302c3068387638682d387a272f3e3c7061746825323066696c6c3d2768736c283030302c303030252c303030252927253230643d274d302c3068317630682d317a6d312c3068317630682d317a6d312c3068317630682d317a6d312c3068317630682d317a6d312c3068317630682d317a6d312c3068317630682d317a6d312c3068317630682d317a6d312c3068317630682d317a6d2d382c316d312c3068317630682d317a6d312c3068317630682d317a6d312c3068317630682d317a6d312c3068317630682d317a6d312c3068317630682d317a6d312c3068317630682d317a6d312c3068317630682d317a6d312c3068317630682d317a6d2d382c316d312c3068317630682d317a6d312c3068317630682d317a6d312c3068317630682d317a6d312c3068317630682d317a6d312c3068317630682d317a6d312c3068317630682d317a6d312c3068317630682d317a6d312c3068317630682d317a6d2d382c316d312c3068317630682d317a6d312c3068317630682d317a6d312c3068317630682d317a6d312c3068317630682d317a6d312c3068317630682d317a6d312c3068317630682d317a6d312c3068317630682d317a6d312c3068317630682d317a6d2d382c316d312c3068317630682d317a6d312c3068317630682d317a6d312c3068317630682d317a6d312c3068317630682d317a6d312c3068317630682d317a6d312c3068317630682d317a6d312c3068317630682d317a6d312c3068317630682d317a6d2d382c316d312c3068317630682d317a6d312c3068317630682d317a6d312c3068317630682d317a6d312c3068317630682d317a6d312c3068317630682d317a6d312c3068317630682d317a6d312c3068317630682d317a6d312c3068317630682d317a6d2d382c316d312c3068317630682d317a6d312c3068317630682d317a6d312c3068317630682d317a6d312c3068317630682d317a6d312c3068317630682d317a6d312c3068317630682d317a6d312c3068317630682d317a6d312c3068317630682d317a6d2d382c316d312c3068317630682d317a6d312c3068317630682d317a6d312c3068317630682d317a6d312c3068317630682d317a6d312c3068317630682d317a6d312c3068317630682d317a6d312c3068317630682d317a6d312c3068317630682d317a272f3e3c7061746825323066696c6c3d2768736c283030302c303030252c303030252927253230643d274d302c3068317630682d317a6d312c3068317630682d317a6d312c3068317630682d317a6d312c3068317630682d317a6d312c3068317630682d317a6d312c3068317630682d317a6d312c3068317630682d317a6d312c3068317630682d317a6d2d382c316d312c3068317630682d317a6d312c3068317630682d317a6d312c3068317630682d317a6d312c3068317630682d317a6d312c3068317630682d317a6d312c3068317630682d317a6d312c3068317630682d317a6d312c3068317630682d317a6d2d382c316d312c3068317630682d317a6d312c3068317630682d317a6d312c3068317630682d317a6d312c3068317630682d317a6d312c3068317630682d317a6d312c3068317630682d317a6d312c3068317630682d317a6d312c3068317630682d317a6d2d382c316d312c3068317630682d317a6d312c3068317630682d317a6d312c3068317630682d317a6d312c3068317630682d317a6d312c3068317630682d317a6d312c3068317630682d317a6d312c3068317630682d317a6d312c3068317630682d317a6d2d382c316d312c3068317630682d317a6d312c3068317630682d317a6d312c3068317630682d317a6d312c3068317630682d317a6d312c3068317630682d317a6d312c3068317630682d317a6d312c3068317630682d317a6d312c3068317630682d317a6d2d382c316d312c3068317630682d317a6d312c3068317630682d317a6d312c3068317630682d317a6d312c3068317630682d317a6d312c3068317630682d317a6d312c3068317630682d317a6d312c3068317630682d317a6d312c3068317630682d317a6d2d382c316d312c3068317630682d317a6d312c3068317630682d317a6d312c3068317630682d317a6d312c3068317630682d317a6d312c3068317630682d317a6d312c3068317630682d317a6d312c3068317630682d317a6d312c3068317630682d317a6d2d382c316d312c3068317630682d317a6d312c3068317630682d317a6d312c3068317630682d317a6d312c3068317630682d317a6d312c3068317630682d317a6d312c3068317630682d317a6d312c3068317630682d317a6d312c3068317630682d317a272f3e3c2f673e3c2f7376673e227d307830303030303030303030303030303030303030303030303030303030303030303030303030303030a264697066735822122024871b21c072ffd9af3c731991ddfbb5176074c03f075869e2e0bc8f954b0af764736f6c63430008100033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "approve(address,uint256)": {
        "params": {
          "id": "The id of the token.",
          "operator": "The address receiving the approval."
        }
      },
      "balanceOf(address)": {
        "params": {
          "owner": "The address to look for."
        },
        "returns": {
          "balance": "The number of tokens owned by the address."
        }
      },
      "getApproved(uint256)": {
        "params": {
          "id": "The id of the token."
        },
        "returns": {
          "_0": "The address of the operator."
        }
      },
      "isApprovedForAll(address,address)": {
        "params": {
          "operator": "The address of the operator.",
          "owner": "The address of the owner."
        },
        "returns": {
          "isOperator": "The status of the approval."
        }
      },
      "nonces(address)": {
        "params": {
          "account": "the account to query"
        },
        "returns": {
          "nonce": "nonce"
        }
      },
      "nonces(uint256)": {
        "params": {
          "id": "token id to query"
        },
        "returns": {
          "nonce": "nonce"
        }
      },
      "ownerAndLastTransferBlockNumberList(uint256[])": {
        "params": {
          "ids": "The list of token ids to check."
        },
        "returns": {
          "ownersData": "The list of (owner, lastTransferBlockNumber) for each ids given as input."
        }
      },
      "ownerOf(uint256)": {
        "params": {
          "id": "The id of the token."
        },
        "returns": {
          "owner": "The address of the token owner."
        }
      },
      "safeTransferFrom(address,address,uint256)": {
        "params": {
          "from": "The send of the token.",
          "id": "The id of the token.",
          "to": "The recipient of the token."
        }
      },
      "safeTransferFrom(address,address,uint256,bytes)": {
        "params": {
          "data": "Additional data.",
          "from": "The sender of the token.",
          "id": "The id of the token.",
          "to": "The recipient of the token."
        }
      },
      "setApprovalForAll(address,bool)": {
        "params": {
          "approved": "The determination of the approval.",
          "operator": "The address receiving the approval."
        }
      },
      "tokenNonces(uint256)": {
        "params": {
          "id": "token id to query"
        },
        "returns": {
          "nonce": "nonce"
        }
      },
      "totalSupply()": {
        "returns": {
          "_0": "A count of valid NFTs tracked by this contract, where each one of  them has an assigned and queryable owner not equal to the zero address"
        }
      },
      "transferFrom(address,address,uint256)": {
        "params": {
          "from": "The sender of the token.",
          "id": "The id of the token.",
          "to": "The recipient of the token."
        }
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "approve(address,uint256)": {
        "notice": "Approve an operator to transfer a specific token on the senders behalf."
      },
      "balanceOf(address)": {
        "notice": "Get the number of tokens owned by an address."
      },
      "getApproved(uint256)": {
        "notice": "Get the approved operator for a specific token."
      },
      "isApprovedForAll(address,address)": {
        "notice": "Check if the sender approved the operator."
      },
      "nonces(address)": {
        "notice": "return the account nonce, used for approvalForAll permit or other account related matter"
      },
      "nonces(uint256)": {
        "notice": "return the token nonce, used for individual approve permit or other token related matter"
      },
      "ownerAndLastTransferBlockNumberList(uint256[])": {
        "notice": "Get the list of owner of a token and the blockNumber of its last transfer, useful to voting mechanism."
      },
      "ownerOf(uint256)": {
        "notice": "Get the owner of a token."
      },
      "safeTransferFrom(address,address,uint256)": {
        "notice": "Transfer a token between 2 addresses letting the receiver know of the transfer."
      },
      "safeTransferFrom(address,address,uint256,bytes)": {
        "notice": "Transfer a token between 2 addresses letting the receiver knows of the transfer."
      },
      "setApprovalForAll(address,bool)": {
        "notice": "Set the approval for an operator to manage all the tokens of the sender."
      },
      "tokenNonces(uint256)": {
        "notice": "return the token nonce, used for individual approve permit or other token related matter"
      },
      "totalSupply()": {
        "notice": "Count NFTs tracked by this contract"
      },
      "transferFrom(address,address,uint256)": {
        "notice": "Transfer a token between 2 addresses."
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 624,
        "contract": "src/Blockies.sol:Blockies",
        "label": "_owners",
        "offset": 0,
        "slot": "0",
        "type": "t_mapping(t_uint256,t_uint256)"
      },
      {
        "astId": 628,
        "contract": "src/Blockies.sol:Blockies",
        "label": "_balances",
        "offset": 0,
        "slot": "1",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 634,
        "contract": "src/Blockies.sol:Blockies",
        "label": "_operatorsForAll",
        "offset": 0,
        "slot": "2",
        "type": "t_mapping(t_address,t_mapping(t_address,t_bool))"
      },
      {
        "astId": 638,
        "contract": "src/Blockies.sol:Blockies",
        "label": "_operators",
        "offset": 0,
        "slot": "3",
        "type": "t_mapping(t_uint256,t_address)"
      },
      {
        "astId": 239,
        "contract": "src/Blockies.sol:Blockies",
        "label": "_userNonces",
        "offset": 0,
        "slot": "4",
        "type": "t_mapping(t_address,t_uint256)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_address,t_mapping(t_address,t_bool))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(address => bool))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_bool)"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_uint256,t_address)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => address)",
        "numberOfBytes": "32",
        "value": "t_address"
      },
      "t_mapping(t_uint256,t_uint256)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}